{
  "Resources": {
    "ApiF70053CD": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "AuthenticationType": "API_KEY",
        "Name": "dev-anyupp-backend-anyupp-appsync-api",
        "XrayEnabled": true
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/Resource"
      }
    },
    "ApiSchema510EECD7": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Definition": "type Address @aws_iam @aws_api_key @aws_cognito_user_pools {\n  address: String\n  city: String\n  country: String\n  title: String\n  postalCode: String\n  location: Location\n}\n\ntype Location @aws_iam @aws_api_key @aws_cognito_user_pools {\n  lat: Float\n  lng: Float\n}\n\ninput AddressInput {\n  address: String\n  city: String\n  country: String\n  title: String\n  postalCode: String\n  location: LocationInput\n}\n\ninput LocationInput {\n  lat: Float\n  lng: Float\n}\n\ntype LocalizedItem {\n  en: String\n  de: String\n  hu: String\n}\n\ninput LocalizedItemInput {\n  en: String\n  de: String\n  hu: String\n}\n\n# AdminUser\n\ntype AdminUser @aws_iam @aws_api_key @aws_cognito_user_pools {\n  id: ID!\n  name: String\n  profileImage: String\n  roles: AdminUserRole!\n  settings: AdminUserSettings\n  address: Address\n  email: String\n  phone: String\n}\n\ntype AdminUserRole @aws_iam @aws_api_key @aws_cognito_user_pools {\n  role: String!\n  entities: [AdminRoleEntity]\n}\n\ntype AdminRoleEntity @aws_iam @aws_api_key @aws_cognito_user_pools {\n  chainId: String\n  groupId: String\n  unitId: String\n}\n\ntype AdminUserSettings @aws_iam @aws_api_key @aws_cognito_user_pools {\n  selectedChainId: String\n  selectedGroupId: String\n  selectedUnitId: String\n  selectedProductCategoryId: String\n  selectedLanguage: String\n  selectedHistoryDate: Int\n}\n\ninput CreateAdminUserInput {\n  name: String!\n  address: AddressInput\n  email: String!\n  phone: String\n  profileImage: String\n}\n\ninput UpdateAdminUserInput {\n  id: ID!\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n}\n\ninput AdminUserRoleInput {\n  role: String!\n  entities: [AdminRoleEntityInput]\n}\n\ninput AdminRoleEntityInput {\n  chainId: String\n  groupId: String\n  unitId: String\n}\n\n# Stripe\n\n# STRIPE schema example https://github.com/jferrettiboke/stripe-graphql/blob/master/generated/schema.graphql\n\n# https://stripe.com/docs/api/cards/object?lang=node\n# Card brand\nenum CardBrand {\n  amex\n  diners\n  discover\n  jcb\n  mastercard\n  unionpay\n  visa\n  unknown\n}\n\n# https://stripe.com/docs/api/cards/object?lang=node#card_object-funding\n# Card funding type\nenum CardFundingType {\n  credit\n  debit\n  prepaid\n  unknown\n}\n\n# enum StripePaymentMethodType {\n#   alipay\n#   au_becs_debit\n#   bacs_debit\n#   bancontact\n#   card\n#   eps\n#   fpx\n#   giropay\n#   grabpay\n#   ideal\n#   oxxo\n#   p24\n#   sepa_debit\n#   sofort\n# }\n\ntype CardChecks {\n  address_line1_check: String\n  address_postal_code_check: String\n  cvc_check: String\n}\n\n# https://stripe.com/docs/api/metadata?lang=node\n# Updateable Stripe objects\ntype StripeMetadata {\n  key: String!\n  value: String!\n}\n\ntype StripeCard {\n  brand: CardBrand\n  checks: CardChecks\n  country: String\n  last4: String\n  exp_month: Int\n  exp_year: Int\n  fingerprint: String\n  funding: CardFundingType\n  three_d_secure: String\n  # wallet: String # to do\n  # IMPLEMENTED INTERFACES\n  id: ID!\n  object: String!\n  metadata: [StripeMetadata!]!\n}\n\ninput StartStripePaymentInput {\n  chainId: ID!\n  unitId: ID!\n  userId: ID!\n  paymentMethodId: ID!\n}\n\ntype StartStripePaymentOutput {\n  clientSecret: String!\n  status: String!\n}\n\n# Chain\n\ntype Chain {\n  id: ID!\n  name: String\n  description: LocalizedItem\n  style: ChainStyle\n  isActive: Boolean\n}\n\ntype ChainStyle {\n  colors: ChainStyleColors\n  images: ChainStyleImages\n}\n\ntype ChainStyleColors {\n  backgroundLight: String\n  backgroundDark: String\n  borderLight: String\n  borderDark: String\n  disabled: String\n  highlight: String\n  indicator: String\n  textLight: String\n  textDark: String\n}\n\ntype ChainStyleImages {\n  header: String\n  logo: String\n}\n\ninput CreateChainInput {\n  name: String\n  description: LocalizedItemInput\n  style: ChainStyleInput\n  isActive: Boolean\n}\n\ninput UpdateChainInput {\n  id: ID!\n  name: String\n  description: LocalizedItemInput\n  style: ChainStyleInput\n  isActive: Boolean\n}\n\ninput ChainStyleInput {\n  colors: ChainStyleColorsInput\n  images: ChainStyleImagesInput\n}\n\ninput ChainStyleColorsInput {\n  backgroundLight: String\n  backgroundDark: String\n  borderLight: String\n  borderDark: String\n  disabled: String\n  highlight: String\n  indicator: String\n  textLight: String\n  textDark: String\n}\n\ninput ChainStyleImagesInput {\n  header: String\n  logo: String\n}\n\n# Group\ntype Group {\n  id: ID!\n  chainId: ID!\n  name: String\n  description: LocalizedItem\n  currency: String\n  address: Address\n  email: String\n  phone: String\n}\n\ninput CreateGroupInput {\n  chainId: ID!\n  name: String\n  description: LocalizedItemInput\n  currency: String\n  address: AddressInput\n  email: String\n  phone: String\n}\n\ninput UpdateGroupInput {\n  id: ID!\n  chainId: ID!\n  name: String\n  description: LocalizedItemInput\n  currency: String\n  address: AddressInput\n  email: String\n  phone: String\n}\n\n# OrderItem\ntype StatusLog {\n  userId: ID\n  status: String\n  ts: Int\n}\n\ntype PriceShown {\n  currency: String\n  pricePerUnit: Float\n  priceSum: Float\n  tax: Int\n  taxSum: Float\n}\n\ninput PriceShownInput {\n  currency: String\n  pricePerUnit: Float\n  priceSum: Float\n  tax: Int\n  taxSum: Float\n}\n\ntype OrderItem {\n  id: ID!\n  created: Int\n  productName: LocalizedItem\n  priceShown: PriceShown\n  productId: ID\n  quantity: Int\n  statusLog: [StatusLog]\n  variantId: ID\n  variantName: LocalizedItem\n  laneId: ID\n}\n\ninput CreateOrderItemInput {\n  productName: LocalizedItemInput\n  priceShown: PriceShownInput\n  productId: ID\n  quantity: Int\n  variantId: ID\n  variantName: LocalizedItemInput\n  laneId: ID\n}\n\ninput UpdateOrderItemInput {\n  id: ID!\n  productName: LocalizedItemInput\n  priceShown: PriceShownInput\n  productId: ID\n  quantity: Int\n  variantId: ID\n  variantName: LocalizedItemInput\n  laneId: ID\n}\n\n# Order\ntype Order {\n  id: ID!\n  created: Int\n  items: [OrderItem]\n  paymentMethod: String\n  staffId: ID\n  statusLog: [StatusLog]\n  sumPriceShown: PriceShown\n  takeAway: Boolean\n  userId: ID\n  place: Place\n  paymentIntention: Int\n}\n\ntype Place {\n  seat: String\n  table: String\n}\n\ninput PlaceInput {\n  seat: String\n  table: String\n}\n\ninput CreateOrderInput {\n  orderItems: [ID]\n  paymentMethod: String\n  staffId: ID\n  sumPriceShown: PriceShownInput\n  takeAway: Boolean\n  userId: ID\n  place: PlaceInput\n  paymentIntention: Int\n}\n\ninput UpdateOrderInput {\n  id: ID!\n  orderItems: [ID]\n  paymentMethod: String\n  staffId: ID\n  sumPriceShown: PriceShownInput\n  takeAway: Boolean\n  userId: ID\n  place: PlaceInput\n  paymentIntention: Int\n}\n\n# ProductCategory\ntype ProductCategory {\n  id: ID!\n  description: LocalizedItem\n  image: String\n  name: LocalizedItem\n  position: String\n}\n\ninput CreateProductCategoryInput {\n  description: LocalizedItemInput\n  image: String\n  name: LocalizedItemInput\n  position: String\n}\n\ninput UpdateProductCategoryInput {\n  id: ID!\n  description: LocalizedItemInput\n  image: String\n  name: LocalizedItemInput\n  position: String\n}\n\n# ChainProduct\ntype ChainProduct {\n  id: ID!\n  # contains\n  description: LocalizedItem\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItem\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariant]\n}\n\ninput CreateChainProductInput {\n  description: LocalizedItemInput\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItemInput\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariantInput]\n}\n\ninput UpdateChainProductInput {\n  id: ID!\n  description: LocalizedItemInput\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItemInput\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariantInput]\n}\n\ntype ProductVariant {\n  variantName: LocalizedItem\n  pack: ProductVariantPack\n  refGroupPrice: Float\n  isAvailable: Boolean\n  price: Float\n  availabilities: [Availability]\n  availableFrom: String\n  position: String\n}\n\ninput ProductVariantInput {\n  variantName: LocalizedItemInput\n  pack: ProductVariantPackInput\n  refGroupPrice: Float\n  isAvailable: Boolean\n  price: Float\n  availabilities: [AvailabilityInput]\n  availableFrom: String\n  position: String\n}\n\ntype ProductVariantPack {\n  size: Float\n  unit: String\n}\n\ninput ProductVariantPackInput {\n  size: Float\n  unit: String\n}\n\ntype Availability {\n  type: String\n  dayFrom: String\n  dayTo: String\n  timeFrom: String\n  timeTo: String\n  price: Float\n}\n\ninput AvailabilityInput {\n  type: String\n  dayFrom: String\n  dayTo: String\n  timeFrom: String\n  timeTo: String\n  price: Float\n}\n# Unit\ntype Unit {\n  id: ID!\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItem\n  paymentModes: [PaymentMode]\n  floorMap: FloorMapData\n  lanes: [Lane]\n  open: DailySchedule\n  openingHours: WeeklySchedule\n}\n\ninput CreateUnitInput {\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItemInput\n  paymentModes: [PaymentModeInput]\n  floorMap: FloorMapDataInput\n  lanes: [LaneInput]\n  open: DailyScheduleInput\n  openingHours: WeeklyScheduleInput\n}\n\ninput UpdateUnitInput {\n  id: ID!\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItemInput\n  paymentModes: [PaymentModeInput]\n  floorMap: FloorMapDataInput\n  lanes: [LaneInput]\n  open: DailyScheduleInput\n  openingHours: WeeklyScheduleInput\n}\n\ntype DailySchedule {\n  from: String\n  to: String\n}\n\ninput DailyScheduleInput {\n  from: String\n  to: String\n}\n\ntype CustomDailySchedule {\n  date: String\n  from: String\n  to: String\n}\n\ninput CustomDailyScheduleInput {\n  date: String\n  from: String\n  to: String\n}\n\ntype WeeklySchedule {\n  mon: DailySchedule\n  tue: DailySchedule\n  wed: DailySchedule\n  thu: DailySchedule\n  fri: DailySchedule\n  sat: DailySchedule\n  sun: DailySchedule\n  override: [CustomDailySchedule]\n}\n\ninput WeeklyScheduleInput {\n  mon: DailyScheduleInput\n  tue: DailyScheduleInput\n  wed: DailyScheduleInput\n  thu: DailyScheduleInput\n  fri: DailyScheduleInput\n  sat: DailyScheduleInput\n  sun: DailyScheduleInput\n  override: [CustomDailyScheduleInput]\n}\n\ntype PaymentMode {\n  name: String!\n  caption: String\n  method: String!\n}\n\ninput PaymentModeInput {\n  name: String!\n  caption: String\n  method: String!\n}\n\ntype FloorMapData {\n  w: Int\n  h: Int\n  objects: [FloorMapDataObject]\n}\n\ninput FloorMapDataInput {\n  w: Int\n  h: Int\n  objects: [FloorMapDataObjectInput]\n}\n\ntype FloorMapDataObject {\n  id: ID!\n  t: String!\n  c: String\n  w: Int\n  h: Int\n  r: Int\n  a: Int\n  x: Int!\n  y: Int!\n  tID: String # Table ID\n  sID: String # Seat Id\n}\n\ninput FloorMapDataObjectInput {\n  id: ID!\n  t: String!\n  c: String\n  w: Int\n  h: Int\n  r: Int\n  a: Int\n  x: Int!\n  y: Int!\n  tID: String # Table ID\n  sID: String # Seat Id\n}\n\ntype Lane {\n  id: ID\n  name: String\n  color: String\n}\n\ninput LaneInput {\n  id: ID\n  name: String\n  color: String\n}\n\n# User\ntype User {\n  id: ID!\n  name: String\n  address: Address\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\ninput CreateUserInput {\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\ninput UpdateUserInput {\n  id: ID!\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\n# Operations\n\ntype Query {\n  # Admin\n  getAdminUser(id: ID!): AdminUser @aws_iam @aws_api_key @aws_cognito_user_pools\n  getAdminUsers: [AdminUser] @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Chain\n  getChain(id: ID!): Chain @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Group\n  getGroup(id: ID!): Group @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # OrderItem\n  getOrderItem(id: ID!): OrderItem @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Order\n  getOrder(id: ID!): Order @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # ProductCategory\n  getProductCategory(id: ID!): ProductCategory\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # ChainProduct\n  getChainProduct(id: ID!): ChainProduct\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Unit\n  getUnit(id: ID!): Unit @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # User\n  getUser(id: ID!): User @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Stripe\n  getCustomerStripeCards(customerId: ID): [StripeCard]\n\n  # Hellobello\n  hellobello(name: String!): String\n}\n\ntype Mutation {\n  # AdminUser\n  createAdminUser(input: CreateAdminUserInput!): AdminUser\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateAdminUser(input: UpdateAdminUserInput!): AdminUser\n  deleteAdminUser(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateAdminUserRole(input: AdminUserRoleInput!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Chain\n  createChain(input: CreateChainInput!): Chain\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateChain(input: UpdateChainInput!): Chain\n  deleteChain(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Group\n  createGroup(input: CreateGroupInput!): Group\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateGroup(input: UpdateGroupInput!): Group\n  deleteGroup(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # OrderItem\n  createOrderItem(input: CreateOrderItemInput!): OrderItem\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateOrderItem(input: UpdateOrderItemInput!): OrderItem\n  deleteOrderItem(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Order\n  createOrder(input: CreateOrderInput!): Order\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateOrder(input: UpdateOrderInput!): Order\n  deleteOrder(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # ProductCategory\n  createProductCategory(input: CreateProductCategoryInput!): ProductCategory\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateProductCategory(input: UpdateProductCategoryInput!): ProductCategory\n  deleteProductCategory(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # ChainProduct\n  createChainProduct(input: CreateChainProductInput!): ChainProduct\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateChainProduct(input: UpdateChainProductInput!): ChainProduct\n  deleteChainProduct(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Unit\n  createUnit(input: CreateUnitInput!): Unit\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateUnit(input: UpdateUnitInput!): Unit\n  deleteUnit(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # User\n  createUser(input: CreateUserInput!): User\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateUser(input: UpdateUserInput!): User\n  deleteUser(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Stripe\n  startStripePayment(args: StartStripePaymentInput!): StartStripePaymentOutput!\n}\n\ntype Subscription {\n  updatedAdminUser(id: ID!): AdminUser\n    @aws_subscribe(mutations: [\"updateAdminUser\"])\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  createdAdminUser: AdminUser\n    @aws_subscribe(mutations: [\"createAdminUser\"])\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n}\n"
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/Schema"
      }
    },
    "ApiDefaultApiKeyF991C37B": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Expires": 1645274239
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/DefaultApiKey"
      }
    },
    "ApiAdminUserDynamoDbDataSourceServiceRoleAEA1B2EF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiAdminUserDynamoDbDataSourceServiceRoleDefaultPolicy0C584B37": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AdminUserB562FFE8",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiAdminUserDynamoDbDataSourceServiceRoleDefaultPolicy0C584B37",
        "Roles": [
          {
            "Ref": "ApiAdminUserDynamoDbDataSourceServiceRoleAEA1B2EF"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiAdminUserDynamoDbDataSource30BE4577": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "AdminUserDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "AdminUserB562FFE8"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiAdminUserDynamoDbDataSourceServiceRoleAEA1B2EF",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/Resource"
      }
    },
    "ApiAdminUserDynamoDbDataSourcecreateAdminUserFunctionF0646485": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "AdminUserDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createAdminUser",
        "Description": "Create a AdminUser",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiAdminUserDynamoDbDataSource30BE4577",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/createAdminUserFunction/Resource"
      }
    },
    "ApiMutationdeleteAdminUserResolver6315C50C": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteAdminUser",
        "TypeName": "Mutation",
        "DataSourceName": "AdminUserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiAdminUserDynamoDbDataSource30BE4577",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteAdminUserResolver/Resource"
      }
    },
    "ApiQuerygetAdminUserResolverF5BFCA7A": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getAdminUser",
        "TypeName": "Query",
        "DataSourceName": "AdminUserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiAdminUserDynamoDbDataSource30BE4577",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetAdminUserResolver/Resource"
      }
    },
    "ApiMutationupdateAdminUserResolverA864C37F": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateAdminUser",
        "TypeName": "Mutation",
        "DataSourceName": "AdminUserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiAdminUserDynamoDbDataSource30BE4577",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateAdminUserResolver/Resource"
      }
    },
    "ApiChainDynamoDbDataSourceServiceRole9939FE43": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiChainDynamoDbDataSourceServiceRoleDefaultPolicy33051CAB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Chain51EFBDDD",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiChainDynamoDbDataSourceServiceRoleDefaultPolicy33051CAB",
        "Roles": [
          {
            "Ref": "ApiChainDynamoDbDataSourceServiceRole9939FE43"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiChainDynamoDbDataSource9AA7F855": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "ChainDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "Chain51EFBDDD"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiChainDynamoDbDataSourceServiceRole9939FE43",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/Resource"
      }
    },
    "ApiChainDynamoDbDataSourcecreateChainFunctionD6A8A673": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "ChainDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createChain",
        "Description": "Create a Chain",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainDynamoDbDataSource9AA7F855",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/createChainFunction/Resource"
      }
    },
    "ApiMutationdeleteChainResolver18721796": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteChain",
        "TypeName": "Mutation",
        "DataSourceName": "ChainDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainDynamoDbDataSource9AA7F855",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainResolver/Resource"
      }
    },
    "ApiQuerygetChainResolver1CEB2082": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getChain",
        "TypeName": "Query",
        "DataSourceName": "ChainDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainDynamoDbDataSource9AA7F855",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetChainResolver/Resource"
      }
    },
    "ApiMutationupdateChainResolver579D1666": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateChain",
        "TypeName": "Mutation",
        "DataSourceName": "ChainDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainDynamoDbDataSource9AA7F855",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateChainResolver/Resource"
      }
    },
    "ApiGroupDynamoDbDataSourceServiceRoleF35CFCF2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiGroupDynamoDbDataSourceServiceRoleDefaultPolicyF3B8FD68": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Group5F8EBFD4",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiGroupDynamoDbDataSourceServiceRoleDefaultPolicyF3B8FD68",
        "Roles": [
          {
            "Ref": "ApiGroupDynamoDbDataSourceServiceRoleF35CFCF2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiGroupDynamoDbDataSourceB84422C0": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "GroupDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "Group5F8EBFD4"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiGroupDynamoDbDataSourceServiceRoleF35CFCF2",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/Resource"
      }
    },
    "ApiGroupDynamoDbDataSourcecreateGroupFunctionBDB4178C": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "GroupDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createGroup",
        "Description": "Create a Group",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiGroupDynamoDbDataSourceB84422C0",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/createGroupFunction/Resource"
      }
    },
    "ApiMutationdeleteGroupResolverF4E6E5AA": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteGroup",
        "TypeName": "Mutation",
        "DataSourceName": "GroupDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiGroupDynamoDbDataSourceB84422C0",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteGroupResolver/Resource"
      }
    },
    "ApiQuerygetGroupResolverB8814816": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getGroup",
        "TypeName": "Query",
        "DataSourceName": "GroupDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiGroupDynamoDbDataSourceB84422C0",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetGroupResolver/Resource"
      }
    },
    "ApiMutationupdateGroupResolverBAD8FD0D": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateGroup",
        "TypeName": "Mutation",
        "DataSourceName": "GroupDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiGroupDynamoDbDataSourceB84422C0",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateGroupResolver/Resource"
      }
    },
    "ApiOrderItemDynamoDbDataSourceServiceRole55687418": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiOrderItemDynamoDbDataSourceServiceRoleDefaultPolicyB89B245E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "OrderItemCA48CFE2",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiOrderItemDynamoDbDataSourceServiceRoleDefaultPolicyB89B245E",
        "Roles": [
          {
            "Ref": "ApiOrderItemDynamoDbDataSourceServiceRole55687418"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiOrderItemDynamoDbDataSourceD67DD6BF": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "OrderItemDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "OrderItemCA48CFE2"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiOrderItemDynamoDbDataSourceServiceRole55687418",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/Resource"
      }
    },
    "ApiOrderItemDynamoDbDataSourcecreateOrderItemFunction52D0B901": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "OrderItemDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createOrderItem",
        "Description": "Create a OrderItem",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderItemDynamoDbDataSourceD67DD6BF",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/createOrderItemFunction/Resource"
      }
    },
    "ApiMutationdeleteOrderItemResolver3B5D3C04": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteOrderItem",
        "TypeName": "Mutation",
        "DataSourceName": "OrderItemDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderItemDynamoDbDataSourceD67DD6BF",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderItemResolver/Resource"
      }
    },
    "ApiQuerygetOrderItemResolver7AD5EFD6": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getOrderItem",
        "TypeName": "Query",
        "DataSourceName": "OrderItemDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderItemDynamoDbDataSourceD67DD6BF",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetOrderItemResolver/Resource"
      }
    },
    "ApiMutationupdateOrderItemResolverFC3C52FA": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateOrderItem",
        "TypeName": "Mutation",
        "DataSourceName": "OrderItemDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderItemDynamoDbDataSourceD67DD6BF",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderItemResolver/Resource"
      }
    },
    "ApiOrderDynamoDbDataSourceServiceRoleC418381E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiOrderDynamoDbDataSourceServiceRoleDefaultPolicyCD8FCEA7": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Order1A9696B9",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiOrderDynamoDbDataSourceServiceRoleDefaultPolicyCD8FCEA7",
        "Roles": [
          {
            "Ref": "ApiOrderDynamoDbDataSourceServiceRoleC418381E"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiOrderDynamoDbDataSource542DE5C4": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "OrderDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "Order1A9696B9"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiOrderDynamoDbDataSourceServiceRoleC418381E",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/Resource"
      }
    },
    "ApiOrderDynamoDbDataSourcecreateOrderFunctionA2442474": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "OrderDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createOrder",
        "Description": "Create a Order",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderDynamoDbDataSource542DE5C4",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/createOrderFunction/Resource"
      }
    },
    "ApiMutationdeleteOrderResolverBFC15ECD": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteOrder",
        "TypeName": "Mutation",
        "DataSourceName": "OrderDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderDynamoDbDataSource542DE5C4",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderResolver/Resource"
      }
    },
    "ApiQuerygetOrderResolver4A6AD837": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getOrder",
        "TypeName": "Query",
        "DataSourceName": "OrderDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderDynamoDbDataSource542DE5C4",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetOrderResolver/Resource"
      }
    },
    "ApiMutationupdateOrderResolverEFFC8C3F": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateOrder",
        "TypeName": "Mutation",
        "DataSourceName": "OrderDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiOrderDynamoDbDataSource542DE5C4",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderResolver/Resource"
      }
    },
    "ApiProductCategoryDynamoDbDataSourceServiceRole78F43A04": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiProductCategoryDynamoDbDataSourceServiceRoleDefaultPolicyEC6B3583": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ProductCategoryE0CB0748",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiProductCategoryDynamoDbDataSourceServiceRoleDefaultPolicyEC6B3583",
        "Roles": [
          {
            "Ref": "ApiProductCategoryDynamoDbDataSourceServiceRole78F43A04"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiProductCategoryDynamoDbDataSourceB0DFDA93": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "ProductCategoryDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "ProductCategoryE0CB0748"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiProductCategoryDynamoDbDataSourceServiceRole78F43A04",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/Resource"
      }
    },
    "ApiProductCategoryDynamoDbDataSourcecreateProductCategoryFunction80E96D4C": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "ProductCategoryDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createProductCategory",
        "Description": "Create a ProductCategory",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiProductCategoryDynamoDbDataSourceB0DFDA93",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/createProductCategoryFunction/Resource"
      }
    },
    "ApiMutationdeleteProductCategoryResolver24C48A60": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteProductCategory",
        "TypeName": "Mutation",
        "DataSourceName": "ProductCategoryDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiProductCategoryDynamoDbDataSourceB0DFDA93",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteProductCategoryResolver/Resource"
      }
    },
    "ApiQuerygetProductCategoryResolver9091DC7C": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getProductCategory",
        "TypeName": "Query",
        "DataSourceName": "ProductCategoryDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiProductCategoryDynamoDbDataSourceB0DFDA93",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetProductCategoryResolver/Resource"
      }
    },
    "ApiMutationupdateProductCategoryResolver978CDDA9": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateProductCategory",
        "TypeName": "Mutation",
        "DataSourceName": "ProductCategoryDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiProductCategoryDynamoDbDataSourceB0DFDA93",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateProductCategoryResolver/Resource"
      }
    },
    "ApiChainProductDynamoDbDataSourceServiceRole5D0ED21D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiChainProductDynamoDbDataSourceServiceRoleDefaultPolicyA7BA2A32": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ChainProduct3129DBA1",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiChainProductDynamoDbDataSourceServiceRoleDefaultPolicyA7BA2A32",
        "Roles": [
          {
            "Ref": "ApiChainProductDynamoDbDataSourceServiceRole5D0ED21D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiChainProductDynamoDbDataSource9640CF7F": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "ChainProductDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "ChainProduct3129DBA1"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiChainProductDynamoDbDataSourceServiceRole5D0ED21D",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/Resource"
      }
    },
    "ApiChainProductDynamoDbDataSourcecreateChainProductFunction39AC3FE6": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "ChainProductDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createChainProduct",
        "Description": "Create a ChainProduct",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainProductDynamoDbDataSource9640CF7F",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/createChainProductFunction/Resource"
      }
    },
    "ApiMutationdeleteChainProductResolver010A2B95": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteChainProduct",
        "TypeName": "Mutation",
        "DataSourceName": "ChainProductDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainProductDynamoDbDataSource9640CF7F",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainProductResolver/Resource"
      }
    },
    "ApiQuerygetChainProductResolverA30F3C9B": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getChainProduct",
        "TypeName": "Query",
        "DataSourceName": "ChainProductDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainProductDynamoDbDataSource9640CF7F",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetChainProductResolver/Resource"
      }
    },
    "ApiMutationupdateChainProductResolver7C2E4DB0": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateChainProduct",
        "TypeName": "Mutation",
        "DataSourceName": "ChainProductDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiChainProductDynamoDbDataSource9640CF7F",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateChainProductResolver/Resource"
      }
    },
    "ApiUnitDynamoDbDataSourceServiceRoleD3776C85": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiUnitDynamoDbDataSourceServiceRoleDefaultPolicy8A05D74A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UnitD801F908",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiUnitDynamoDbDataSourceServiceRoleDefaultPolicy8A05D74A",
        "Roles": [
          {
            "Ref": "ApiUnitDynamoDbDataSourceServiceRoleD3776C85"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiUnitDynamoDbDataSource8D31F287": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "UnitDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "UnitD801F908"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiUnitDynamoDbDataSourceServiceRoleD3776C85",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/Resource"
      }
    },
    "ApiUnitDynamoDbDataSourcecreateUnitFunctionBBBCA3FB": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "UnitDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createUnit",
        "Description": "Create a Unit",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUnitDynamoDbDataSource8D31F287"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/createUnitFunction/Resource"
      }
    },
    "ApiMutationdeleteUnitResolver2E9831AB": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteUnit",
        "TypeName": "Mutation",
        "DataSourceName": "UnitDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUnitDynamoDbDataSource8D31F287"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteUnitResolver/Resource"
      }
    },
    "ApiQuerygetUnitResolver4C6C5076": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getUnit",
        "TypeName": "Query",
        "DataSourceName": "UnitDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUnitDynamoDbDataSource8D31F287"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetUnitResolver/Resource"
      }
    },
    "ApiMutationupdateUnitResolver39455B92": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateUnit",
        "TypeName": "Mutation",
        "DataSourceName": "UnitDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUnitDynamoDbDataSource8D31F287"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateUnitResolver/Resource"
      }
    },
    "ApiUserDynamoDbDataSourceServiceRole2BCFA83D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole/Resource"
      }
    },
    "ApiUserDynamoDbDataSourceServiceRoleDefaultPolicyAC68DA47": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "User8C194555",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApiUserDynamoDbDataSourceServiceRoleDefaultPolicyAC68DA47",
        "Roles": [
          {
            "Ref": "ApiUserDynamoDbDataSourceServiceRole2BCFA83D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApiUserDynamoDbDataSource85368BB6": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "UserDynamoDbDataSource",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": "eu-west-1",
          "TableName": {
            "Ref": "User8C194555"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApiUserDynamoDbDataSourceServiceRole2BCFA83D",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/Resource"
      }
    },
    "ApiUserDynamoDbDataSourcecreateUserFunction400962A7": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "UserDynamoDbDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "createUser",
        "Description": "Create a User",
        "RequestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUserDynamoDbDataSource85368BB6"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/createUserFunction/Resource"
      }
    },
    "ApiMutationdeleteUserResolver08C44CED": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "deleteUser",
        "TypeName": "Mutation",
        "DataSourceName": "UserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUserDynamoDbDataSource85368BB6"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationdeleteUserResolver/Resource"
      }
    },
    "ApiQuerygetUserResolver80300A2E": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "getUser",
        "TypeName": "Query",
        "DataSourceName": "UserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUserDynamoDbDataSource85368BB6"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QuerygetUserResolver/Resource"
      }
    },
    "ApiMutationupdateUserResolverC1D8B7A0": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "updateUser",
        "TypeName": "Mutation",
        "DataSourceName": "UserDynamoDbDataSource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "ApiUserDynamoDbDataSource85368BB6"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/MutationupdateUserResolver/Resource"
      }
    },
    "ApilambdaDatasourceServiceRole2CA75790": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole/Resource"
      }
    },
    "ApilambdaDatasourceServiceRoleDefaultPolicy3A97E34D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AppsyncLambda25F06A30",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ApilambdaDatasourceServiceRoleDefaultPolicy3A97E34D",
        "Roles": [
          {
            "Ref": "ApilambdaDatasourceServiceRole2CA75790"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ApilambdaDatasource2C776EE2": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "lambdaDatasource",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "AppsyncLambda25F06A30",
              "Arn"
            ]
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "ApilambdaDatasourceServiceRole2CA75790",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/Resource"
      }
    },
    "ApiQueryhellobelloResolverD0D54866": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "hellobello",
        "TypeName": "Query",
        "DataSourceName": "lambdaDatasource",
        "Kind": "UNIT",
        "RequestMappingTemplate": "\n        {\n          \"version\" : \"2017-02-28\",\n          \"operation\" : \"Invoke\",\n          \"payload\": \"$context.arguments.name\"\n        }\n        ",
        "ResponseMappingTemplate": "$util.toJson($context.result)"
      },
      "DependsOn": [
        "ApilambdaDatasource2C776EE2",
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Api/QueryhellobelloResolver/Resource"
      }
    },
    "NoneDataSourceE15C2AD2": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "Name": "NoneDataSource",
        "Type": "NONE"
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/NoneDataSource/Resource"
      }
    },
    "NoneDataSourcevalidateLonFunction41B889F7": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "NoneDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "validateLon",
        "Description": "Validate a longitude",
        "RequestMappingTemplate": "\n        #set($valid = $util.isNull($object.url) or ($ctx.stash.lon <= 180.0) and ($ctx.stash.lon >= -180.0))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.lon is not a valid longitude.\")\n        #end\n        {}\n      ",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "NoneDataSourceE15C2AD2"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/NoneDataSource/validateLonFunction/Resource"
      }
    },
    "NoneDataSourcevalidateLatFunction33748E04": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "NoneDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "validateLat",
        "Description": "Validate a latitude",
        "RequestMappingTemplate": "\n        #set($valid = $util.isNull($object.url) or ($ctx.stash.lat <= 90.0) and ($ctx.stash.lat >= -90.0))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.lat is not a valid latitude.\")\n        #end\n        {}\n      ",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "NoneDataSourceE15C2AD2"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/NoneDataSource/validateLatFunction/Resource"
      }
    },
    "NoneDataSourcevalidateAddressFunction366FE1CA": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "NoneDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "validateAddress",
        "Description": "Validate an address",
        "RequestMappingTemplate": "\n        #set($valid = \n             ($util.isNull($ctx.stash.address.location.lng) and $util.isNull($ctx.stash.address.location.lat)) or \n             (($ctx.stash.address.location.lat <= 90.0) and ($ctx.stash.address.location.lat >= -90.0) and\n             ($ctx.stash.address.location.lng <= 180.0) and ($ctx.stash.address.location.lng >= -180.0)\n             ))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.address is not a valid address\")\n        #end\n        {} \n      ",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "NoneDataSourceE15C2AD2"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/NoneDataSource/validateAddressFunction/Resource"
      }
    },
    "NoneDataSourcevalidateUrlFunction16A63FF7": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "DataSourceName": "NoneDataSource",
        "FunctionVersion": "2018-05-29",
        "Name": "validateUrl",
        "Description": "Validate an url",
        "RequestMappingTemplate": "\n        #set($valid = $util.matches(\"^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?\", $ctx.stash.url))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.url is not a valid ur.\")\n        #end\n        {}\n      ",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7",
        "NoneDataSourceE15C2AD2"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/NoneDataSource/validateUrlFunction/Resource"
      }
    },
    "AdminUserB562FFE8": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/AdminUser/AdminUser/Resource"
      }
    },
    "createAdminUser2D97B84A": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createAdminUser",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "NoneDataSourcevalidateAddressFunction366FE1CA",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "ApiAdminUserDynamoDbDataSourcecreateAdminUserFunctionF0646485",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "$util.qr($ctx.stash.put(\"address\", $ctx.args.input.address))\n\n{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createAdminUser/Resource"
      }
    },
    "Chain51EFBDDD": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Chain/Chain/Resource"
      }
    },
    "createChain478F7946": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createChain",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiChainDynamoDbDataSourcecreateChainFunctionD6A8A673",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createChain/Resource"
      }
    },
    "Group5F8EBFD4": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Group/Group/Resource"
      }
    },
    "createGroup0259743F": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createGroup",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiGroupDynamoDbDataSourcecreateGroupFunctionBDB4178C",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createGroup/Resource"
      }
    },
    "OrderItemCA48CFE2": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/OrderItem/OrderItem/Resource"
      }
    },
    "createOrderItem1F32D1C4": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createOrderItem",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiOrderItemDynamoDbDataSourcecreateOrderItemFunction52D0B901",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createOrderItem/Resource"
      }
    },
    "Order1A9696B9": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Order/Order/Resource"
      }
    },
    "createOrder36EBF614": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createOrder",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiOrderDynamoDbDataSourcecreateOrderFunctionA2442474",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createOrder/Resource"
      }
    },
    "ProductCategoryE0CB0748": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategory/Resource"
      }
    },
    "createProductCategory6E5439F9": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createProductCategory",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiProductCategoryDynamoDbDataSourcecreateProductCategoryFunction80E96D4C",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createProductCategory/Resource"
      }
    },
    "ChainProduct3129DBA1": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/ChainProduct/ChainProduct/Resource"
      }
    },
    "createChainProductF040BB45": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createChainProduct",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiChainProductDynamoDbDataSourcecreateChainProductFunction39AC3FE6",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createChainProduct/Resource"
      }
    },
    "UnitD801F908": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/Unit/Unit/Resource"
      }
    },
    "createUnit44D766BE": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createUnit",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiUnitDynamoDbDataSourcecreateUnitFunctionBBBCA3FB",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createUnit/Resource"
      }
    },
    "User8C194555": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/User/User/Resource"
      }
    },
    "createUserC6ED88E6": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "ApiId"
          ]
        },
        "FieldName": "createUser",
        "TypeName": "Mutation",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "ApiUserDynamoDbDataSourcecreateUserFunction400962A7",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "{}",
        "ResponseMappingTemplate": "$util.toJson($context.result)\n"
      },
      "DependsOn": [
        "ApiSchema510EECD7"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/createUser/Resource"
      }
    },
    "GraphqlApiUrlParam2046ED65": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "GraphQLUrl"
          ]
        },
        "AllowedPattern": ".*",
        "Description": "The graphql API endpoint URL",
        "Name": "dev-anyupp-backend-GraphqlApiUrl"
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/GraphqlApiUrlParam/Resource"
      }
    },
    "GraphqlApiKeyParamE0993A62": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "ApiDefaultApiKeyF991C37B",
            "ApiKey"
          ]
        },
        "AllowedPattern": ".*",
        "Description": "The graphql API key",
        "Name": "dev-anyupp-backend-GraphqlApiKey"
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/GraphqlApiKeyParam/Resource"
      }
    },
    "AppsyncLambdaServiceRole9B8FD837": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/AppsyncLambda/ServiceRole/Resource"
      }
    },
    "AppsyncLambda25F06A30": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3BucketF7CC5A3A"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3VersionKey4042E5F3"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3VersionKey4042E5F3"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AppsyncLambdaServiceRole9B8FD837",
            "Arn"
          ]
        },
        "Handler": "lib/lambda/appsync-lambda/index.handler",
        "Runtime": "nodejs12.x"
      },
      "DependsOn": [
        "AppsyncLambdaServiceRole9B8FD837"
      ],
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/AppsyncLambda/Resource",
        "aws:asset:path": "asset.28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da.zip",
        "aws:asset:property": "Code"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Modules": "aws-cdk=1.89.0,@aws-cdk/assets=1.89.0,@aws-cdk/aws-apigateway=1.89.0,@aws-cdk/aws-apigatewayv2=1.89.0,@aws-cdk/aws-apigatewayv2-integrations=1.89.0,@aws-cdk/aws-applicationautoscaling=1.89.0,@aws-cdk/aws-appsync=1.89.0,@aws-cdk/aws-autoscaling=1.89.0,@aws-cdk/aws-autoscaling-common=1.89.0,@aws-cdk/aws-autoscaling-hooktargets=1.89.0,@aws-cdk/aws-certificatemanager=1.89.0,@aws-cdk/aws-cloudfront=1.89.0,@aws-cdk/aws-cloudwatch=1.89.0,@aws-cdk/aws-codeguruprofiler=1.89.0,@aws-cdk/aws-cognito=1.89.0,@aws-cdk/aws-dynamodb=1.89.0,@aws-cdk/aws-ec2=1.89.0,@aws-cdk/aws-ecr=1.89.0,@aws-cdk/aws-ecr-assets=1.89.0,@aws-cdk/aws-ecs=1.89.0,@aws-cdk/aws-elasticloadbalancingv2=1.89.0,@aws-cdk/aws-events=1.89.0,@aws-cdk/aws-events-targets=1.89.0,@aws-cdk/aws-iam=1.89.0,@aws-cdk/aws-kms=1.89.0,@aws-cdk/aws-lambda=1.89.0,@aws-cdk/aws-lambda-event-sources=1.89.0,@aws-cdk/aws-logs=1.89.0,@aws-cdk/aws-route53=1.89.0,@aws-cdk/aws-route53-targets=1.89.0,@aws-cdk/aws-s3=1.89.0,@aws-cdk/aws-s3-assets=1.89.0,@aws-cdk/aws-s3-deployment=1.89.0,@aws-cdk/aws-s3-notifications=1.89.0,@aws-cdk/aws-servicediscovery=1.89.0,@aws-cdk/aws-sns=1.89.0,@aws-cdk/aws-sns-subscriptions=1.89.0,@aws-cdk/aws-sqs=1.89.0,@aws-cdk/aws-ssm=1.89.0,@aws-cdk/cloud-assembly-schema=1.89.0,@aws-cdk/core=1.89.0,@aws-cdk/custom-resources=1.89.0,@aws-cdk/cx-api=1.89.0,@aws-cdk/lambda-layer-awscli=1.89.0,@aws-cdk/region-info=1.89.0,jsii-runtime=node.js/v12.20.0"
      },
      "Metadata": {
        "aws:cdk:path": "dev-anyupp-backend-appsync/CDKMetadata/Default"
      }
    }
  },
  "Outputs": {
    "AdminUserAdminUserTableName4EA37F92": {
      "Value": {
        "Ref": "AdminUserB562FFE8"
      },
      "Export": {
        "Name": "dev-anyupp-backend-AdminUserTableName"
      }
    },
    "AdminUserAdminUserTableArnC0462EEF": {
      "Value": {
        "Fn::GetAtt": [
          "AdminUserB562FFE8",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-AdminUserTableArn"
      }
    },
    "ChainChainTableNameE56C5B11": {
      "Value": {
        "Ref": "Chain51EFBDDD"
      },
      "Export": {
        "Name": "dev-anyupp-backend-ChainTableName"
      }
    },
    "ChainChainTableArn9A909879": {
      "Value": {
        "Fn::GetAtt": [
          "Chain51EFBDDD",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-ChainTableArn"
      }
    },
    "GroupGroupTableName8454BBC0": {
      "Value": {
        "Ref": "Group5F8EBFD4"
      },
      "Export": {
        "Name": "dev-anyupp-backend-GroupTableName"
      }
    },
    "GroupGroupTableArn5686F9C1": {
      "Value": {
        "Fn::GetAtt": [
          "Group5F8EBFD4",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-GroupTableArn"
      }
    },
    "OrderItemOrderItemTableNameB6FA15F4": {
      "Value": {
        "Ref": "OrderItemCA48CFE2"
      },
      "Export": {
        "Name": "dev-anyupp-backend-OrderItemTableName"
      }
    },
    "OrderItemOrderItemTableArn98890B5F": {
      "Value": {
        "Fn::GetAtt": [
          "OrderItemCA48CFE2",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-OrderItemTableArn"
      }
    },
    "OrderOrderTableName5A2F9DF0": {
      "Value": {
        "Ref": "Order1A9696B9"
      },
      "Export": {
        "Name": "dev-anyupp-backend-OrderTableName"
      }
    },
    "OrderOrderTableArnC887D332": {
      "Value": {
        "Fn::GetAtt": [
          "Order1A9696B9",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-OrderTableArn"
      }
    },
    "ProductCategoryProductCategoryTableName10D2B5F9": {
      "Value": {
        "Ref": "ProductCategoryE0CB0748"
      },
      "Export": {
        "Name": "dev-anyupp-backend-ProductCategoryTableName"
      }
    },
    "ProductCategoryProductCategoryTableArn1CD77818": {
      "Value": {
        "Fn::GetAtt": [
          "ProductCategoryE0CB0748",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-ProductCategoryTableArn"
      }
    },
    "ChainProductChainProductTableNameBFEA5BD8": {
      "Value": {
        "Ref": "ChainProduct3129DBA1"
      },
      "Export": {
        "Name": "dev-anyupp-backend-ChainProductTableName"
      }
    },
    "ChainProductChainProductTableArn05B4B0D8": {
      "Value": {
        "Fn::GetAtt": [
          "ChainProduct3129DBA1",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-ChainProductTableArn"
      }
    },
    "UnitUnitTableNameC8EBF35E": {
      "Value": {
        "Ref": "UnitD801F908"
      },
      "Export": {
        "Name": "dev-anyupp-backend-UnitTableName"
      }
    },
    "UnitUnitTableArn1C367E2E": {
      "Value": {
        "Fn::GetAtt": [
          "UnitD801F908",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-UnitTableArn"
      }
    },
    "UserUserTableNameFB901F0A": {
      "Value": {
        "Ref": "User8C194555"
      },
      "Export": {
        "Name": "dev-anyupp-backend-UserTableName"
      }
    },
    "UserUserTableArn7E5483D7": {
      "Value": {
        "Fn::GetAtt": [
          "User8C194555",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dev-anyupp-backend-UserTableArn"
      }
    },
    "GraphqlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "ApiF70053CD",
          "GraphQLUrl"
        ]
      }
    },
    "GraphqlApiKey": {
      "Value": {
        "Fn::GetAtt": [
          "ApiDefaultApiKeyF991C37B",
          "ApiKey"
        ]
      }
    }
  },
  "Parameters": {
    "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3BucketF7CC5A3A": {
      "Type": "String",
      "Description": "S3 bucket for asset \"28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da\""
    },
    "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3VersionKey4042E5F3": {
      "Type": "String",
      "Description": "S3 key for asset version \"28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da\""
    },
    "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daArtifactHashF65B6243": {
      "Type": "String",
      "Description": "Artifact hash for asset \"28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da\""
    }
  }
}