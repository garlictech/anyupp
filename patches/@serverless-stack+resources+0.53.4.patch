diff --git a/node_modules/@serverless-stack/resources/dist/Stack.js b/node_modules/@serverless-stack/resources/dist/Stack.js
index 84695eb..b274b6d 100644
--- a/node_modules/@serverless-stack/resources/dist/Stack.js
+++ b/node_modules/@serverless-stack/resources/dist/Stack.js
@@ -1,128 +1,158 @@
-"use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
+'use strict';
+var __createBinding =
+  (this && this.__createBinding) ||
+  (Object.create
+    ? function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        Object.defineProperty(o, k2, {
+          enumerable: true,
+          get: function () {
+            return m[k];
+          },
+        });
+      }
+    : function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        o[k2] = m[k];
+      });
+var __setModuleDefault =
+  (this && this.__setModuleDefault) ||
+  (Object.create
+    ? function (o, v) {
+        Object.defineProperty(o, 'default', { enumerable: true, value: v });
+      }
+    : function (o, v) {
+        o['default'] = v;
+      });
+var __importStar =
+  (this && this.__importStar) ||
+  function (mod) {
     if (mod && mod.__esModule) return mod;
     var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    if (mod != null)
+      for (var k in mod)
+        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
+          __createBinding(result, mod, k);
     __setModuleDefault(result, mod);
     return result;
-};
-Object.defineProperty(exports, "__esModule", { value: true });
+  };
+Object.defineProperty(exports, '__esModule', { value: true });
 exports.Stack = void 0;
-const path = __importStar(require("path"));
-const fs = __importStar(require("fs-extra"));
-const cdk = __importStar(require("@aws-cdk/core"));
-const Function_1 = require("./Function");
-const construct_1 = require("./util/construct");
+const path = __importStar(require('path'));
+const fs = __importStar(require('fs-extra'));
+const cdk = __importStar(require('@aws-cdk/core'));
+const Function_1 = require('./Function');
+const construct_1 = require('./util/construct');
 class Stack extends cdk.Stack {
-    constructor(scope, id, props) {
-        const root = scope.node.root;
-        const stackId = root.logicalPrefixedName(id);
-        Stack.checkForPropsIsConstruct(id, props);
-        Stack.checkForEnvInProps(id, props);
-        super(scope, stackId, Object.assign(Object.assign({}, props), { env: {
-                account: process.env.CDK_DEFAULT_ACCOUNT,
-                region: root.region,
-            } }));
-        this.stage = root.stage;
-        this.defaultFunctionProps = root.defaultFunctionProps.map((dfp) => typeof dfp === "function" ? dfp(this) : dfp);
-        this.metadata = this.createMetadataResource();
-    }
-    setDefaultFunctionProps(props) {
-        const fns = this.getAllFunctions();
-        if (fns.length > 0)
-            throw new Error("Default function props for the stack must be set before any functions have been added. Use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' instead to add more default properties.");
-        this.defaultFunctionProps.push(props);
-    }
-    addDefaultFunctionPermissions(permissions) {
-        this.defaultFunctionProps.push({
-            permissions,
-        });
-    }
-    addDefaultFunctionEnv(environment) {
-        this.defaultFunctionProps.push({
-            environment,
-        });
-    }
-    addDefaultFunctionLayers(layers) {
-        this.defaultFunctionProps.push({
-            layers,
-        });
-    }
-    getAllFunctions() {
-        return this.doGetAllFunctions(this);
-    }
-    doGetAllFunctions(construct) {
-        const results = [];
-        for (const child of construct.node.children) {
-            if (child instanceof Function_1.Function)
-                results.push(child);
-            results.push(...this.doGetAllFunctions(child));
-        }
-        return results;
-    }
-    addOutputs(outputs) {
-        Object.keys(outputs).forEach((key) => {
-            const value = outputs[key];
-            if (value === undefined) {
-                throw new Error(`The stack output "${key}" is undefined`);
-            }
-            else if (typeof value === "string") {
-                new cdk.CfnOutput(this, key, { value });
-            }
-            else {
-                new cdk.CfnOutput(this, key, value);
-            }
-        });
-    }
-    addConstructsMetadata(metadata) {
-        this.metadata.addMetadata("sst:constructs", metadata);
-    }
-    createMetadataResource() {
-        // Add a placeholder resource to ensure stacks with just an imported construct
-        // has at least 1 resource, so the deployment succeeds.
-        // For example: users often create a stack and use it to import a VPC. The
-        //              stack does not have any resources.
-        const res = new cdk.CfnResource(this, "SSTMetadata", {
-            type: "AWS::CDK::Metadata",
-        });
-        // Add verison metadata
-        const packageJson = fs.readJsonSync(path.join(__dirname, "..", "package.json"));
-        res.addMetadata("sst:version", packageJson.version);
-        return res;
+  constructor(scope, id, props) {
+    const root = scope.node.root;
+    const stackId = root.logicalPrefixedName(id);
+    Stack.checkForPropsIsConstruct(id, props);
+    Stack.checkForEnvInProps(id, props);
+    super(
+      scope,
+      stackId,
+      Object.assign(Object.assign({}, props), {
+        env: {
+          account: process.env.CDK_DEFAULT_ACCOUNT,
+          region: root.region,
+        },
+      }),
+    );
+    this.stage = root.stage;
+    this.defaultFunctionProps = root.defaultFunctionProps.map(dfp =>
+      typeof dfp === 'function' ? dfp(this) : dfp,
+    );
+    this.metadata = this.createMetadataResource();
+  }
+  setDefaultFunctionProps(props) {
+    const fns = this.getAllFunctions();
+    if (fns.length > 0)
+      throw new Error(
+        "Default function props for the stack must be set before any functions have been added. Use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' instead to add more default properties.",
+      );
+    this.defaultFunctionProps.push(props);
+  }
+  addDefaultFunctionPermissions(permissions) {
+    this.defaultFunctionProps.push({
+      permissions,
+    });
+  }
+  addDefaultFunctionEnv(environment) {
+    this.defaultFunctionProps.push({
+      environment,
+    });
+  }
+  addDefaultFunctionLayers(layers) {
+    this.defaultFunctionProps.push({
+      layers,
+    });
+  }
+  getAllFunctions() {
+    return this.doGetAllFunctions(this);
+  }
+  doGetAllFunctions(construct) {
+    const results = [];
+    for (const child of construct.node.children) {
+      if (child instanceof Function_1.Function) results.push(child);
+      results.push(...this.doGetAllFunctions(child));
     }
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    static checkForPropsIsConstruct(id, props) {
-        // If a construct is passed in as stack props, let's detect it and throw a
-        // friendlier error.
-        if (props && (0, construct_1.isConstruct)(props)) {
-            throw new Error(`Expected an associative array as the stack props while initializing "${id}" stack. Received a construct instead.`);
-        }
+    return results;
+  }
+  addOutputs(outputs) {
+    Object.keys(outputs).forEach(key => {
+      const value = outputs[key];
+      if (value === undefined) {
+        throw new Error(`The stack output "${key}" is undefined`);
+      } else if (typeof value === 'string') {
+        new cdk.CfnOutput(this, key, { value });
+      } else {
+        new cdk.CfnOutput(this, key, value);
+      }
+    });
+  }
+  addConstructsMetadata(metadata) {
+    this.metadata.addMetadata('sst:constructs', metadata);
+  }
+  createMetadataResource() {
+    // Add a placeholder resource to ensure stacks with just an imported construct
+    // has at least 1 resource, so the deployment succeeds.
+    // For example: users often create a stack and use it to import a VPC. The
+    //              stack does not have any resources.
+    const res = new cdk.CfnResource(this, 'SSTMetadata', {
+      type: 'AWS::CDK::Metadata',
+    });
+    // Add verison metadata
+    const packageJson = fs.readJsonSync(
+      path.join(__dirname, '..', '..', 'package.json'),
+    );
+    res.addMetadata('sst:version', packageJson.version);
+    return res;
+  }
+  // eslint-disable-next-line @typescript-eslint/no-explicit-any
+  static checkForPropsIsConstruct(id, props) {
+    // If a construct is passed in as stack props, let's detect it and throw a
+    // friendlier error.
+    if (props && (0, construct_1.isConstruct)(props)) {
+      throw new Error(
+        `Expected an associative array as the stack props while initializing "${id}" stack. Received a construct instead.`,
+      );
     }
-    // eslint-disable-next-line @typescript-eslint/no-explicit-any
-    static checkForEnvInProps(id, props) {
-        if (props && props.env) {
-            let envS = "";
-            try {
-                envS = " (" + JSON.stringify(props.env) + ")";
-            }
-            catch (e) {
-                // Ignore
-            }
-            throw new Error(`Do not set the "env" prop while initializing "${id}" stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" CLI option instead.`);
-        }
+  }
+  // eslint-disable-next-line @typescript-eslint/no-explicit-any
+  static checkForEnvInProps(id, props) {
+    if (props && props.env) {
+      let envS = '';
+      try {
+        envS = ' (' + JSON.stringify(props.env) + ')';
+      } catch (e) {
+        // Ignore
+      }
+      throw new Error(
+        `Do not set the "env" prop while initializing "${id}" stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" CLI option instead.`,
+      );
     }
+  }
 }
 exports.Stack = Stack;
 //# sourceMappingURL=data:application/json;base64,
diff --git a/node_modules/@serverless-stack/resources/src/Stack.ts b/node_modules/@serverless-stack/resources/src/Stack.ts
index 41886bf..9882c4b 100644
--- a/node_modules/@serverless-stack/resources/src/Stack.ts
+++ b/node_modules/@serverless-stack/resources/src/Stack.ts
@@ -1,11 +1,11 @@
-import * as path from "path";
-import * as fs from "fs-extra";
-import * as cdk from "@aws-cdk/core";
-import { FunctionProps, Function as Fn } from "./Function";
-import { App } from "./App";
-import { isConstruct } from "./util/construct";
-import { Permissions } from "./util/permission";
-import * as lambda from "@aws-cdk/aws-lambda";
+import * as path from 'path';
+import * as fs from 'fs-extra';
+import * as cdk from '@aws-cdk/core';
+import { FunctionProps, Function as Fn } from './Function';
+import { App } from './App';
+import { isConstruct } from './util/construct';
+import { Permissions } from './util/permission';
+import * as lambda from '@aws-cdk/aws-lambda';
 
 export type StackProps = cdk.StackProps;
 
@@ -30,8 +30,8 @@ export class Stack extends cdk.Stack {
     });
 
     this.stage = root.stage;
-    this.defaultFunctionProps = root.defaultFunctionProps.map((dfp) =>
-      typeof dfp === "function" ? dfp(this) : dfp
+    this.defaultFunctionProps = root.defaultFunctionProps.map(dfp =>
+      typeof dfp === 'function' ? dfp(this) : dfp,
     );
 
     this.metadata = this.createMetadataResource();
@@ -41,7 +41,7 @@ export class Stack extends cdk.Stack {
     const fns = this.getAllFunctions();
     if (fns.length > 0)
       throw new Error(
-        "Default function props for the stack must be set before any functions have been added. Use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' instead to add more default properties."
+        "Default function props for the stack must be set before any functions have been added. Use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' instead to add more default properties.",
       );
     this.defaultFunctionProps.push(props);
   }
@@ -80,11 +80,11 @@ export class Stack extends cdk.Stack {
   public addOutputs(outputs: {
     [key: string]: string | cdk.CfnOutputProps;
   }): void {
-    Object.keys(outputs).forEach((key) => {
+    Object.keys(outputs).forEach(key => {
       const value = outputs[key];
       if (value === undefined) {
         throw new Error(`The stack output "${key}" is undefined`);
-      } else if (typeof value === "string") {
+      } else if (typeof value === 'string') {
         new cdk.CfnOutput(this, key, { value });
       } else {
         new cdk.CfnOutput(this, key, value);
@@ -93,7 +93,7 @@ export class Stack extends cdk.Stack {
   }
 
   public addConstructsMetadata(metadata: any): void {
-    this.metadata.addMetadata("sst:constructs", metadata);
+    this.metadata.addMetadata('sst:constructs', metadata);
   }
 
   private createMetadataResource(): cdk.CfnResource {
@@ -101,15 +101,14 @@ export class Stack extends cdk.Stack {
     // has at least 1 resource, so the deployment succeeds.
     // For example: users often create a stack and use it to import a VPC. The
     //              stack does not have any resources.
-    const res = new cdk.CfnResource(this, "SSTMetadata", {
-      type: "AWS::CDK::Metadata",
+    const res = new cdk.CfnResource(this, 'SSTMetadata', {
+      type: 'AWS::CDK::Metadata',
     });
-
     // Add verison metadata
     const packageJson = fs.readJsonSync(
-      path.join(__dirname, "..", "package.json")
+      path.join(__dirname, '..', 'package.json'),
     );
-    res.addMetadata("sst:version", packageJson.version);
+    res.addMetadata('sst:version', packageJson.version);
 
     return res;
   }
@@ -120,7 +119,7 @@ export class Stack extends cdk.Stack {
     // friendlier error.
     if (props && isConstruct(props)) {
       throw new Error(
-        `Expected an associative array as the stack props while initializing "${id}" stack. Received a construct instead.`
+        `Expected an associative array as the stack props while initializing "${id}" stack. Received a construct instead.`,
       );
     }
   }
@@ -128,16 +127,16 @@ export class Stack extends cdk.Stack {
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
   private static checkForEnvInProps(id: string, props?: any) {
     if (props && props.env) {
-      let envS = "";
+      let envS = '';
 
       try {
-        envS = " (" + JSON.stringify(props.env) + ")";
+        envS = ' (' + JSON.stringify(props.env) + ')';
       } catch (e) {
         // Ignore
       }
 
       throw new Error(
-        `Do not set the "env" prop while initializing "${id}" stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" CLI option instead.`
+        `Do not set the "env" prop while initializing "${id}" stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" CLI option instead.`,
       );
     }
   }
