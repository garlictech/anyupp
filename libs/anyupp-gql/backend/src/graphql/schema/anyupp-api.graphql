### COMMON
# TODO: extraxt these because the admin-api also contains these
type Location @aws_cognito_user_pools {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

type Address @aws_cognito_user_pools {
  address: String!
  city: String!
  country: String!
  title: String!
  postalCode: String!
  location: Location!
}

type LocalizedItem @aws_cognito_user_pools {
  en: String
  de: String
  hu: String
}

type PaymentMode @aws_cognito_user_pools {
  type: PaymentType!
  caption: String
  method: PaymentMethod!
}

enum PaymentMethod {
  cash
  card
  inapp
}

enum PaymentType {
  card
  cash
  simple
  stripe
  applepay
  googlepay
}

type ChainStyle @aws_cognito_user_pools {
  colors: ChainStyleColors!
  images: ChainStyleImages
}

type ChainStyleColors @aws_cognito_user_pools {
  backgroundLight: String!
  backgroundDark: String!
  borderLight: String!
  borderDark: String!
  disabled: String!
  highlight: String!
  indicator: String!
  textLight: String!
  textDark: String!
}

type ChainStyleImages @aws_cognito_user_pools {
  header: String
  logo: String
}

input LocalizedItemInput {
  en: String
  de: String
  hu: String
}

### ADMIN_USER
input CreateAdminUserInput {
  email: String!
  phone: String!
  name: String!
}

### ORDER
input CreateOrderFromCartInput {
  id: ID!
}

## UNIT
input RegenerateUnitDataInput {
  id: ID!
}

# input PlaceInput {
#   seat: String!
#   table: String!
# }

### UNIT_PRODUCT

type UnitProduct @aws_cognito_user_pools {
  id: ID!
  parentId: ID!
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean!
  laneId: ID
  position: Int!
  variants: [ProductVariant]
}

type ProductVariant @aws_cognito_user_pools {
  id: ID!
  variantName: LocalizedItem!
  pack: ProductVariantPack
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [Availability]
  position: Int!
}

type ProductVariantPack @aws_cognito_user_pools {
  size: Float!
  unit: String!
}

type Availability @aws_cognito_user_pools {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}
input CreateUnitProductInput { # TODO: delete the whole CreateUnitProduct mutation because we would use stream later probably and this whole endpoint is NOT used at all
  id: ID!
  parentId: ID! # parent groupProduct ID
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean!
  laneId: ID
  position: Int!
  variants: [ProductVariantInput]
}

input ProductVariantInput {
  id: ID!
  variantName: LocalizedItemInput!
  pack: ProductVariantPackInput
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [AvailabilityInput]
  position: Int!
}

input ProductVariantPackInput {
  size: Float!
  unit: String!
}

input AvailabilityInput {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}

type CreateAnonymUserOutput {
  username: String!
  pwd: String!
}

### STRIPE
# STRIPE schema example https://github.com/jferrettiboke/stripe-graphql/blob/master/generated/schema.graphql

# https://stripe.com/docs/api/cards/object?lang=node
enum CardBrand {
  amex
  diners
  discover
  jcb
  mastercard
  unionpay
  visa
  unknown
}

# https://stripe.com/docs/api/cards/object?lang=node#card_object-funding
enum CardFundingType {
  credit
  debit
  prepaid
  unknown
}

# https://stripe.com/docs/api/metadata?lang=node
# Updateable Stripe objects

type BillingDetails {
  email: String
  name: String
  phone: String
  address: BillingAddress
}

type BillingAddress {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type CardChecks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

type StripeCard @aws_cognito_user_pools {
  id: String!
  name: String
  brand: CardBrand
  checks: CardChecks
  country: String
  last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: CardFundingType
  three_d_secure: String
  billing_details: BillingDetails
}

input UserInvoiceAddress {
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
}

input StartStripePaymentInput {
  orderId: ID!
  paymentMethod: PaymentMethod!
  savePaymentMethod: Boolean!
  paymentMethodId: String
  invoiceAddress: UserInvoiceAddress
}

type StartStripePaymentOutput @aws_cognito_user_pools {
  clientSecret: String!
  status: String!
}

input StripeCardCreateInput {
  card_number: String!
  exp_month: Int!
  exp_year: Int!
  cvc: String!
  default_for_currency: Boolean
  name: String!
}

input StripeCardUpdateInput {
  paymentMethodId: String!
  default_for_currency: Boolean
  name: String
}

input StripeCardDeleteInput {
  paymentMethodId: String!
}

### UNIT GEO_UNIT
input GetUnitsNearLocationInput {
  location: LocationInput!
}

type OpeningHoursByDate @aws_cognito_user_pools {
  date: String!
  closed: Boolean!
  from: Float
  to: Float
}

type GeoUnit @aws_cognito_user_pools {
  id: ID!
  groupId: ID!
  chainId: ID!
  name: String!
  address: Address!
  style: ChainStyle!
  paymentModes: [PaymentMode]
  distance: Int!
  currency: String!
  isAcceptingOrders: Boolean!
  # isCurrentlyOpen: Boolean!
  openingHours: String!
    @deprecated(
      reason: "The new and better openingHoursNext7 field should be used instead of this static string"
    )
  openingHoursNext7: [OpeningHoursByDate!]!
}
type GeoUnitList @aws_cognito_user_pools {
  items: [GeoUnit]
}

### OPERATIONS
type Query {
  # Stripe
  listStripeCards: [StripeCard] @aws_cognito_user_pools
  # Units
  getUnitsNearLocation(input: GetUnitsNearLocationInput!): GeoUnitList
    @aws_cognito_user_pools
}

### MUTATION
type Mutation {
  # AdminUser
  createAdminUser(input: CreateAdminUserInput!): ID! @aws_cognito_user_pools
  deleteAdminUser(userName: String!): Boolean! @aws_cognito_user_pools
  # User
  createAnonymUser: CreateAnonymUserOutput! # public endpoint
  # Order
  createOrderFromCart(input: CreateOrderFromCartInput!): ID!
    @aws_cognito_user_pools

  # Product
  createUnitProduct(input: CreateUnitProductInput!): UnitProduct!
    @aws_cognito_user_pools
  # Unit
  regenerateUnitData(input: RegenerateUnitDataInput!): Boolean!
    @aws_cognito_user_pools

  # Stripe
  startStripePayment(
    input: StartStripePaymentInput!
  ): StartStripePaymentOutput! @aws_cognito_user_pools
  createStripeCard(input: StripeCardCreateInput!): StripeCard!
    @aws_cognito_user_pools
  updateMyStripeCard(input: StripeCardUpdateInput!): StripeCard!
    @aws_cognito_user_pools
  deleteMyStripeCard(input: StripeCardDeleteInput!): Boolean!
    @aws_cognito_user_pools
}
