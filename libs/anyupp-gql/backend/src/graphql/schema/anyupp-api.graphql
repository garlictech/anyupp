type AdminUser @aws_cognito_user_pools @aws_iam {
  id: ID!
  name: String!
  email: String!
  phone: String!
  profileImage: String
  settings: AdminUserSettings
  roleContexts: [AdminRoleContext]
}

type AdminUserSettings {
  selectedChainId: String
  selectedGroupId: String
  selectedUnitId: String
  selectedProductCategoryId: String
  selectedLanguage: String
  selectedHistoryDate: Int
}

input UpdateAdminUserInput {
  id: ID!
  name: String
  email: String
  phone: String
  profileImage: String
  settings: AdminUserSettingsInput
}

input AdminUserSettingsInput {
  selectedChainId: String
  selectedGroupId: String
  selectedUnitId: String
  selectedProductCategoryId: String
  selectedLanguage: String
  selectedHistoryDate: Int
}

type AdminRoleContext @aws_cognito_user_pools @aws_iam {
  id: ID!
  roleContextId: ID!
  adminUserId: ID!
  roleContext: RoleContext! @connection(fields: ["roleContextId"])
}

enum Role {
  superuser
  chainadmin
  groupadmin
  unitadmin
  staff
  inactive
}

type RoleContext @aws_cognito_user_pools @aws_iam {
  id: ID!
  contextId: ID! # Readable short id
  role: Role!
  name: LocalizedItem
  chainId: String
  groupId: String
  unitId: String
}

### Location
type Location @aws_cognito_user_pools {
  lat: Float!
  lng: Float!
}
input LocationInput {
  lat: Float!
  lng: Float!
}

### LocalizedItem
type LocalizedItem @aws_cognito_user_pools {
  en: String
  de: String
  hu: String
}
input LocalizedItemInput {
  en: String
  de: String
  hu: String
}

type Address @aws_cognito_user_pools {
  address: String!
  city: String!
  country: String!
  title: String!
  postalCode: String!
  location: Location!
}

### Payment
type PaymentMode @aws_cognito_user_pools {
  type: PaymentType!
  caption: String
  method: PaymentMethod!
}

enum PaymentMethod {
  cash
  card
  inapp
}

enum PaymentType {
  card
  cash
  simple
  stripe
  applepay
  googlepay
}

### ChainStyle
type ChainStyle @aws_cognito_user_pools {
  colors: ChainStyleColors!
  images: ChainStyleImages
}

type ChainStyleColors @aws_cognito_user_pools {
  backgroundLight: String!
  backgroundDark: String!
  borderLight: String!
  borderDark: String!
  disabled: String!
  highlight: String!
  indicator: String!
  textLight: String!
  textDark: String!
}

type ChainStyleImages @aws_cognito_user_pools {
  header: String
  logo: String
}

### ChainProduct
type ChainProduct @aws_cognito_user_pools {
  id: ID!
  chainId: ID!
  name: LocalizedItem!
  description: LocalizedItem
  productCategoryId: ID!
  productType: String!
  isVisible: Boolean!
  image: String
  variants: [ProductVariant]
  allergens: [Allergen]
  configSets: [ProductConfigSet]
}

input UpdateChainProductInput {
  id: ID!
  chainId: ID
  name: LocalizedItemInput
  description: LocalizedItemInput
  productCategoryId: ID
  productType: String
  isVisible: Boolean
  image: String
  variants: [ProductVariantInput]
  allergens: [Allergen]
  configSets: [ProductConfigSetInput]
}

enum Allergen {
  celery
  crustaceans
  egg
  fish
  gluten
  lupin
  milk
  molluscs
  mustard
  peanut
  sesame
  soya
  sulphites
  treenuts
}

enum ServingMode {
  inPlace
  takeAway
}

enum OrderMode {
  instant
  pickup
}

### GroupProduct
type GroupProduct @aws_cognito_user_pools {
  id: ID!
  parentId: ID! # parent chainProduct ID
  chainId: ID!
  groupId: ID!
  isVisible: Boolean!
  tax: Int!
  takeawayTax: Int
  variants: [ProductVariant]
  configSets: [ProductConfigSet]
}

input UpdateGroupProductInput {
  id: ID!
  parentId: ID
  chainId: ID
  groupId: ID
  isVisible: Boolean
  tax: Int
  takeawayTax: Int
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
}

### UnitProduct
type UnitProduct @aws_cognito_user_pools {
  id: ID!
  parentId: ID! # parent groupProduct ID
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean! @deprecated(reason: "Use `supportedServingModes`.")
  laneId: ID
  position: Int!
  variants: [ProductVariant]
  configSets: [ProductConfigSet]
  supportedServingModes: [ServingMode!]
}

input CreateUnitProductInput {
  id: ID # <== NOT REQUIRED
  parentId: ID! # parent groupProduct ID
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean!
  laneId: ID
  position: Int!
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  supportedServingModes: [ServingMode!]
}

input UpdateUnitProductInput {
  id: ID! # <== REQUIRED
  parentId: ID
  chainId: ID
  groupId: ID
  unitId: ID
  isVisible: Boolean
  takeaway: Boolean
  laneId: ID
  position: Int
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  supportedServingModes: [ServingMode!]
}

### ProductConfigSet
type ProductConfigComponent @aws_cognito_user_pools {
  productComponentId: ID!
  refGroupPrice: Float!
  price: Float!
  position: Int!
}
input ProductConfigComponentInput {
  productComponentId: ID!
  refGroupPrice: Float!
  price: Float!
  position: Int!
}

type ProductConfigSet @aws_cognito_user_pools {
  productSetId: ID!
  items: [ProductConfigComponent!]!
  position: Int!
}
input ProductConfigSetInput {
  productSetId: ID!
  items: [ProductConfigComponentInput!]!
  position: Int!
}

### ProductVariant
type ProductVariant @aws_cognito_user_pools {
  id: ID!
  variantName: LocalizedItem!
  pack: ProductVariantPack
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [Availability]
  position: Int!
}
input ProductVariantInput {
  id: ID!
  variantName: LocalizedItemInput!
  pack: ProductVariantPackInput
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [AvailabilityInput]
  position: Int!
}

### ProductVariantPack
type ProductVariantPack @aws_cognito_user_pools {
  size: Float!
  unit: String!
}
input ProductVariantPackInput {
  size: Float!
  unit: String!
}

### Availability
type Availability @aws_cognito_user_pools {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}
input AvailabilityInput {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}

### UserInvoiceAddress
# Re enable (issue: #1736)
# type UserInvoiceAddress {
#   customerName: String!
#   taxNumber: String!
#   country: String!
#   city: String!
#   streetAddress: String!
#   postalCode: String!
#   email: String
# }
# input UserInvoiceAddressInput {
#   customerName: String!
#   taxNumber: String!
#   country: String!
#   city: String!
#   streetAddress: String!
#   postalCode: String!
#   email: String
# }
### ORDER
input CreateOrderFromCartInput {
  id: ID!
}

## UNIT
input RegenerateUnitDataInput {
  id: ID!
}

type CreateAnonymUserOutput {
  username: String!
  pwd: String!
}

### STRIPE
# STRIPE schema example https://github.com/jferrettiboke/stripe-graphql/blob/master/generated/schema.graphql

# https://stripe.com/docs/api/cards/object?lang=node
enum CardBrand {
  amex
  diners
  discover
  jcb
  mastercard
  unionpay
  visa
  unknown
}

# https://stripe.com/docs/api/cards/object?lang=node#card_object-funding
enum CardFundingType {
  credit
  debit
  prepaid
  unknown
}

# https://stripe.com/docs/api/metadata?lang=node
# Updateable Stripe objects

type BillingDetails {
  email: String
  name: String
  phone: String
  address: BillingAddress
}

type BillingAddress {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type CardChecks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

type StripeCard @aws_cognito_user_pools {
  id: String!
  name: String
  brand: CardBrand
  checks: CardChecks
  country: String
  last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: CardFundingType
  three_d_secure: String
  billing_details: BillingDetails
}

# Rename to UserInvoiceAddressInput and relocate it in the shared.graphql (issue: #1736)
input UserInvoiceAddress {
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
}

input StartStripePaymentInput {
  orderId: ID!
  paymentMethod: PaymentMethod!
  savePaymentMethod: Boolean!
  paymentMethodId: String
  invoiceAddress: UserInvoiceAddress
}

type StartStripePaymentOutput @aws_cognito_user_pools {
  clientSecret: String!
  status: String!
}

input StripeCardCreateInput {
  card_number: String!
  exp_month: Int!
  exp_year: Int!
  cvc: String!
  default_for_currency: Boolean
  name: String!
}

input StripeCardUpdateInput {
  paymentMethodId: String!
  default_for_currency: Boolean
  name: String
}

input StripeCardDeleteInput {
  paymentMethodId: String!
}

### UNIT GEO_UNIT
input GetUnitsNearLocationInput {
  location: LocationInput!
}

type OpeningHoursByDate @aws_cognito_user_pools {
  date: String!
  closed: Boolean!
  from: Float
  to: Float
}

type GeoUnit @aws_cognito_user_pools {
  id: ID!
  groupId: ID!
  chainId: ID!
  name: String!
  address: Address!
  style: ChainStyle!
  paymentModes: [PaymentMode]
  distance: Int!
  currency: String!
  isAcceptingOrders: Boolean!
  # isCurrentlyOpen: Boolean!
  openingHours: String!
    @deprecated(
      reason: "The new and better openingHoursNext7 field should be used instead of this static string"
    )
  openingHoursNext7: [OpeningHoursByDate!]!
  supportedServingModes: [ServingMode!]!
  supportedOrderModes: [OrderMode!]!
}
type GeoUnitList @aws_cognito_user_pools {
  items: [GeoUnit]
}

### OPERATIONS
type Query {
  # Stripe
  listStripeCards: [StripeCard] @aws_cognito_user_pools
  # Units
  getUnitsNearLocation(input: GetUnitsNearLocationInput!): GeoUnitList
    @aws_cognito_user_pools
}

### MUTATION
type Mutation {
  # User
  createAnonymUser: CreateAnonymUserOutput! # public endpoint
  # Order
  createOrderFromCart(input: CreateOrderFromCartInput!): ID!
    @aws_cognito_user_pools

  # Product
  updateChainProduct(input: UpdateChainProductInput!): ChainProduct!
    @aws_cognito_user_pools
  updateGroupProduct(input: UpdateGroupProductInput!): GroupProduct!
    @aws_cognito_user_pools
  createUnitProduct(input: CreateUnitProductInput!): UnitProduct!
    @aws_cognito_user_pools
  updateUnitProduct(input: UpdateUnitProductInput!): UnitProduct!
    @aws_cognito_user_pools
  deleteUnitProduct(id: ID!): Boolean! @aws_cognito_user_pools

  # Unit
  regenerateUnitData(input: RegenerateUnitDataInput!): Boolean!
    @aws_cognito_user_pools

  # Stripe
  startStripePayment(
    input: StartStripePaymentInput!
  ): StartStripePaymentOutput! @aws_cognito_user_pools
  createStripeCard(input: StripeCardCreateInput!): StripeCard!
    @aws_cognito_user_pools
  updateMyStripeCard(input: StripeCardUpdateInput!): StripeCard!
    @aws_cognito_user_pools
  deleteMyStripeCard(input: StripeCardDeleteInput!): Boolean!
    @aws_cognito_user_pools
}
