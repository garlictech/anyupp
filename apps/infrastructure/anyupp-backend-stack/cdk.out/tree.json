{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree"
      },
      "dev-anyupp-backend-sites": {
        "id": "dev-anyupp-backend-sites",
        "path": "dev-anyupp-backend-sites",
        "children": {
          "Admin": {
            "id": "Admin",
            "path": "dev-anyupp-backend-sites/Admin",
            "children": {
              "Zone": {
                "id": "Zone",
                "path": "dev-anyupp-backend-sites/Admin/Zone"
              },
              "Site": {
                "id": "Site",
                "path": "dev-anyupp-backend-sites/Admin/Site"
              },
              "SiteBucket": {
                "id": "SiteBucket",
                "path": "dev-anyupp-backend-sites/Admin/SiteBucket",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-sites/Admin/SiteBucket/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                      "aws:cdk:cloudformation:props": {
                        "bucketName": "dev.admin.anyupp.com",
                        "websiteConfiguration": {
                          "indexDocument": "index.html",
                          "errorDocument": "error.html"
                        }
                      }
                    }
                  },
                  "Notifications": {
                    "id": "Notifications",
                    "path": "dev-anyupp-backend-sites/Admin/SiteBucket/Notifications"
                  },
                  "Policy": {
                    "id": "Policy",
                    "path": "dev-anyupp-backend-sites/Admin/SiteBucket/Policy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-sites/Admin/SiteBucket/Policy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::S3::BucketPolicy",
                          "aws:cdk:cloudformation:props": {
                            "bucket": {
                              "Ref": "AdminSiteBucket4CF3A801"
                            },
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "s3:GetObject",
                                  "Effect": "Allow",
                                  "Principal": "*",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        {
                                          "Fn::GetAtt": [
                                            "AdminSiteBucket4CF3A801",
                                            "Arn"
                                          ]
                                        },
                                        "/*"
                                      ]
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      }
                    }
                  },
                  "AutoBucketHandler": {
                    "id": "AutoBucketHandler",
                    "path": "dev-anyupp-backend-sites/Admin/SiteBucket/AutoBucketHandler"
                  }
                }
              },
              "Bucket": {
                "id": "Bucket",
                "path": "dev-anyupp-backend-sites/Admin/Bucket"
              },
              "SiteCertificate": {
                "id": "SiteCertificate",
                "path": "dev-anyupp-backend-sites/Admin/SiteCertificate",
                "children": {
                  "CertificateRequestorFunction": {
                    "id": "CertificateRequestorFunction",
                    "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "lambda.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "managedPolicyArns": [
                                  {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                      ]
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "acm:RequestCertificate",
                                            "acm:DescribeCertificate",
                                            "acm:DeleteCertificate"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": "*"
                                        },
                                        {
                                          "Action": "route53:GetChange",
                                          "Effect": "Allow",
                                          "Resource": "*"
                                        },
                                        {
                                          "Action": "route53:changeResourceRecordSets",
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::Join": [
                                              "",
                                              [
                                                "arn:",
                                                {
                                                  "Ref": "AWS::Partition"
                                                },
                                                ":route53:::hostedzone/Z07724744XHDX57X0R8H"
                                              ]
                                            ]
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "AdminSiteCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy74594DF1",
                                    "roles": [
                                      {
                                        "Ref": "AdminSiteCertificateCertificateRequestorFunctionServiceRoleAD7C4882"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Code": {
                        "id": "Code",
                        "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/Code",
                        "children": {
                          "Stage": {
                            "id": "Stage",
                            "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/Code/Stage"
                          },
                          "AssetBucket": {
                            "id": "AssetBucket",
                            "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/Code/AssetBucket"
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                          "aws:cdk:cloudformation:props": {
                            "code": {
                              "s3Bucket": {
                                "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3BucketFCCD3A76"
                              },
                              "s3Key": {
                                "Fn::Join": [
                                  "",
                                  [
                                    {
                                      "Fn::Select": [
                                        0,
                                        {
                                          "Fn::Split": [
                                            "||",
                                            {
                                              "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "Fn::Select": [
                                        1,
                                        {
                                          "Fn::Split": [
                                            "||",
                                            {
                                              "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                ]
                              }
                            },
                            "role": {
                              "Fn::GetAtt": [
                                "AdminSiteCertificateCertificateRequestorFunctionServiceRoleAD7C4882",
                                "Arn"
                              ]
                            },
                            "handler": "index.certificateRequestHandler",
                            "runtime": "nodejs10.x",
                            "timeout": 900
                          }
                        }
                      }
                    }
                  },
                  "CertificateRequestorResource": {
                    "id": "CertificateRequestorResource",
                    "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorResource",
                    "children": {
                      "Default": {
                        "id": "Default",
                        "path": "dev-anyupp-backend-sites/Admin/SiteCertificate/CertificateRequestorResource/Default"
                      }
                    }
                  }
                }
              },
              "Certificate": {
                "id": "Certificate",
                "path": "dev-anyupp-backend-sites/Admin/Certificate"
              },
              "SiteDistribution": {
                "id": "SiteDistribution",
                "path": "dev-anyupp-backend-sites/Admin/SiteDistribution",
                "children": {
                  "AliasConfigurationCert": {
                    "id": "AliasConfigurationCert",
                    "path": "dev-anyupp-backend-sites/Admin/SiteDistribution/AliasConfigurationCert"
                  },
                  "CFDistribution": {
                    "id": "CFDistribution",
                    "path": "dev-anyupp-backend-sites/Admin/SiteDistribution/CFDistribution",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::CloudFront::Distribution",
                      "aws:cdk:cloudformation:props": {
                        "distributionConfig": {
                          "enabled": true,
                          "defaultRootObject": "index.html",
                          "httpVersion": "http2",
                          "priceClass": "PriceClass_100",
                          "ipv6Enabled": true,
                          "origins": [
                            {
                              "id": "origin1",
                              "domainName": {
                                "Fn::Select": [
                                  2,
                                  {
                                    "Fn::Split": [
                                      "/",
                                      {
                                        "Fn::GetAtt": [
                                          "AdminSiteBucket4CF3A801",
                                          "WebsiteURL"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              "customOriginConfig": {
                                "httpPort": 80,
                                "httpsPort": 443,
                                "originKeepaliveTimeout": 5,
                                "originReadTimeout": 30,
                                "originProtocolPolicy": "http-only",
                                "originSslProtocols": [
                                  "TLSv1.2"
                                ]
                              },
                              "connectionAttempts": 3,
                              "connectionTimeout": 10
                            }
                          ],
                          "defaultCacheBehavior": {
                            "allowedMethods": [
                              "GET",
                              "HEAD"
                            ],
                            "cachedMethods": [
                              "GET",
                              "HEAD"
                            ],
                            "compress": true,
                            "forwardedValues": {
                              "queryString": false,
                              "cookies": {
                                "forward": "none"
                              }
                            },
                            "targetOriginId": "origin1",
                            "viewerProtocolPolicy": "redirect-to-https"
                          },
                          "aliases": [
                            "dev.admin.anyupp.com"
                          ],
                          "viewerCertificate": {
                            "acmCertificateArn": {
                              "Fn::GetAtt": [
                                "AdminSiteCertificateCertificateRequestorResource06F7FD9E",
                                "Arn"
                              ]
                            },
                            "sslSupportMethod": "sni-only",
                            "minimumProtocolVersion": "TLSv1.1_2016"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "DistributionId": {
                "id": "DistributionId",
                "path": "dev-anyupp-backend-sites/Admin/DistributionId"
              },
              "SiteAliasRecord": {
                "id": "SiteAliasRecord",
                "path": "dev-anyupp-backend-sites/Admin/SiteAliasRecord",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-sites/Admin/SiteAliasRecord/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::Route53::RecordSet",
                      "aws:cdk:cloudformation:props": {
                        "name": "dev.admin.anyupp.com.",
                        "type": "A",
                        "aliasTarget": {
                          "hostedZoneId": {
                            "Fn::FindInMap": [
                              "AWSCloudFrontPartitionHostedZoneIdMap",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "zoneId"
                            ]
                          },
                          "dnsName": {
                            "Fn::GetAtt": [
                              "AdminSiteDistributionCFDistributionB99D8906",
                              "DomainName"
                            ]
                          }
                        },
                        "hostedZoneId": "Z07724744XHDX57X0R8H"
                      }
                    }
                  }
                }
              },
              "DeployWithInvalidation": {
                "id": "DeployWithInvalidation",
                "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation",
                "children": {
                  "AwsCliLayer": {
                    "id": "AwsCliLayer",
                    "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/AwsCliLayer",
                    "children": {
                      "Code": {
                        "id": "Code",
                        "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/AwsCliLayer/Code",
                        "children": {
                          "Stage": {
                            "id": "Stage",
                            "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/AwsCliLayer/Code/Stage"
                          },
                          "AssetBucket": {
                            "id": "AssetBucket",
                            "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/AwsCliLayer/Code/AssetBucket"
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/AwsCliLayer/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::LayerVersion",
                          "aws:cdk:cloudformation:props": {
                            "content": {
                              "s3Bucket": {
                                "Ref": "AssetParameterse9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68S3BucketAEADE8C7"
                              },
                              "s3Key": {
                                "Fn::Join": [
                                  "",
                                  [
                                    {
                                      "Fn::Select": [
                                        0,
                                        {
                                          "Fn::Split": [
                                            "||",
                                            {
                                              "Ref": "AssetParameterse9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68S3VersionKeyE415415F"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "Fn::Select": [
                                        1,
                                        {
                                          "Fn::Split": [
                                            "||",
                                            {
                                              "Ref": "AssetParameterse9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68S3VersionKeyE415415F"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                ]
                              }
                            },
                            "description": "/opt/awscli/aws"
                          }
                        }
                      }
                    }
                  },
                  "CustomResourceHandler": {
                    "id": "CustomResourceHandler",
                    "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/CustomResourceHandler"
                  },
                  "Asset1": {
                    "id": "Asset1",
                    "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/Asset1",
                    "children": {
                      "Stage": {
                        "id": "Stage",
                        "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/Asset1/Stage"
                      },
                      "AssetBucket": {
                        "id": "AssetBucket",
                        "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/Asset1/AssetBucket"
                      }
                    }
                  },
                  "CustomResource": {
                    "id": "CustomResource",
                    "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/CustomResource",
                    "children": {
                      "Default": {
                        "id": "Default",
                        "path": "dev-anyupp-backend-sites/Admin/DeployWithInvalidation/CustomResource/Default"
                      }
                    }
                  }
                }
              }
            }
          },
          "AutoBucket7677dc81117d41c0b75bdb11cb84bb70": {
            "id": "AutoBucket7677dc81117d41c0b75bdb11cb84bb70",
            "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/ServiceRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/ServiceRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "AdminSiteBucket4CF3A801",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          {
                                            "Fn::GetAtt": [
                                              "AdminSiteBucket4CF3A801",
                                              "Arn"
                                            ]
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "AutoBucket7677dc81117d41c0b75bdb11cb84bb70ServiceRoleDefaultPolicy57248D6C",
                            "roles": [
                              {
                                "Ref": "AutoBucket7677dc81117d41c0b75bdb11cb84bb70ServiceRole2F2A10DB"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Code": {
                "id": "Code",
                "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/Code/Stage"
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/Code/AssetBucket"
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-sites/AutoBucket7677dc81117d41c0b75bdb11cb84bb70/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Ref": "AssetParameters429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576S3Bucket78318067"
                      },
                      "s3Key": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Select": [
                                0,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576S3VersionKey9228CC39"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Fn::Select": [
                                1,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576S3VersionKey9228CC39"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    },
                    "role": {
                      "Fn::GetAtt": [
                        "AutoBucket7677dc81117d41c0b75bdb11cb84bb70ServiceRole2F2A10DB",
                        "Arn"
                      ]
                    },
                    "handler": "lib/lambda/auto-delete-bucket/index.handler",
                    "runtime": "nodejs12.x",
                    "timeout": 900
                  }
                }
              }
            }
          },
          "AssetParameters": {
            "id": "AssetParameters",
            "path": "dev-anyupp-backend-sites/AssetParameters",
            "children": {
              "429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576": {
                "id": "429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576",
                "path": "dev-anyupp-backend-sites/AssetParameters/429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-sites/AssetParameters/429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-sites/AssetParameters/429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-sites/AssetParameters/429fdd03ebf7c403e17ef34e21437d0dece6d2880eb1b27f5255b2bdbab0a576/ArtifactHash"
                  }
                }
              },
              "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2": {
                "id": "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2",
                "path": "dev-anyupp-backend-sites/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-sites/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-sites/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-sites/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/ArtifactHash"
                  }
                }
              },
              "e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68": {
                "id": "e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68",
                "path": "dev-anyupp-backend-sites/AssetParameters/e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-sites/AssetParameters/e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-sites/AssetParameters/e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-sites/AssetParameters/e9882ab123687399f934da0d45effe675ecc8ce13b40cb946f3e1d6141fe8d68/ArtifactHash"
                  }
                }
              },
              "c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf": {
                "id": "c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf",
                "path": "dev-anyupp-backend-sites/AssetParameters/c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-sites/AssetParameters/c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-sites/AssetParameters/c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-sites/AssetParameters/c24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cf/ArtifactHash"
                  }
                }
              },
              "3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375": {
                "id": "3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375",
                "path": "dev-anyupp-backend-sites/AssetParameters/3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-sites/AssetParameters/3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-sites/AssetParameters/3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-sites/AssetParameters/3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375/ArtifactHash"
                  }
                }
              }
            }
          },
          "AWSCloudFrontPartitionHostedZoneIdMap": {
            "id": "AWSCloudFrontPartitionHostedZoneIdMap",
            "path": "dev-anyupp-backend-sites/AWSCloudFrontPartitionHostedZoneIdMap"
          },
          "Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C": {
            "id": "Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C",
            "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Ref": "AssetParameters3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375S3BucketCFA185AD"
                                          }
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Ref": "AssetParameters3efbd7b4da255b3705407093c3f064a95187f453a086ef1fe8740acf7413e375S3BucketCFA185AD"
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "AdminSiteBucket4CF3A801",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          {
                                            "Fn::GetAtt": [
                                              "AdminSiteBucket4CF3A801",
                                              "Arn"
                                            ]
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "cloudfront:GetInvalidation",
                                    "cloudfront:CreateInvalidation"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
                            "roles": [
                              {
                                "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Code": {
                "id": "Code",
                "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code/Stage"
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Code/AssetBucket"
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-sites/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Ref": "AssetParametersc24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cfS3Bucket55EFA30C"
                      },
                      "s3Key": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Select": [
                                0,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParametersc24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cfS3VersionKey60329B70"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Fn::Select": [
                                1,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParametersc24b999656e4fe6c609c31bae56a1cf4717a405619c3aa6ba1bc686b8c2c86cfS3VersionKey60329B70"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    },
                    "role": {
                      "Fn::GetAtt": [
                        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
                        "Arn"
                      ]
                    },
                    "handler": "index.handler",
                    "layers": [
                      {
                        "Ref": "AdminDeployWithInvalidationAwsCliLayer600C7610"
                      }
                    ],
                    "runtime": "python3.6",
                    "timeout": 900
                  }
                }
              }
            }
          },
          "AdminSiteUrl": {
            "id": "AdminSiteUrl",
            "path": "dev-anyupp-backend-sites/AdminSiteUrl",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-sites/AdminSiteUrl/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": "https://dev.admin.anyupp.com",
                    "allowedPattern": ".*",
                    "description": "The URL of the admin site",
                    "name": "dev-anyupp-backend-AdminSiteUrl"
                  }
                }
              }
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "dev-anyupp-backend-sites/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "dev-anyupp-backend-sites/CDKMetadata/Default"
              }
            }
          }
        }
      },
      "dev-anyupp-backend-SecretsManagerStack": {
        "id": "dev-anyupp-backend-SecretsManagerStack",
        "path": "dev-anyupp-backend-SecretsManagerStack",
        "children": {
          "AnyuppSecrets": {
            "id": "AnyuppSecrets",
            "path": "dev-anyupp-backend-SecretsManagerStack/AnyuppSecrets"
          },
          "SecretManager": {
            "id": "SecretManager",
            "path": "dev-anyupp-backend-SecretsManagerStack/SecretManager"
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "dev-anyupp-backend-SecretsManagerStack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "dev-anyupp-backend-SecretsManagerStack/CDKMetadata/Default"
              }
            }
          }
        }
      },
      "dev-anyupp-backend-ParamsStack": {
        "id": "dev-anyupp-backend-ParamsStack",
        "path": "dev-anyupp-backend-ParamsStack",
        "children": {
          "googleClientIdParam.Parameter": {
            "id": "googleClientIdParam.Parameter",
            "path": "dev-anyupp-backend-ParamsStack/googleClientIdParam.Parameter"
          },
          "googleClientIdParam": {
            "id": "googleClientIdParam",
            "path": "dev-anyupp-backend-ParamsStack/googleClientIdParam"
          },
          "googleClientId": {
            "id": "googleClientId",
            "path": "dev-anyupp-backend-ParamsStack/googleClientId"
          },
          "stripePublishableKeyParam.Parameter": {
            "id": "stripePublishableKeyParam.Parameter",
            "path": "dev-anyupp-backend-ParamsStack/stripePublishableKeyParam.Parameter"
          },
          "stripePublishableKeyParam": {
            "id": "stripePublishableKeyParam",
            "path": "dev-anyupp-backend-ParamsStack/stripePublishableKeyParam"
          },
          "stripePublishableKey": {
            "id": "stripePublishableKey",
            "path": "dev-anyupp-backend-ParamsStack/stripePublishableKey"
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "dev-anyupp-backend-ParamsStack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "dev-anyupp-backend-ParamsStack/CDKMetadata/Default"
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "dev-anyupp-backend-ParamsStack/Exports",
            "children": {
              "Output{\"Ref\":\"googleClientIdParamParameter\"}": {
                "id": "Output{\"Ref\":\"googleClientIdParamParameter\"}",
                "path": "dev-anyupp-backend-ParamsStack/Exports/Output{\"Ref\":\"googleClientIdParamParameter\"}"
              }
            }
          }
        }
      },
      "dev-anyupp-backend-cognito": {
        "id": "dev-anyupp-backend-cognito",
        "path": "dev-anyupp-backend-cognito",
        "children": {
          "UserPool": {
            "id": "UserPool",
            "path": "dev-anyupp-backend-cognito/UserPool",
            "children": {
              "smsRole": {
                "id": "smsRole",
                "path": "dev-anyupp-backend-cognito/UserPool/smsRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-cognito/UserPool/smsRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Condition": {
                                "StringEquals": {
                                  "sts:ExternalId": "devanyuppbackendcognitoUserPool3D2160C7"
                                }
                              },
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "cognito-idp.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policies": [
                          {
                            "policyName": "sns-publish",
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "sns:Publish",
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/UserPool/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Cognito::UserPool",
                  "aws:cdk:cloudformation:props": {
                    "accountRecoverySetting": {
                      "recoveryMechanisms": [
                        {
                          "name": "verified_phone_number",
                          "priority": 1
                        },
                        {
                          "name": "verified_email",
                          "priority": 2
                        }
                      ]
                    },
                    "adminCreateUserConfig": {
                      "allowAdminCreateUserOnly": false
                    },
                    "autoVerifiedAttributes": [
                      "email"
                    ],
                    "emailVerificationMessage": "Hello {username}, Thanks for signing up to AnyUpp! Your verification code is {####}",
                    "emailVerificationSubject": "Verify your email for AnyUpp",
                    "enabledMfas": [
                      "SMS_MFA",
                      "SOFTWARE_TOKEN_MFA"
                    ],
                    "mfaConfiguration": "OPTIONAL",
                    "policies": {
                      "passwordPolicy": {
                        "temporaryPasswordValidityDays": 3,
                        "minimumLength": 12,
                        "requireLowercase": true,
                        "requireUppercase": true,
                        "requireNumbers": true,
                        "requireSymbols": false
                      }
                    },
                    "smsConfiguration": {
                      "externalId": "devanyuppbackendcognitoUserPool3D2160C7",
                      "snsCallerArn": {
                        "Fn::GetAtt": [
                          "UserPoolsmsRole4EA729DD",
                          "Arn"
                        ]
                      }
                    },
                    "smsVerificationMessage": "Hello {username}, Thanks for signing up to AnyUpp! Your verification code is {####}",
                    "usernameAttributes": [
                      "email"
                    ],
                    "userPoolName": "dev-anyupp-backend-user-pool",
                    "verificationMessageTemplate": {
                      "defaultEmailOption": "CONFIRM_WITH_CODE",
                      "emailMessage": "Hello {username}, Thanks for signing up to AnyUpp! Your verification code is {####}",
                      "emailSubject": "Verify your email for AnyUpp",
                      "smsMessage": "Hello {username}, Thanks for signing up to AnyUpp! Your verification code is {####}"
                    }
                  }
                }
              }
            }
          },
          "CognitoDomain": {
            "id": "CognitoDomain",
            "path": "dev-anyupp-backend-cognito/CognitoDomain",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/CognitoDomain/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Cognito::UserPoolDomain",
                  "aws:cdk:cloudformation:props": {
                    "domain": "dev-anyupp-backend",
                    "userPoolId": {
                      "Ref": "UserPool6BA7E5F2"
                    }
                  }
                }
              }
            }
          },
          "Google": {
            "id": "Google",
            "path": "dev-anyupp-backend-cognito/Google",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/Google/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Cognito::UserPoolIdentityProvider",
                  "aws:cdk:cloudformation:props": {
                    "providerName": "Google",
                    "providerType": "Google",
                    "userPoolId": {
                      "Ref": "UserPool6BA7E5F2"
                    },
                    "attributeMapping": {
                      "email": "email"
                    },
                    "providerDetails": {
                      "client_id": {
                        "Fn::ImportValue": "dev-anyupp-backend-ParamsStack:ExportsOutputRefgoogleClientIdParamParameterBBB8E986"
                      },
                      "client_secret": "{{resolve:secretsmanager:arn:aws:secretsmanager:eu-west-1:568276182587:secret:anyupp-dev-secrets-WtbZ0k:SecretString:googleClientSecret::}}",
                      "authorize_scopes": "profile email openid"
                    }
                  }
                }
              }
            }
          },
          "UserPoolClient": {
            "id": "UserPoolClient",
            "path": "dev-anyupp-backend-cognito/UserPoolClient",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/UserPoolClient/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Cognito::UserPoolClient",
                  "aws:cdk:cloudformation:props": {
                    "userPoolId": {
                      "Ref": "UserPool6BA7E5F2"
                    },
                    "allowedOAuthFlows": [
                      "code"
                    ],
                    "allowedOAuthFlowsUserPoolClient": true,
                    "allowedOAuthScopes": [
                      "openid"
                    ],
                    "callbackUrLs": [
                      "https://dev.admin.anyupp.com"
                    ],
                    "explicitAuthFlows": [
                      "ALLOW_USER_PASSWORD_AUTH",
                      "ALLOW_USER_SRP_AUTH",
                      "ALLOW_REFRESH_TOKEN_AUTH"
                    ],
                    "generateSecret": false,
                    "logoutUrLs": [
                      "https://dev.admin.anyupp.com"
                    ],
                    "preventUserExistenceErrors": "ENABLED",
                    "supportedIdentityProviders": [
                      "Google",
                      "COGNITO"
                    ]
                  }
                }
              }
            }
          },
          "IdentityPool": {
            "id": "IdentityPool",
            "path": "dev-anyupp-backend-cognito/IdentityPool",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::Cognito::IdentityPool",
              "aws:cdk:cloudformation:props": {
                "allowUnauthenticatedIdentities": false,
                "cognitoIdentityProviders": [
                  {
                    "clientId": {
                      "Ref": "UserPoolClient2F5918F7"
                    },
                    "providerName": {
                      "Fn::GetAtt": [
                        "UserPool6BA7E5F2",
                        "ProviderName"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "UserPoolId": {
            "id": "UserPoolId",
            "path": "dev-anyupp-backend-cognito/UserPoolId"
          },
          "UserPoolIdParam": {
            "id": "UserPoolIdParam",
            "path": "dev-anyupp-backend-cognito/UserPoolIdParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/UserPoolIdParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "UserPool6BA7E5F2"
                    },
                    "allowedPattern": ".*",
                    "description": "The user pool ID",
                    "name": "dev-anyupp-backend-UserPoolId"
                  }
                }
              }
            }
          },
          "UserPoolClientId": {
            "id": "UserPoolClientId",
            "path": "dev-anyupp-backend-cognito/UserPoolClientId"
          },
          "UserPoolClientIdParam": {
            "id": "UserPoolClientIdParam",
            "path": "dev-anyupp-backend-cognito/UserPoolClientIdParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/UserPoolClientIdParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "UserPoolClient2F5918F7"
                    },
                    "allowedPattern": ".*",
                    "description": "The user pool client ID",
                    "name": "dev-anyupp-backend-UserPoolClientId"
                  }
                }
              }
            }
          },
          "IdentityPoolId": {
            "id": "IdentityPoolId",
            "path": "dev-anyupp-backend-cognito/IdentityPoolId"
          },
          "IdentityPoolIdParam": {
            "id": "IdentityPoolIdParam",
            "path": "dev-anyupp-backend-cognito/IdentityPoolIdParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/IdentityPoolIdParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "IdentityPool"
                    },
                    "allowedPattern": ".*",
                    "description": "The identity pool ID",
                    "name": "dev-anyupp-backend-IdentityPoolId"
                  }
                }
              }
            }
          },
          "UserPoolDomain": {
            "id": "UserPoolDomain",
            "path": "dev-anyupp-backend-cognito/UserPoolDomain"
          },
          "UserPoolDomainParam": {
            "id": "UserPoolDomainParam",
            "path": "dev-anyupp-backend-cognito/UserPoolDomainParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-cognito/UserPoolDomainParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "CognitoDomainACF3E069"
                          },
                          ".auth.eu-west-1.amazoncognito.com"
                        ]
                      ]
                    },
                    "allowedPattern": ".*",
                    "description": "The user pool domain",
                    "name": "dev-anyupp-backend-UserPoolDomain"
                  }
                }
              }
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "dev-anyupp-backend-cognito/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "dev-anyupp-backend-cognito/CDKMetadata/Default"
              }
            }
          }
        }
      },
      "dev-anyupp-backend-appsync": {
        "id": "dev-anyupp-backend-appsync",
        "path": "dev-anyupp-backend-appsync",
        "children": {
          "Api": {
            "id": "Api",
            "path": "dev-anyupp-backend-appsync/Api",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/Api/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLApi",
                  "aws:cdk:cloudformation:props": {
                    "authenticationType": "API_KEY",
                    "name": "dev-anyupp-backend-anyupp-appsync-api",
                    "xrayEnabled": true
                  }
                }
              },
              "Schema": {
                "id": "Schema",
                "path": "dev-anyupp-backend-appsync/Api/Schema",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLSchema",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "definition": "type Address @aws_iam @aws_api_key @aws_cognito_user_pools {\n  address: String\n  city: String\n  country: String\n  title: String\n  postalCode: String\n  location: Location\n}\n\ntype Location @aws_iam @aws_api_key @aws_cognito_user_pools {\n  lat: Float\n  lng: Float\n}\n\ninput AddressInput {\n  address: String\n  city: String\n  country: String\n  title: String\n  postalCode: String\n  location: LocationInput\n}\n\ninput LocationInput {\n  lat: Float\n  lng: Float\n}\n\ntype LocalizedItem {\n  en: String\n  de: String\n  hu: String\n}\n\ninput LocalizedItemInput {\n  en: String\n  de: String\n  hu: String\n}\n\n# AdminUser\n\ntype AdminUser @aws_iam @aws_api_key @aws_cognito_user_pools {\n  id: ID!\n  name: String\n  profileImage: String\n  roles: AdminUserRole!\n  settings: AdminUserSettings\n  address: Address\n  email: String\n  phone: String\n}\n\ntype AdminUserRole @aws_iam @aws_api_key @aws_cognito_user_pools {\n  role: String!\n  entities: [AdminRoleEntity]\n}\n\ntype AdminRoleEntity @aws_iam @aws_api_key @aws_cognito_user_pools {\n  chainId: String\n  groupId: String\n  unitId: String\n}\n\ntype AdminUserSettings @aws_iam @aws_api_key @aws_cognito_user_pools {\n  selectedChainId: String\n  selectedGroupId: String\n  selectedUnitId: String\n  selectedProductCategoryId: String\n  selectedLanguage: String\n  selectedHistoryDate: Int\n}\n\ninput CreateAdminUserInput {\n  name: String!\n  address: AddressInput\n  email: String!\n  phone: String\n  profileImage: String\n}\n\ninput UpdateAdminUserInput {\n  id: ID!\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n}\n\ninput AdminUserRoleInput {\n  role: String!\n  entities: [AdminRoleEntityInput]\n}\n\ninput AdminRoleEntityInput {\n  chainId: String\n  groupId: String\n  unitId: String\n}\n\n# Stripe\n\n# STRIPE schema example https://github.com/jferrettiboke/stripe-graphql/blob/master/generated/schema.graphql\n\n# https://stripe.com/docs/api/cards/object?lang=node\n# Card brand\nenum CardBrand {\n  amex\n  diners\n  discover\n  jcb\n  mastercard\n  unionpay\n  visa\n  unknown\n}\n\n# https://stripe.com/docs/api/cards/object?lang=node#card_object-funding\n# Card funding type\nenum CardFundingType {\n  credit\n  debit\n  prepaid\n  unknown\n}\n\n# enum StripePaymentMethodType {\n#   alipay\n#   au_becs_debit\n#   bacs_debit\n#   bancontact\n#   card\n#   eps\n#   fpx\n#   giropay\n#   grabpay\n#   ideal\n#   oxxo\n#   p24\n#   sepa_debit\n#   sofort\n# }\n\ntype CardChecks {\n  address_line1_check: String\n  address_postal_code_check: String\n  cvc_check: String\n}\n\n# https://stripe.com/docs/api/metadata?lang=node\n# Updateable Stripe objects\ntype StripeMetadata {\n  key: String!\n  value: String!\n}\n\ntype StripeCard {\n  brand: CardBrand\n  checks: CardChecks\n  country: String\n  last4: String\n  exp_month: Int\n  exp_year: Int\n  fingerprint: String\n  funding: CardFundingType\n  three_d_secure: String\n  # wallet: String # to do\n  # IMPLEMENTED INTERFACES\n  id: ID!\n  object: String!\n  metadata: [StripeMetadata!]!\n}\n\ninput StartStripePaymentInput {\n  chainId: ID!\n  unitId: ID!\n  userId: ID!\n  paymentMethodId: ID!\n}\n\ntype StartStripePaymentOutput {\n  clientSecret: String!\n  status: String!\n}\n\n# Chain\n\ntype Chain {\n  id: ID!\n  name: String\n  description: LocalizedItem\n  style: ChainStyle\n  isActive: Boolean\n}\n\ntype ChainStyle {\n  colors: ChainStyleColors\n  images: ChainStyleImages\n}\n\ntype ChainStyleColors {\n  backgroundLight: String\n  backgroundDark: String\n  borderLight: String\n  borderDark: String\n  disabled: String\n  highlight: String\n  indicator: String\n  textLight: String\n  textDark: String\n}\n\ntype ChainStyleImages {\n  header: String\n  logo: String\n}\n\ninput CreateChainInput {\n  name: String\n  description: LocalizedItemInput\n  style: ChainStyleInput\n  isActive: Boolean\n}\n\ninput UpdateChainInput {\n  id: ID!\n  name: String\n  description: LocalizedItemInput\n  style: ChainStyleInput\n  isActive: Boolean\n}\n\ninput ChainStyleInput {\n  colors: ChainStyleColorsInput\n  images: ChainStyleImagesInput\n}\n\ninput ChainStyleColorsInput {\n  backgroundLight: String\n  backgroundDark: String\n  borderLight: String\n  borderDark: String\n  disabled: String\n  highlight: String\n  indicator: String\n  textLight: String\n  textDark: String\n}\n\ninput ChainStyleImagesInput {\n  header: String\n  logo: String\n}\n\n# Group\ntype Group {\n  id: ID!\n  chainId: ID!\n  name: String\n  description: LocalizedItem\n  currency: String\n  address: Address\n  email: String\n  phone: String\n}\n\ninput CreateGroupInput {\n  chainId: ID!\n  name: String\n  description: LocalizedItemInput\n  currency: String\n  address: AddressInput\n  email: String\n  phone: String\n}\n\ninput UpdateGroupInput {\n  id: ID!\n  chainId: ID!\n  name: String\n  description: LocalizedItemInput\n  currency: String\n  address: AddressInput\n  email: String\n  phone: String\n}\n\n# OrderItem\ntype StatusLog {\n  userId: ID\n  status: String\n  ts: Int\n}\n\ntype PriceShown {\n  currency: String\n  pricePerUnit: Float\n  priceSum: Float\n  tax: Int\n  taxSum: Float\n}\n\ninput PriceShownInput {\n  currency: String\n  pricePerUnit: Float\n  priceSum: Float\n  tax: Int\n  taxSum: Float\n}\n\ntype OrderItem {\n  id: ID!\n  created: Int\n  productName: LocalizedItem\n  priceShown: PriceShown\n  productId: ID\n  quantity: Int\n  statusLog: [StatusLog]\n  variantId: ID\n  variantName: LocalizedItem\n  laneId: ID\n}\n\ninput CreateOrderItemInput {\n  productName: LocalizedItemInput\n  priceShown: PriceShownInput\n  productId: ID\n  quantity: Int\n  variantId: ID\n  variantName: LocalizedItemInput\n  laneId: ID\n}\n\ninput UpdateOrderItemInput {\n  id: ID!\n  productName: LocalizedItemInput\n  priceShown: PriceShownInput\n  productId: ID\n  quantity: Int\n  variantId: ID\n  variantName: LocalizedItemInput\n  laneId: ID\n}\n\n# Order\ntype Order {\n  id: ID!\n  created: Int\n  items: [OrderItem]\n  paymentMethod: String\n  staffId: ID\n  statusLog: [StatusLog]\n  sumPriceShown: PriceShown\n  takeAway: Boolean\n  userId: ID\n  place: Place\n  paymentIntention: Int\n}\n\ntype Place {\n  seat: String\n  table: String\n}\n\ninput PlaceInput {\n  seat: String\n  table: String\n}\n\ninput CreateOrderInput {\n  orderItems: [ID]\n  paymentMethod: String\n  staffId: ID\n  sumPriceShown: PriceShownInput\n  takeAway: Boolean\n  userId: ID\n  place: PlaceInput\n  paymentIntention: Int\n}\n\ninput UpdateOrderInput {\n  id: ID!\n  orderItems: [ID]\n  paymentMethod: String\n  staffId: ID\n  sumPriceShown: PriceShownInput\n  takeAway: Boolean\n  userId: ID\n  place: PlaceInput\n  paymentIntention: Int\n}\n\n# ProductCategory\ntype ProductCategory {\n  id: ID!\n  description: LocalizedItem\n  image: String\n  name: LocalizedItem\n  position: String\n}\n\ninput CreateProductCategoryInput {\n  description: LocalizedItemInput\n  image: String\n  name: LocalizedItemInput\n  position: String\n}\n\ninput UpdateProductCategoryInput {\n  id: ID!\n  description: LocalizedItemInput\n  image: String\n  name: LocalizedItemInput\n  position: String\n}\n\n# ChainProduct\ntype ChainProduct {\n  id: ID!\n  # contains\n  description: LocalizedItem\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItem\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariant]\n}\n\ninput CreateChainProductInput {\n  description: LocalizedItemInput\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItemInput\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariantInput]\n}\n\ninput UpdateChainProductInput {\n  id: ID!\n  description: LocalizedItemInput\n  extends: String\n  image: String\n  # ingredients\n  isVisible: Boolean\n  tax: Int\n  name: LocalizedItemInput\n  position: String\n  productCategoryId: ID\n  laneId: ID\n  productType: String\n  variants: [ProductVariantInput]\n}\n\ntype ProductVariant {\n  variantName: LocalizedItem\n  pack: ProductVariantPack\n  refGroupPrice: Float\n  isAvailable: Boolean\n  price: Float\n  availabilities: [Availability]\n  availableFrom: String\n  position: String\n}\n\ninput ProductVariantInput {\n  variantName: LocalizedItemInput\n  pack: ProductVariantPackInput\n  refGroupPrice: Float\n  isAvailable: Boolean\n  price: Float\n  availabilities: [AvailabilityInput]\n  availableFrom: String\n  position: String\n}\n\ntype ProductVariantPack {\n  size: Float\n  unit: String\n}\n\ninput ProductVariantPackInput {\n  size: Float\n  unit: String\n}\n\ntype Availability {\n  type: String\n  dayFrom: String\n  dayTo: String\n  timeFrom: String\n  timeTo: String\n  price: Float\n}\n\ninput AvailabilityInput {\n  type: String\n  dayFrom: String\n  dayTo: String\n  timeFrom: String\n  timeTo: String\n  price: Float\n}\n# Unit\ntype Unit {\n  id: ID!\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItem\n  paymentModes: [PaymentMode]\n  floorMap: FloorMapData\n  lanes: [Lane]\n  open: DailySchedule\n  openingHours: WeeklySchedule\n}\n\ninput CreateUnitInput {\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItemInput\n  paymentModes: [PaymentModeInput]\n  floorMap: FloorMapDataInput\n  lanes: [LaneInput]\n  open: DailyScheduleInput\n  openingHours: WeeklyScheduleInput\n}\n\ninput UpdateUnitInput {\n  id: ID!\n  groupId: ID!\n  isActive: Boolean\n  isAcceptingOrders: Boolean\n  name: String\n  description: LocalizedItemInput\n  paymentModes: [PaymentModeInput]\n  floorMap: FloorMapDataInput\n  lanes: [LaneInput]\n  open: DailyScheduleInput\n  openingHours: WeeklyScheduleInput\n}\n\ntype DailySchedule {\n  from: String\n  to: String\n}\n\ninput DailyScheduleInput {\n  from: String\n  to: String\n}\n\ntype CustomDailySchedule {\n  date: String\n  from: String\n  to: String\n}\n\ninput CustomDailyScheduleInput {\n  date: String\n  from: String\n  to: String\n}\n\ntype WeeklySchedule {\n  mon: DailySchedule\n  tue: DailySchedule\n  wed: DailySchedule\n  thu: DailySchedule\n  fri: DailySchedule\n  sat: DailySchedule\n  sun: DailySchedule\n  override: [CustomDailySchedule]\n}\n\ninput WeeklyScheduleInput {\n  mon: DailyScheduleInput\n  tue: DailyScheduleInput\n  wed: DailyScheduleInput\n  thu: DailyScheduleInput\n  fri: DailyScheduleInput\n  sat: DailyScheduleInput\n  sun: DailyScheduleInput\n  override: [CustomDailyScheduleInput]\n}\n\ntype PaymentMode {\n  name: String!\n  caption: String\n  method: String!\n}\n\ninput PaymentModeInput {\n  name: String!\n  caption: String\n  method: String!\n}\n\ntype FloorMapData {\n  w: Int\n  h: Int\n  objects: [FloorMapDataObject]\n}\n\ninput FloorMapDataInput {\n  w: Int\n  h: Int\n  objects: [FloorMapDataObjectInput]\n}\n\ntype FloorMapDataObject {\n  id: ID!\n  t: String!\n  c: String\n  w: Int\n  h: Int\n  r: Int\n  a: Int\n  x: Int!\n  y: Int!\n  tID: String # Table ID\n  sID: String # Seat Id\n}\n\ninput FloorMapDataObjectInput {\n  id: ID!\n  t: String!\n  c: String\n  w: Int\n  h: Int\n  r: Int\n  a: Int\n  x: Int!\n  y: Int!\n  tID: String # Table ID\n  sID: String # Seat Id\n}\n\ntype Lane {\n  id: ID\n  name: String\n  color: String\n}\n\ninput LaneInput {\n  id: ID\n  name: String\n  color: String\n}\n\n# User\ntype User {\n  id: ID!\n  name: String\n  address: Address\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\ninput CreateUserInput {\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\ninput UpdateUserInput {\n  id: ID!\n  name: String\n  address: AddressInput\n  email: String\n  phone: String\n  profileImage: String\n  login: String\n}\n\n# Operations\n\ntype Query {\n  # Admin\n  getAdminUser(id: ID!): AdminUser @aws_iam @aws_api_key @aws_cognito_user_pools\n  getAdminUsers: [AdminUser] @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Chain\n  getChain(id: ID!): Chain @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Group\n  getGroup(id: ID!): Group @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # OrderItem\n  getOrderItem(id: ID!): OrderItem @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Order\n  getOrder(id: ID!): Order @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # ProductCategory\n  getProductCategory(id: ID!): ProductCategory\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # ChainProduct\n  getChainProduct(id: ID!): ChainProduct\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Unit\n  getUnit(id: ID!): Unit @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # User\n  getUser(id: ID!): User @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Stripe\n  getCustomerStripeCards(customerId: ID): [StripeCard]\n\n  # Hellobello\n  hellobello(name: String!): String\n}\n\ntype Mutation {\n  # AdminUser\n  createAdminUser(input: CreateAdminUserInput!): AdminUser\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateAdminUser(input: UpdateAdminUserInput!): AdminUser\n  deleteAdminUser(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateAdminUserRole(input: AdminUserRoleInput!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Chain\n  createChain(input: CreateChainInput!): Chain\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateChain(input: UpdateChainInput!): Chain\n  deleteChain(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Group\n  createGroup(input: CreateGroupInput!): Group\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateGroup(input: UpdateGroupInput!): Group\n  deleteGroup(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # OrderItem\n  createOrderItem(input: CreateOrderItemInput!): OrderItem\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateOrderItem(input: UpdateOrderItemInput!): OrderItem\n  deleteOrderItem(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Order\n  createOrder(input: CreateOrderInput!): Order\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateOrder(input: UpdateOrderInput!): Order\n  deleteOrder(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # ProductCategory\n  createProductCategory(input: CreateProductCategoryInput!): ProductCategory\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateProductCategory(input: UpdateProductCategoryInput!): ProductCategory\n  deleteProductCategory(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # ChainProduct\n  createChainProduct(input: CreateChainProductInput!): ChainProduct\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateChainProduct(input: UpdateChainProductInput!): ChainProduct\n  deleteChainProduct(id: ID!): Boolean!\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  # Unit\n  createUnit(input: CreateUnitInput!): Unit\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateUnit(input: UpdateUnitInput!): Unit\n  deleteUnit(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # User\n  createUser(input: CreateUserInput!): User\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n  updateUser(input: UpdateUserInput!): User\n  deleteUser(id: ID!): Boolean! @aws_iam @aws_api_key @aws_cognito_user_pools\n\n  # Stripe\n  startStripePayment(args: StartStripePaymentInput!): StartStripePaymentOutput!\n}\n\ntype Subscription {\n  updatedAdminUser(id: ID!): AdminUser\n    @aws_subscribe(mutations: [\"updateAdminUser\"])\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n\n  createdAdminUser: AdminUser\n    @aws_subscribe(mutations: [\"createAdminUser\"])\n    @aws_iam\n    @aws_api_key\n    @aws_cognito_user_pools\n}\n"
                  }
                }
              },
              "DefaultApiKey": {
                "id": "DefaultApiKey",
                "path": "dev-anyupp-backend-appsync/Api/DefaultApiKey",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::ApiKey",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "expires": 1645274239
                  }
                }
              },
              "AdminUserDynamoDbDataSource": {
                "id": "AdminUserDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "AdminUserB562FFE8",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiAdminUserDynamoDbDataSourceServiceRoleDefaultPolicy0C584B37",
                                "roles": [
                                  {
                                    "Ref": "ApiAdminUserDynamoDbDataSourceServiceRoleAEA1B2EF"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "AdminUserDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "AdminUserB562FFE8"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiAdminUserDynamoDbDataSourceServiceRoleAEA1B2EF",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createAdminUserFunction": {
                    "id": "createAdminUserFunction",
                    "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/createAdminUserFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/AdminUserDynamoDbDataSource/createAdminUserFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "AdminUserDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createAdminUser",
                            "description": "Create a AdminUser",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteAdminUserResolver": {
                "id": "MutationdeleteAdminUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteAdminUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteAdminUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteAdminUser",
                        "typeName": "Mutation",
                        "dataSourceName": "AdminUserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetAdminUserResolver": {
                "id": "QuerygetAdminUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetAdminUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetAdminUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getAdminUser",
                        "typeName": "Query",
                        "dataSourceName": "AdminUserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateAdminUserResolver": {
                "id": "MutationupdateAdminUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateAdminUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateAdminUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateAdminUser",
                        "typeName": "Mutation",
                        "dataSourceName": "AdminUserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "ChainDynamoDbDataSource": {
                "id": "ChainDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "Chain51EFBDDD",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiChainDynamoDbDataSourceServiceRoleDefaultPolicy33051CAB",
                                "roles": [
                                  {
                                    "Ref": "ApiChainDynamoDbDataSourceServiceRole9939FE43"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "ChainDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "Chain51EFBDDD"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiChainDynamoDbDataSourceServiceRole9939FE43",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createChainFunction": {
                    "id": "createChainFunction",
                    "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/createChainFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ChainDynamoDbDataSource/createChainFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "ChainDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createChain",
                            "description": "Create a Chain",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteChainResolver": {
                "id": "MutationdeleteChainResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteChain",
                        "typeName": "Mutation",
                        "dataSourceName": "ChainDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetChainResolver": {
                "id": "QuerygetChainResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetChainResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetChainResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getChain",
                        "typeName": "Query",
                        "dataSourceName": "ChainDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateChainResolver": {
                "id": "MutationupdateChainResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateChainResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateChainResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateChain",
                        "typeName": "Mutation",
                        "dataSourceName": "ChainDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "GroupDynamoDbDataSource": {
                "id": "GroupDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "Group5F8EBFD4",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiGroupDynamoDbDataSourceServiceRoleDefaultPolicyF3B8FD68",
                                "roles": [
                                  {
                                    "Ref": "ApiGroupDynamoDbDataSourceServiceRoleF35CFCF2"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "GroupDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "Group5F8EBFD4"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiGroupDynamoDbDataSourceServiceRoleF35CFCF2",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createGroupFunction": {
                    "id": "createGroupFunction",
                    "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/createGroupFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/GroupDynamoDbDataSource/createGroupFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "GroupDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createGroup",
                            "description": "Create a Group",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteGroupResolver": {
                "id": "MutationdeleteGroupResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteGroupResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteGroupResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteGroup",
                        "typeName": "Mutation",
                        "dataSourceName": "GroupDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetGroupResolver": {
                "id": "QuerygetGroupResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetGroupResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetGroupResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getGroup",
                        "typeName": "Query",
                        "dataSourceName": "GroupDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateGroupResolver": {
                "id": "MutationupdateGroupResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateGroupResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateGroupResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateGroup",
                        "typeName": "Mutation",
                        "dataSourceName": "GroupDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "OrderItemDynamoDbDataSource": {
                "id": "OrderItemDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "OrderItemCA48CFE2",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiOrderItemDynamoDbDataSourceServiceRoleDefaultPolicyB89B245E",
                                "roles": [
                                  {
                                    "Ref": "ApiOrderItemDynamoDbDataSourceServiceRole55687418"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "OrderItemDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "OrderItemCA48CFE2"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiOrderItemDynamoDbDataSourceServiceRole55687418",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createOrderItemFunction": {
                    "id": "createOrderItemFunction",
                    "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/createOrderItemFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/OrderItemDynamoDbDataSource/createOrderItemFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "OrderItemDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createOrderItem",
                            "description": "Create a OrderItem",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteOrderItemResolver": {
                "id": "MutationdeleteOrderItemResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderItemResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderItemResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteOrderItem",
                        "typeName": "Mutation",
                        "dataSourceName": "OrderItemDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetOrderItemResolver": {
                "id": "QuerygetOrderItemResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetOrderItemResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetOrderItemResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getOrderItem",
                        "typeName": "Query",
                        "dataSourceName": "OrderItemDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateOrderItemResolver": {
                "id": "MutationupdateOrderItemResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderItemResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderItemResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateOrderItem",
                        "typeName": "Mutation",
                        "dataSourceName": "OrderItemDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "OrderDynamoDbDataSource": {
                "id": "OrderDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "Order1A9696B9",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiOrderDynamoDbDataSourceServiceRoleDefaultPolicyCD8FCEA7",
                                "roles": [
                                  {
                                    "Ref": "ApiOrderDynamoDbDataSourceServiceRoleC418381E"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "OrderDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "Order1A9696B9"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiOrderDynamoDbDataSourceServiceRoleC418381E",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createOrderFunction": {
                    "id": "createOrderFunction",
                    "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/createOrderFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/OrderDynamoDbDataSource/createOrderFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "OrderDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createOrder",
                            "description": "Create a Order",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteOrderResolver": {
                "id": "MutationdeleteOrderResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteOrderResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteOrder",
                        "typeName": "Mutation",
                        "dataSourceName": "OrderDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetOrderResolver": {
                "id": "QuerygetOrderResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetOrderResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetOrderResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getOrder",
                        "typeName": "Query",
                        "dataSourceName": "OrderDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateOrderResolver": {
                "id": "MutationupdateOrderResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateOrderResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateOrder",
                        "typeName": "Mutation",
                        "dataSourceName": "OrderDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "ProductCategoryDynamoDbDataSource": {
                "id": "ProductCategoryDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "ProductCategoryE0CB0748",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiProductCategoryDynamoDbDataSourceServiceRoleDefaultPolicyEC6B3583",
                                "roles": [
                                  {
                                    "Ref": "ApiProductCategoryDynamoDbDataSourceServiceRole78F43A04"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "ProductCategoryDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "ProductCategoryE0CB0748"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiProductCategoryDynamoDbDataSourceServiceRole78F43A04",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createProductCategoryFunction": {
                    "id": "createProductCategoryFunction",
                    "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/createProductCategoryFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ProductCategoryDynamoDbDataSource/createProductCategoryFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "ProductCategoryDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createProductCategory",
                            "description": "Create a ProductCategory",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteProductCategoryResolver": {
                "id": "MutationdeleteProductCategoryResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteProductCategoryResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteProductCategoryResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteProductCategory",
                        "typeName": "Mutation",
                        "dataSourceName": "ProductCategoryDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetProductCategoryResolver": {
                "id": "QuerygetProductCategoryResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetProductCategoryResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetProductCategoryResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getProductCategory",
                        "typeName": "Query",
                        "dataSourceName": "ProductCategoryDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateProductCategoryResolver": {
                "id": "MutationupdateProductCategoryResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateProductCategoryResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateProductCategoryResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateProductCategory",
                        "typeName": "Mutation",
                        "dataSourceName": "ProductCategoryDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "ChainProductDynamoDbDataSource": {
                "id": "ChainProductDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "ChainProduct3129DBA1",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiChainProductDynamoDbDataSourceServiceRoleDefaultPolicyA7BA2A32",
                                "roles": [
                                  {
                                    "Ref": "ApiChainProductDynamoDbDataSourceServiceRole5D0ED21D"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "ChainProductDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "ChainProduct3129DBA1"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiChainProductDynamoDbDataSourceServiceRole5D0ED21D",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createChainProductFunction": {
                    "id": "createChainProductFunction",
                    "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/createChainProductFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/ChainProductDynamoDbDataSource/createChainProductFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "ChainProductDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createChainProduct",
                            "description": "Create a ChainProduct",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteChainProductResolver": {
                "id": "MutationdeleteChainProductResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainProductResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteChainProductResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteChainProduct",
                        "typeName": "Mutation",
                        "dataSourceName": "ChainProductDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetChainProductResolver": {
                "id": "QuerygetChainProductResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetChainProductResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetChainProductResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getChainProduct",
                        "typeName": "Query",
                        "dataSourceName": "ChainProductDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateChainProductResolver": {
                "id": "MutationupdateChainProductResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateChainProductResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateChainProductResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateChainProduct",
                        "typeName": "Mutation",
                        "dataSourceName": "ChainProductDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "UnitDynamoDbDataSource": {
                "id": "UnitDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "UnitD801F908",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiUnitDynamoDbDataSourceServiceRoleDefaultPolicy8A05D74A",
                                "roles": [
                                  {
                                    "Ref": "ApiUnitDynamoDbDataSourceServiceRoleD3776C85"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "UnitDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "UnitD801F908"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiUnitDynamoDbDataSourceServiceRoleD3776C85",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createUnitFunction": {
                    "id": "createUnitFunction",
                    "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/createUnitFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/UnitDynamoDbDataSource/createUnitFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "UnitDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createUnit",
                            "description": "Create a Unit",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteUnitResolver": {
                "id": "MutationdeleteUnitResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteUnitResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteUnitResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteUnit",
                        "typeName": "Mutation",
                        "dataSourceName": "UnitDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetUnitResolver": {
                "id": "QuerygetUnitResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetUnitResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetUnitResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getUnit",
                        "typeName": "Query",
                        "dataSourceName": "UnitDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateUnitResolver": {
                "id": "MutationupdateUnitResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateUnitResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateUnitResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateUnit",
                        "typeName": "Mutation",
                        "dataSourceName": "UnitDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "UserDynamoDbDataSource": {
                "id": "UserDynamoDbDataSource",
                "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "User8C194555",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApiUserDynamoDbDataSourceServiceRoleDefaultPolicyAC68DA47",
                                "roles": [
                                  {
                                    "Ref": "ApiUserDynamoDbDataSourceServiceRole2BCFA83D"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "UserDynamoDbDataSource",
                        "type": "AMAZON_DYNAMODB",
                        "dynamoDbConfig": {
                          "tableName": {
                            "Ref": "User8C194555"
                          },
                          "awsRegion": "eu-west-1"
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApiUserDynamoDbDataSourceServiceRole2BCFA83D",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  "createUserFunction": {
                    "id": "createUserFunction",
                    "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/createUserFunction",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/UserDynamoDbDataSource/createUserFunction/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "ApiF70053CD",
                                "ApiId"
                              ]
                            },
                            "dataSourceName": "UserDynamoDbDataSource",
                            "functionVersion": "2018-05-29",
                            "name": "createUser",
                            "description": "Create a User",
                            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"key\":  {\n     \"id\": $util.dynamodb.toDynamoDBJson($util.autoId())\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n",
                            "responseMappingTemplate": "$util.toJson($context.result)\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "MutationdeleteUserResolver": {
                "id": "MutationdeleteUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationdeleteUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationdeleteUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteUser",
                        "typeName": "Mutation",
                        "dataSourceName": "UserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\" : \"2017-02-28\",\n  \"operation\" : \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($context.arguments.id)\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "QuerygetUserResolver": {
                "id": "QuerygetUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/QuerygetUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QuerygetUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getUser",
                        "typeName": "Query",
                        "dataSourceName": "UserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\":  {\n    \"id\" : { \"S\" : \"${context.arguments.id}\" }\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "MutationupdateUserResolver": {
                "id": "MutationupdateUserResolver",
                "path": "dev-anyupp-backend-appsync/Api/MutationupdateUserResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/MutationupdateUserResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateUser",
                        "typeName": "Mutation",
                        "dataSourceName": "UserDynamoDbDataSource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n\n  \"condition\": {\n    \"expression\": \"SET attribute_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\"\n    },\n  }\n}\n",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "lambdaDatasource": {
                "id": "lambdaDatasource",
                "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "lambda:InvokeFunction",
                                      "Effect": "Allow",
                                      "Resource": {
                                        "Fn::GetAtt": [
                                          "AppsyncLambda25F06A30",
                                          "Arn"
                                        ]
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ApilambdaDatasourceServiceRoleDefaultPolicy3A97E34D",
                                "roles": [
                                  {
                                    "Ref": "ApilambdaDatasourceServiceRole2CA75790"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/lambdaDatasource/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "name": "lambdaDatasource",
                        "type": "AWS_LAMBDA",
                        "lambdaConfig": {
                          "lambdaFunctionArn": {
                            "Fn::GetAtt": [
                              "AppsyncLambda25F06A30",
                              "Arn"
                            ]
                          }
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "ApilambdaDatasourceServiceRole2CA75790",
                            "Arn"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "QueryhellobelloResolver": {
                "id": "QueryhellobelloResolver",
                "path": "dev-anyupp-backend-appsync/Api/QueryhellobelloResolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Api/QueryhellobelloResolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "fieldName": "hellobello",
                        "typeName": "Query",
                        "dataSourceName": "lambdaDatasource",
                        "kind": "UNIT",
                        "requestMappingTemplate": "\n        {\n          \"version\" : \"2017-02-28\",\n          \"operation\" : \"Invoke\",\n          \"payload\": \"$context.arguments.name\"\n        }\n        ",
                        "responseMappingTemplate": "$util.toJson($context.result)"
                      }
                    }
                  }
                }
              }
            }
          },
          "NoneDataSource": {
            "id": "NoneDataSource",
            "path": "dev-anyupp-backend-appsync/NoneDataSource",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/NoneDataSource/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "name": "NoneDataSource",
                    "type": "NONE"
                  }
                }
              },
              "validateLonFunction": {
                "id": "validateLonFunction",
                "path": "dev-anyupp-backend-appsync/NoneDataSource/validateLonFunction",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/NoneDataSource/validateLonFunction/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NoneDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "validateLon",
                        "description": "Validate a longitude",
                        "requestMappingTemplate": "\n        #set($valid = $util.isNull($object.url) or ($ctx.stash.lon <= 180.0) and ($ctx.stash.lon >= -180.0))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.lon is not a valid longitude.\")\n        #end\n        {}\n      ",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "validateLatFunction": {
                "id": "validateLatFunction",
                "path": "dev-anyupp-backend-appsync/NoneDataSource/validateLatFunction",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/NoneDataSource/validateLatFunction/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NoneDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "validateLat",
                        "description": "Validate a latitude",
                        "requestMappingTemplate": "\n        #set($valid = $util.isNull($object.url) or ($ctx.stash.lat <= 90.0) and ($ctx.stash.lat >= -90.0))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.lat is not a valid latitude.\")\n        #end\n        {}\n      ",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "validateAddressFunction": {
                "id": "validateAddressFunction",
                "path": "dev-anyupp-backend-appsync/NoneDataSource/validateAddressFunction",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/NoneDataSource/validateAddressFunction/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NoneDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "validateAddress",
                        "description": "Validate an address",
                        "requestMappingTemplate": "\n        #set($valid = \n             ($util.isNull($ctx.stash.address.location.lng) and $util.isNull($ctx.stash.address.location.lat)) or \n             (($ctx.stash.address.location.lat <= 90.0) and ($ctx.stash.address.location.lat >= -90.0) and\n             ($ctx.stash.address.location.lng <= 180.0) and ($ctx.stash.address.location.lng >= -180.0)\n             ))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.address is not a valid address\")\n        #end\n        {} \n      ",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              },
              "validateUrlFunction": {
                "id": "validateUrlFunction",
                "path": "dev-anyupp-backend-appsync/NoneDataSource/validateUrlFunction",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/NoneDataSource/validateUrlFunction/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "ApiF70053CD",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NoneDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "validateUrl",
                        "description": "Validate an url",
                        "requestMappingTemplate": "\n        #set($valid = $util.matches(\"^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?\", $ctx.stash.url))\n        #if (!$valid)\n            $util.error(\"$ctx.stash.url is not a valid ur.\")\n        #end\n        {}\n      ",
                        "responseMappingTemplate": "$util.toJson($context.result)\n"
                      }
                    }
                  }
                }
              }
            }
          },
          "AdminUser": {
            "id": "AdminUser",
            "path": "dev-anyupp-backend-appsync/AdminUser",
            "children": {
              "AdminUser": {
                "id": "AdminUser",
                "path": "dev-anyupp-backend-appsync/AdminUser/AdminUser",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/AdminUser/AdminUser/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/AdminUser/AdminUser/ScalingRole"
                  }
                }
              },
              "AdminUserTableName": {
                "id": "AdminUserTableName",
                "path": "dev-anyupp-backend-appsync/AdminUser/AdminUserTableName"
              },
              "AdminUserTableArn": {
                "id": "AdminUserTableArn",
                "path": "dev-anyupp-backend-appsync/AdminUser/AdminUserTableArn"
              }
            }
          },
          "createAdminUser": {
            "id": "createAdminUser",
            "path": "dev-anyupp-backend-appsync/createAdminUser",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createAdminUser/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createAdminUser",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "NoneDataSourcevalidateAddressFunction366FE1CA",
                            "FunctionId"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "ApiAdminUserDynamoDbDataSourcecreateAdminUserFunctionF0646485",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "$util.qr($ctx.stash.put(\"address\", $ctx.args.input.address))\n\n{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "Chain": {
            "id": "Chain",
            "path": "dev-anyupp-backend-appsync/Chain",
            "children": {
              "Chain": {
                "id": "Chain",
                "path": "dev-anyupp-backend-appsync/Chain/Chain",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Chain/Chain/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/Chain/Chain/ScalingRole"
                  }
                }
              },
              "ChainTableName": {
                "id": "ChainTableName",
                "path": "dev-anyupp-backend-appsync/Chain/ChainTableName"
              },
              "ChainTableArn": {
                "id": "ChainTableArn",
                "path": "dev-anyupp-backend-appsync/Chain/ChainTableArn"
              }
            }
          },
          "createChain": {
            "id": "createChain",
            "path": "dev-anyupp-backend-appsync/createChain",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createChain/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createChain",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiChainDynamoDbDataSourcecreateChainFunctionD6A8A673",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "Group": {
            "id": "Group",
            "path": "dev-anyupp-backend-appsync/Group",
            "children": {
              "Group": {
                "id": "Group",
                "path": "dev-anyupp-backend-appsync/Group/Group",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Group/Group/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/Group/Group/ScalingRole"
                  }
                }
              },
              "GroupTableName": {
                "id": "GroupTableName",
                "path": "dev-anyupp-backend-appsync/Group/GroupTableName"
              },
              "GroupTableArn": {
                "id": "GroupTableArn",
                "path": "dev-anyupp-backend-appsync/Group/GroupTableArn"
              }
            }
          },
          "createGroup": {
            "id": "createGroup",
            "path": "dev-anyupp-backend-appsync/createGroup",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createGroup/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createGroup",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiGroupDynamoDbDataSourcecreateGroupFunctionBDB4178C",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "OrderItem": {
            "id": "OrderItem",
            "path": "dev-anyupp-backend-appsync/OrderItem",
            "children": {
              "OrderItem": {
                "id": "OrderItem",
                "path": "dev-anyupp-backend-appsync/OrderItem/OrderItem",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/OrderItem/OrderItem/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/OrderItem/OrderItem/ScalingRole"
                  }
                }
              },
              "OrderItemTableName": {
                "id": "OrderItemTableName",
                "path": "dev-anyupp-backend-appsync/OrderItem/OrderItemTableName"
              },
              "OrderItemTableArn": {
                "id": "OrderItemTableArn",
                "path": "dev-anyupp-backend-appsync/OrderItem/OrderItemTableArn"
              }
            }
          },
          "createOrderItem": {
            "id": "createOrderItem",
            "path": "dev-anyupp-backend-appsync/createOrderItem",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createOrderItem/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createOrderItem",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiOrderItemDynamoDbDataSourcecreateOrderItemFunction52D0B901",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "Order": {
            "id": "Order",
            "path": "dev-anyupp-backend-appsync/Order",
            "children": {
              "Order": {
                "id": "Order",
                "path": "dev-anyupp-backend-appsync/Order/Order",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Order/Order/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/Order/Order/ScalingRole"
                  }
                }
              },
              "OrderTableName": {
                "id": "OrderTableName",
                "path": "dev-anyupp-backend-appsync/Order/OrderTableName"
              },
              "OrderTableArn": {
                "id": "OrderTableArn",
                "path": "dev-anyupp-backend-appsync/Order/OrderTableArn"
              }
            }
          },
          "createOrder": {
            "id": "createOrder",
            "path": "dev-anyupp-backend-appsync/createOrder",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createOrder/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createOrder",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiOrderDynamoDbDataSourcecreateOrderFunctionA2442474",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "ProductCategory": {
            "id": "ProductCategory",
            "path": "dev-anyupp-backend-appsync/ProductCategory",
            "children": {
              "ProductCategory": {
                "id": "ProductCategory",
                "path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategory",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategory/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategory/ScalingRole"
                  }
                }
              },
              "ProductCategoryTableName": {
                "id": "ProductCategoryTableName",
                "path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategoryTableName"
              },
              "ProductCategoryTableArn": {
                "id": "ProductCategoryTableArn",
                "path": "dev-anyupp-backend-appsync/ProductCategory/ProductCategoryTableArn"
              }
            }
          },
          "createProductCategory": {
            "id": "createProductCategory",
            "path": "dev-anyupp-backend-appsync/createProductCategory",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createProductCategory/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createProductCategory",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiProductCategoryDynamoDbDataSourcecreateProductCategoryFunction80E96D4C",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "ChainProduct": {
            "id": "ChainProduct",
            "path": "dev-anyupp-backend-appsync/ChainProduct",
            "children": {
              "ChainProduct": {
                "id": "ChainProduct",
                "path": "dev-anyupp-backend-appsync/ChainProduct/ChainProduct",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/ChainProduct/ChainProduct/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/ChainProduct/ChainProduct/ScalingRole"
                  }
                }
              },
              "ChainProductTableName": {
                "id": "ChainProductTableName",
                "path": "dev-anyupp-backend-appsync/ChainProduct/ChainProductTableName"
              },
              "ChainProductTableArn": {
                "id": "ChainProductTableArn",
                "path": "dev-anyupp-backend-appsync/ChainProduct/ChainProductTableArn"
              }
            }
          },
          "createChainProduct": {
            "id": "createChainProduct",
            "path": "dev-anyupp-backend-appsync/createChainProduct",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createChainProduct/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createChainProduct",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiChainProductDynamoDbDataSourcecreateChainProductFunction39AC3FE6",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "Unit": {
            "id": "Unit",
            "path": "dev-anyupp-backend-appsync/Unit",
            "children": {
              "Unit": {
                "id": "Unit",
                "path": "dev-anyupp-backend-appsync/Unit/Unit",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/Unit/Unit/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/Unit/Unit/ScalingRole"
                  }
                }
              },
              "UnitTableName": {
                "id": "UnitTableName",
                "path": "dev-anyupp-backend-appsync/Unit/UnitTableName"
              },
              "UnitTableArn": {
                "id": "UnitTableArn",
                "path": "dev-anyupp-backend-appsync/Unit/UnitTableArn"
              }
            }
          },
          "createUnit": {
            "id": "createUnit",
            "path": "dev-anyupp-backend-appsync/createUnit",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createUnit/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createUnit",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiUnitDynamoDbDataSourcecreateUnitFunctionBBBCA3FB",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "User": {
            "id": "User",
            "path": "dev-anyupp-backend-appsync/User",
            "children": {
              "User": {
                "id": "User",
                "path": "dev-anyupp-backend-appsync/User/User",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/User/User/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "streamSpecification": {
                          "streamViewType": "NEW_AND_OLD_IMAGES"
                        }
                      }
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "dev-anyupp-backend-appsync/User/User/ScalingRole"
                  }
                }
              },
              "UserTableName": {
                "id": "UserTableName",
                "path": "dev-anyupp-backend-appsync/User/UserTableName"
              },
              "UserTableArn": {
                "id": "UserTableArn",
                "path": "dev-anyupp-backend-appsync/User/UserTableArn"
              }
            }
          },
          "createUser": {
            "id": "createUser",
            "path": "dev-anyupp-backend-appsync/createUser",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/createUser/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                  "aws:cdk:cloudformation:props": {
                    "apiId": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "ApiId"
                      ]
                    },
                    "fieldName": "createUser",
                    "typeName": "Mutation",
                    "kind": "PIPELINE",
                    "pipelineConfig": {
                      "functions": [
                        {
                          "Fn::GetAtt": [
                            "ApiUserDynamoDbDataSourcecreateUserFunction400962A7",
                            "FunctionId"
                          ]
                        }
                      ]
                    },
                    "requestMappingTemplate": "{}",
                    "responseMappingTemplate": "$util.toJson($context.result)\n"
                  }
                }
              }
            }
          },
          "GraphqlApiUrlParam": {
            "id": "GraphqlApiUrlParam",
            "path": "dev-anyupp-backend-appsync/GraphqlApiUrlParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/GraphqlApiUrlParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "ApiF70053CD",
                        "GraphQLUrl"
                      ]
                    },
                    "allowedPattern": ".*",
                    "description": "The graphql API endpoint URL",
                    "name": "dev-anyupp-backend-GraphqlApiUrl"
                  }
                }
              }
            }
          },
          "GraphqlApiKeyParam": {
            "id": "GraphqlApiKeyParam",
            "path": "dev-anyupp-backend-appsync/GraphqlApiKeyParam",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/GraphqlApiKeyParam/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "ApiDefaultApiKeyF991C37B",
                        "ApiKey"
                      ]
                    },
                    "allowedPattern": ".*",
                    "description": "The graphql API key",
                    "name": "dev-anyupp-backend-GraphqlApiKey"
                  }
                }
              }
            }
          },
          "GraphqlApiUrl": {
            "id": "GraphqlApiUrl",
            "path": "dev-anyupp-backend-appsync/GraphqlApiUrl"
          },
          "GraphqlApiKey": {
            "id": "GraphqlApiKey",
            "path": "dev-anyupp-backend-appsync/GraphqlApiKey"
          },
          "AppsyncLambda": {
            "id": "AppsyncLambda",
            "path": "dev-anyupp-backend-appsync/AppsyncLambda",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "dev-anyupp-backend-appsync/AppsyncLambda/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "dev-anyupp-backend-appsync/AppsyncLambda/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Code": {
                "id": "Code",
                "path": "dev-anyupp-backend-appsync/AppsyncLambda/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "dev-anyupp-backend-appsync/AppsyncLambda/Code/Stage"
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "dev-anyupp-backend-appsync/AppsyncLambda/Code/AssetBucket"
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "dev-anyupp-backend-appsync/AppsyncLambda/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3BucketF7CC5A3A"
                      },
                      "s3Key": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Select": [
                                0,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3VersionKey4042E5F3"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Fn::Select": [
                                1,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525daS3VersionKey4042E5F3"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    },
                    "role": {
                      "Fn::GetAtt": [
                        "AppsyncLambdaServiceRole9B8FD837",
                        "Arn"
                      ]
                    },
                    "handler": "lib/lambda/appsync-lambda/index.handler",
                    "runtime": "nodejs12.x"
                  }
                }
              }
            }
          },
          "AssetParameters": {
            "id": "AssetParameters",
            "path": "dev-anyupp-backend-appsync/AssetParameters",
            "children": {
              "28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da": {
                "id": "28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da",
                "path": "dev-anyupp-backend-appsync/AssetParameters/28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "dev-anyupp-backend-appsync/AssetParameters/28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "dev-anyupp-backend-appsync/AssetParameters/28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "dev-anyupp-backend-appsync/AssetParameters/28fb0b755c66018757046b17418cc93911b50c65940d2c4aaaf535def81525da/ArtifactHash"
                  }
                }
              }
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "dev-anyupp-backend-appsync/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "dev-anyupp-backend-appsync/CDKMetadata/Default"
              }
            }
          }
        }
      }
    }
  }
}