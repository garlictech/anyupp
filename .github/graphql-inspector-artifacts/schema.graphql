scalar AWSDateTime

type Location @aws_iam @aws_cognito_user_pools @aws_api_key {
  lat: Float!
  lng: Float @deprecated(reason: "Use lon")
  lon: Float
}

type LocalizedItem @aws_iam @aws_cognito_user_pools @aws_api_key {
  en: String
  de: String
  hu: String
}

type Address @aws_iam @aws_cognito_user_pools @aws_api_key {
  address: String!
  city: String!
  country: String!
  title: String!
  postalCode: String!
  location: Location @deprecated(reason: "Unused.")
}

type PaymentMode @aws_iam @aws_cognito_user_pools @aws_api_key {
  type: PaymentType!
  caption: String
  method: PaymentMethod!
}

enum PaymentMethod {
  cash
  card
  inapp
}

enum PaymentType {
  card
  cash
  simple
  stripe
  applepay
  googlepay
}

type ChainStyle @aws_iam @aws_cognito_user_pools @aws_api_key {
  colors: ChainStyleColors!
  images: ChainStyleImages
}

type ChainStyleColors @aws_iam @aws_cognito_user_pools @aws_api_key {
  backgroundLight: String @deprecated(reason: "Unused.")
  backgroundDark: String @deprecated(reason: "Unused.")
  borderLight: String @deprecated(reason: "Unused.")
  borderDark: String @deprecated(reason: "Unused.")
  disabled: String @deprecated(reason: "Unused.")
  indicator: String @deprecated(reason: "Use `primary`.")
  textLight: String @deprecated(reason: "Unused.")
  textDark: String @deprecated(reason: "Use `secondary`.")
  primary: String @deprecated(reason: "Unused.")
  secondary: String @deprecated(reason: "Unused.")
  button: String
  buttonText: String
  icon: String
  highlight: String
}

type ChainStyleImages @aws_iam @aws_cognito_user_pools @aws_api_key {
  header: String
  logo: String
}

type ChainProduct @aws_iam @aws_cognito_user_pools {
  id: ID!
  chainId: ID!
  name: LocalizedItem!
  description: LocalizedItem
  productCategoryId: ID!
  productType: String!
  isVisible: Boolean!
  image: String
  variants: [ProductVariant]
  allergens: [Allergen]
  configSets: [ProductConfigSet]
  externalId: String
  dirty: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum Allergen {
  celery
  crustaceans
  egg
  fish
  gluten
  lupin
  milk
  molluscs
  mustard
  peanut
  sesame
  soya
  sulphites
  treenuts
}

enum ServingMode {
  inPlace
  takeAway
}

enum OrderMode {
  instant
  pickup
}

enum SoldOutVisibilityPolicy {
  faded
  invisible
}

enum ServiceFeeType {
  included
  applicable
  noFee
}

type ServiceFeePolicy @aws_iam @aws_cognito_user_pools @aws_api_key {
  type: ServiceFeeType!
  percentage: Float!
}

input ServiceFeePolicyInput {
  type: ServiceFeeType!
  percentage: Float!
}

type GroupProduct @aws_iam @aws_cognito_user_pools {
  id: ID!
  parentId: ID!
  chainId: ID!
  groupId: ID!
  isVisible: Boolean!
  tax: Int!
  takeawayTax: Int
  variants: [ProductVariant]
  configSets: [ProductConfigSet]
  externalId: String
  dirty: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UnitProduct @aws_iam @aws_cognito_user_pools {
  id: ID!
  parentId: ID!
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean @deprecated(reason: "Use `supportedServingModes`.")
  laneId: ID
  position: Int!
  variants: [ProductVariant]
  configSets: [ProductConfigSet]
  supportedServingModes: [ServingMode!]
  externalId: String
  dirty: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ProductConfigComponent @aws_iam @aws_cognito_user_pools @aws_api_key {
  productComponentId: ID!
  refGroupPrice: Float!
  price: Float!
  position: Int!
  externalId: String
  netPackagingFee: Float
}

type ProductConfigSet @aws_iam @aws_cognito_user_pools @aws_api_key {
  productSetId: ID!
  items: [ProductConfigComponent!]!
  position: Int!
}

type ProductVariant @aws_iam @aws_cognito_user_pools @aws_api_key {
  id: ID!
  variantName: LocalizedItem!
  pack: ProductVariantPack
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [Availability]
  position: Int!
  netPackagingFee: Float
  soldOut: Boolean
}

type ProductVariantPack @aws_iam @aws_cognito_user_pools @aws_api_key {
  size: Float!
  unit: String!
}

input ProductVariantPackInput {
  size: Float!
  unit: String!
}

type Availability @aws_iam @aws_cognito_user_pools @aws_api_key {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}

input AvailabilityInput {
  type: String!
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float!
}

type CardChecks @aws_iam @aws_cognito_user_pools {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

enum CardBrand {
  amex
  diners
  discover
  jcb
  mastercard
  unionpay
  visa
  unknown
}

enum CardFundingType {
  credit
  debit
  prepaid
  unknown
}

type BillingDetails @aws_iam @aws_cognito_user_pools {
  email: String
  name: String
  phone: String
  address: BillingAddress
}

type BillingAddress @aws_iam @aws_cognito_user_pools {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type StripeCard @aws_iam @aws_cognito_user_pools {
  id: String!
  name: String
  brand: CardBrand
  checks: CardChecks
  country: String
  last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: CardFundingType
  three_d_secure: String
  billing_details: BillingDetails
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input UserInvoiceAddressInput {
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
}

input StartStripePaymentInput {
  orderId: ID!
  paymentMethod: PaymentMethod!
  savePaymentMethod: Boolean!
  paymentMethodId: String
  invoiceAddress: UserInvoiceAddressInput
}

input PayTipWithStripeInput {
  orderId: ID!
  tip: TipInput!
}

type StartStripePaymentOutput {
  clientSecret: String! @aws_iam @aws_cognito_user_pools
  status: String! @aws_iam @aws_cognito_user_pools
  paymentMethodId: String @aws_iam @aws_cognito_user_pools
  stripeAccount: String @aws_iam @aws_cognito_user_pools
}

input StripeCardCreateInput {
  card_number: String!
  exp_month: Int!
  exp_year: Int!
  cvc: String!
  default_for_currency: Boolean
  name: String!
}

input StripeCardUpdateInput {
  paymentMethodId: String!
  default_for_currency: Boolean
  name: String
}

input StripeCardDeleteInput {
  paymentMethodId: String!
}

enum Role {
  superuser
  chainadmin
  groupadmin
  unitadmin
  staff
  inactive
}

type AdminUser @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  email: String!
  phone: String!
  profileImage: String
  settings: AdminUserSettings
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AdminUserSettings @aws_iam @aws_cognito_user_pools {
  selectedChainId: String
  selectedGroupId: String
  selectedUnitId: String
  selectedProductCategoryId: String
  selectedLanguage: String
  selectedHistoryDate: Int
}

input UpdateAdminUserInput {
  id: ID!
  name: String
  email: String
  phone: String
  profileImage: String
  settings: AdminUserSettingsInput
}

input AdminUserSettingsInput {
  selectedChainId: String
  selectedGroupId: String
  selectedUnitId: String
  selectedProductCategoryId: String
  selectedLanguage: String
  selectedHistoryDate: Int
}

input CreateAdminUserInput {
  id: ID
  name: String!
  email: String!
  phone: String!
  profileImage: String
  settings: AdminUserSettingsInput
}

type Chain @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  description: LocalizedItem
  style: ChainStyle!
  isActive: Boolean
  address: Address
  email: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Group @aws_iam @aws_cognito_user_pools {
  id: ID!
  chainId: ID!
  name: String!
  description: LocalizedItem
  currency: String!
  address: Address
  email: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type StatusLog @aws_iam @aws_cognito_user_pools @aws_api_key {
  userId: ID!
  status: OrderStatus!
  ts: Float!
}

type PriceShown @aws_iam @aws_cognito_user_pools @aws_api_key {
  currency: String!
  pricePerUnit: Float!
  priceSum: Float!
  tax: Int!
  taxSum: Float!
}

type OrderItemConfigComponent @aws_iam @aws_cognito_user_pools @aws_api_key {
  productComponentId: ID!
  price: Float!
  name: LocalizedItem!
  allergens: [Allergen]
  netPackagingFee: Float
  externalId: String
}

type OrderItemConfigSet @aws_iam @aws_cognito_user_pools @aws_api_key {
  productSetId: ID!
  name: LocalizedItem!
  type: String!
  items: [OrderItemConfigComponent!]!
}

type Price @aws_iam @aws_cognito_user_pools @aws_api_key {
  currency: String!
  netPrice: Float!
  taxPercentage: Float!
}

type CumulatedPrice @aws_iam @aws_cognito_user_pools {
  currency: String
  grossPrice: Float
  taxContent: Float
}

input CumulatedPriceInput {
  currency: String
  grossPrice: Float
  taxContent: Float
}

type OrderItem @aws_iam @aws_cognito_user_pools @aws_api_key {
  productId: ID!
  variantId: ID!
  created: Float
  productName: LocalizedItem!
  image: String
  quantity: Int!
  statusLog: [StatusLog!]!
  variantName: LocalizedItem!
  laneId: ID
  allergens: [Allergen]
  configSets: [OrderItemConfigSet!]
  productType: String
  externalId: String
  netPackagingFee: Float
  serviceFee: Price
  priceShown: PriceShown!
  sumPriceShown: PriceShown!
}

type OrderRating @aws_iam @aws_cognito_user_pools {
  key: String!
  value: Int!
}

type Order @aws_iam @aws_cognito_user_pools {
  id: ID!
  version: Int
  userId: ID!
  unitId: ID!
  orderNum: String
  items: [OrderItem!]!
  paymentMode: PaymentMode
  statusLog: [StatusLog!]!
  archived: Boolean!
  place: Place
  paymentIntention: Float
  transactionStatus: PaymentStatus
  transactionId: ID
  transaction: Transaction
  unpayCategory: UnpayCategory
  orderMode: OrderMode
  servingMode: ServingMode
  serviceFee: CumulatedPrice
  packagingSum: Price
  sumPriceShown: PriceShown!
  rating: OrderRating
  hasRated: Boolean
  tip: Tip
  tipTransactionStatus: PaymentStatus
  tipTransactionId: ID
  tipTransaction: Transaction
  orderPolicy: OrderPolicy
  serviceFeePolicy: ServiceFeePolicy
  ratingPolicies: [RatingPolicy!]
  tipPolicy: TipPolicy
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  packagingFeeTaxPercentage: Float
  externalId: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateOrderInput {
  id: ID
  version: Int
  userId: ID!
  unitId: ID!
  items: [OrderItemInput!]!
  paymentMode: PaymentModeInput
  archived: Boolean
  takeAway: Boolean
  place: PlaceInput
  paymentIntention: Float
  transactionStatus: PaymentStatus
  unpayCategory: UnpayCategory
  orderMode: OrderMode
  servingMode: ServingMode
  serviceFee: CumulatedPriceInput
  packagingSum: PriceInput
  sumPriceShown: PriceShownInput!
  rating: OrderRatingInput
  hasRated: Boolean
  tip: TipInput
  orderPolicy: OrderPolicy
  serviceFeePolicy: ServiceFeePolicyInput
  ratingPolicies: [RatingPolicyInput!]
  tipPolicy: TipPolicyInput
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  packagingFeeTaxPercentage: Float
  externalId: String
}

input OrderItemInput {
  productId: ID!
  variantId: ID!
  created: Float
  productName: LocalizedItemInput!
  image: String
  quantity: Int!
  statusLog: [StatusLogInput!]!
  variantName: LocalizedItemInput!
  laneId: ID
  allergens: [Allergen]
  configSets: [OrderItemConfigSetInput!]
  productType: String
  externalId: String
  netPackagingFee: Float
  serviceFee: PriceInput
  priceShown: PriceShownInput!
  sumPriceShown: PriceShownInput!
}

input StatusLogInput {
  userId: ID!
  status: OrderStatus!
  ts: Float!
}

input PlaceInput {
  seat: String!
  table: String!
}

input PriceInput {
  currency: String!
  netPrice: Float!
  taxPercentage: Float!
}

input OrderRatingInput {
  key: String!
  value: Int!
}

input PriceShownInput {
  currency: String!
  pricePerUnit: Float!
  priceSum: Float!
  tax: Int!
  taxSum: Float!
}

input OrderItemConfigSetInput {
  productSetId: ID!
  name: LocalizedItemInput!
  type: String!
  items: [OrderItemConfigComponentInput!]!
}

input OrderItemConfigComponentInput {
  productComponentId: ID!
  price: Float!
  name: LocalizedItemInput!
  allergens: [Allergen]
  netPackagingFee: Float
  externalId: String
}

enum OrderPolicy {
  placeOnly
  placeWithPaymentType
  full
}

enum OrderPaymentPolicy {
  prepay
  afterpay
}

enum PaymentStatus {
  waiting_for_payment
  success
  failed
}

enum UnpayCategory {
  staff_meal
  manager_meal
  marketing_promo
  error_cooked
  error_no_cooked
  payment_mode_change
  other
  delivery
  coupon
  event
}

enum OrderStatus {
  none
  placed
  processing
  ready
  served
  failed
  rejected
}

type Place @aws_iam @aws_cognito_user_pools @aws_api_key {
  seat: String!
  table: String!
}

type ProductCategory @aws_iam @aws_cognito_user_pools {
  id: ID!
  chainId: ID!
  description: LocalizedItem
  image: String
  name: LocalizedItem!
  position: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ProductComponent @aws_iam @aws_cognito_user_pools {
  id: ID!
  chainId: ID!
  name: LocalizedItem!
  description: String
  allergens: [Allergen]
  externalId: String
  dirty: Boolean
  soldOut: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ProductComponentSet @aws_iam @aws_cognito_user_pools {
  id: ID!
  externalId: String
  chainId: ID!
  type: String!
  name: LocalizedItem!
  description: String!
  items: [ID!]!
  maxSelection: Int
  supportedServingModes: [ServingMode!]
  dirty: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GeneratedProductConfigComponent @aws_iam @aws_cognito_user_pools {
  productComponentId: ID!
  price: Float!
  position: Int!
  name: LocalizedItem!
  allergens: [Allergen]
  netPackagingFee: Float
  soldOut: Boolean
  externalId: String
}

type GeneratedProductConfigSet @aws_iam @aws_cognito_user_pools {
  productSetId: ID!
  name: LocalizedItem!
  position: Int!
  type: String!
  maxSelection: Int
  items: [GeneratedProductConfigComponent!]!
  supportedServingModes: [ServingMode!]
}

type GeneratedProductCategory @aws_iam @aws_cognito_user_pools {
  id: ID!
  unitId: ID!
  productNum: Int!
  productCategoryId: ID!
  productCategory: ProductCategory!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GeneratedProduct @aws_iam @aws_cognito_user_pools {
  id: ID!
  unitId: ID!
  productCategoryId: ID!
  name: LocalizedItem!
  description: LocalizedItem
  productType: String!
  tax: Int!
  takeawayTax: Int
  position: Int!
  image: String
  variants: [GeneratedProductVariant!]!
  allergens: [Allergen]
  configSets: [GeneratedProductConfigSet]
  supportedServingModes: [ServingMode!]
  soldOut: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GeneratedProductVariant @aws_iam @aws_cognito_user_pools {
  id: ID!
  variantName: LocalizedItem!
  pack: ProductVariantPack
  price: Float!
  netPackagingFee: Float
  position: Int!
  soldOut: Boolean
}

type FavoriteProduct @aws_iam @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  unitId: ID!
  product: GeneratedProduct!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  favoriteProductProductId: ID!
}

type Tip @aws_iam @aws_cognito_user_pools {
  type: TipType!
  value: Float!
}

input TipInput {
  type: TipType!
  value: Float!
}

enum TipType {
  none
  percent
  amount
}

type RatingPolicy @aws_iam @aws_cognito_user_pools @aws_api_key {
  key: String!
  title: LocalizedItem!
  description: LocalizedItem!
  ratings: [RatingPolicyItem!]!
}

type RatingPolicyItem @aws_iam @aws_cognito_user_pools @aws_api_key {
  value: Int!
  text: LocalizedItem!
  icon: String
}

type TipPolicy @aws_iam @aws_cognito_user_pools @aws_api_key {
  title: LocalizedItem
  description: LocalizedItem
  percents: [Float!]!
  minOtherAmount: Float
}

input RatingPolicyInput {
  key: String!
  title: LocalizedItemInput!
  description: LocalizedItemInput!
  ratings: [RatingPolicyItemInput!]!
}

input RatingPolicyItemInput {
  value: Int!
  text: LocalizedItemInput!
  icon: String
}

input TipPolicyInput {
  title: LocalizedItemInput
  description: LocalizedItemInput
  percents: [Float!]!
  minOtherAmount: Float
}

type Unit @aws_iam @aws_cognito_user_pools {
  id: ID!
  groupId: ID!
  chainId: ID!
  lastOrderNum: Int
  isActive: Boolean!
  isAcceptingOrders: Boolean!
  name: String!
  description: LocalizedItem
  address: Address!
  email: String
  phone: String
  paymentModes: [PaymentMode]
  floorMap: FloorMapData
  lanes: [Lane]
  open: DateIntervalOpen
  openingHours: WeeklySchedule
  merchantId: String
  timeZone: String
  pos: Pos
  externalId: String
  supportedServingModes: [ServingMode!]
  supportedOrderModes: [OrderMode!]
  orderPolicy: OrderPolicy
  packagingTaxPercentage: Float
  serviceFeePolicy: ServiceFeePolicy
  ratingPolicies: [RatingPolicy!]
  tipPolicy: TipPolicy
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  orderPaymentPolicy: OrderPaymentPolicy
  location: Location
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type DateIntervalOpen @aws_iam @aws_cognito_user_pools {
  from: String
  to: String
}

type DateInterval @aws_iam @aws_cognito_user_pools @aws_api_key {
  from: String!
  to: String!
}

type CustomDailySchedule @aws_iam @aws_cognito_user_pools {
  date: String!
  from: String!
  to: String!
}

type WeeklySchedule @aws_iam @aws_cognito_user_pools {
  mon: DateInterval
  tue: DateInterval
  wed: DateInterval
  thu: DateInterval
  fri: DateInterval
  sat: DateInterval
  sun: DateInterval
  custom: [CustomDailySchedule]
}

type FloorMapData @aws_iam @aws_cognito_user_pools {
  w: Int!
  h: Int!
  objects: [FloorMapDataObject!]
}

type FloorMapDataObject @aws_iam @aws_cognito_user_pools {
  id: ID!
  t: UnitMapObjectType!
  c: String
  w: Int
  h: Int
  r: Int
  a: Int
  x: Int!
  y: Int!
  tID: String
  sID: String
}

enum UnitMapObjectType {
  table_r
  table_c
  seat_r
  seat_c
  counter
  wall
  label
}

type Lane @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  color: String!
}

type Pos @aws_iam @aws_cognito_user_pools {
  type: PosType!
  rkeeper: RKeeper
}

type RKeeper @aws_iam @aws_cognito_user_pools {
  endpointUri: String!
  rkeeperUsername: String!
  rkeeperPassword: String!
  anyuppUsername: String!
  anyuppPassword: String!
}

input UpdateRKeeperDataInput {
  unitId: ID!
  endpointUri: String
  rkeeperUsername: String
  rkeeperPassword: String
  anyuppUsername: String
  anyuppPassword: String
}

enum PosType {
  anyupp
  rkeeper
}

type GeoUnitList {
  items: [GeoUnit] @aws_iam @aws_cognito_user_pools
}

type OpeningHoursByDate @aws_iam @aws_cognito_user_pools {
  date: String!
  closed: Boolean!
  from: Float
  to: Float @aws_iam @aws_cognito_user_pools
}

type GeoUnit @aws_iam @aws_cognito_user_pools {
  id: ID!
  groupId: ID!
  chainId: ID!
  name: String!
  address: Address!
  style: ChainStyle!
  paymentModes: [PaymentMode]
  distance: Int!
  currency: String!
  isAcceptingOrders: Boolean!
  openingHours: String @deprecated(reason: "The new and better openingHoursNext7 field should be used instead of this static string")
  openingHoursNext7: [OpeningHoursByDate!]!
  supportedServingModes: [ServingMode!]
  supportedOrderModes: [OrderMode!]
  orderPolicy: OrderPolicy
  serviceFeePolicy: ServiceFeePolicy
  ratingPolicies: [RatingPolicy!]
  tipPolicy: TipPolicy
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  unit: Unit
  chain: Chain
  group: Group
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input GetUnitsNearLocationInput {
  location: LocationInput!
}

type User @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String
  email: String
  phone: String
  profileImage: String
  stripeCustomerId: String
  invoiceAddress: UserInvoiceAddress
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Cart @aws_iam @aws_cognito_user_pools {
  id: ID!
  version: Int
  userId: ID!
  unitId: ID!
  takeAway: Boolean @deprecated(reason: "Use `servingMode`.")
  place: Place
  paymentMode: PaymentMode
  items: [OrderItem!]!
  servingMode: ServingMode
  orderMode: OrderMode
  orderPolicy: OrderPolicy
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Transaction @aws_iam @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  user: User!
  orderId: ID!
  type: String
  total: Float
  currency: String
  status: PaymentStatus
  externalTransactionId: String
  invoiceId: ID
  invoice: Invoice
  receiptId: ID
  receipt: Receipt
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  paymentMethodId: String
}

type UserInvoiceAddress @aws_iam @aws_cognito_user_pools {
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
}

enum InvoiceStatus {
  waiting
  success
  failed
}

enum ReceiptStatus {
  waiting
  success
  failed
}

type Invoice @aws_iam @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  orderId: ID!
  transactionId: ID!
  externalInvoiceId: String
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
  pdfUrl: String
  status: InvoiceStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Receipt @aws_iam @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  orderId: ID!
  transactionId: ID!
  externalReceiptId: String
  email: String
  pdfData: String
  status: ReceiptStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input LocationInput {
  lat: Float!
  lon: Float!
}

input AddressInput {
  address: String!
  city: String!
  country: String!
  title: String!
  postalCode: String!
}

input LocalizedItemInput {
  en: String
  de: String
  hu: String
}

input LaneInput {
  id: ID!
  name: String!
  color: String!
}

input PaymentModeInput {
  type: PaymentType!
  caption: String
  method: PaymentMethod!
}

input FloorMapDataInput {
  w: Int!
  h: Int!
  objects: [FloorMapDataObjectInput!]
}

input FloorMapDataObjectInput {
  id: ID!
  t: UnitMapObjectType!
  c: String
  w: Int
  h: Int
  r: Int
  a: Int
  x: Int!
  y: Int!
  tID: String
  sID: String
}

input DateIntervalInput {
  from: String
  to: String
}

input CustomDailyScheduleInput {
  date: String!
  from: String!
  to: String!
}

input WeeklyScheduleInput {
  mon: DateIntervalInput
  tue: DateIntervalInput
  wed: DateIntervalInput
  thu: DateIntervalInput
  fri: DateIntervalInput
  sat: DateIntervalInput
  sun: DateIntervalInput
  custom: [CustomDailyScheduleInput]
}

input PosInput {
  type: PosType!
  rkeeper: RKeeperInput
}

input RKeeperInput {
  endpointUri: String!
  rkeeperUsername: String!
  rkeeperPassword: String!
  anyuppUsername: String!
  anyuppPassword: String!
}

input CreateUnitInput {
  id: ID
  groupId: ID!
  chainId: ID!
  lastOrderNum: Int
  isActive: Boolean!
  isAcceptingOrders: Boolean!
  name: String!
  description: LocalizedItemInput
  address: AddressInput!
  email: String
  phone: String
  paymentModes: [PaymentModeInput]
  floorMap: FloorMapDataInput
  lanes: [LaneInput]
  open: DateIntervalInput
  openingHours: WeeklyScheduleInput
  merchantId: String
  timeZone: String
  pos: PosInput
  externalId: String
  supportedServingModes: [ServingMode!]
  supportedOrderModes: [OrderMode!]
  orderPolicy: OrderPolicy
  packagingTaxPercentage: Float
  serviceFeePolicy: ServiceFeePolicyInput
  ratingPolicies: [RatingPolicyInput!]
  tipPolicy: TipPolicyInput
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  orderPaymentPolicy: OrderPaymentPolicy
  location: LocationInput!
}

input UpdateUnitInput {
  id: ID!
  groupId: ID
  chainId: ID
  lastOrderNum: Int
  isActive: Boolean
  isAcceptingOrders: Boolean
  name: String
  description: LocalizedItemInput
  address: AddressInput
  email: String
  phone: String
  paymentModes: [PaymentModeInput]
  floorMap: FloorMapDataInput
  lanes: [LaneInput]
  open: DateIntervalInput
  openingHours: WeeklyScheduleInput
  merchantId: String
  timeZone: String
  pos: PosInput
  externalId: String
  supportedServingModes: [ServingMode!]
  supportedOrderModes: [OrderMode!]
  orderPolicy: OrderPolicy
  packagingTaxPercentage: Float
  serviceFeePolicy: ServiceFeePolicyInput
  ratingPolicies: [RatingPolicyInput!]
  tipPolicy: TipPolicyInput
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  orderPaymentPolicy: OrderPaymentPolicy
  location: LocationInput
}

type CreateAnonymUserOutput {
  username: String!
  pwd: String!
}

input CreateOrderFromCartInput {
  id: ID!
}

input RegenerateUnitDataInput {
  id: ID!
}

input DeleteAdminUserInput {
  id: ID!
}

input DeleteUnitProductInput {
  id: ID!
}

input RateAndTipOrderInput {
  orderId: ID!
  rating: Int
  tip: TipInput
}

enum GeoSearchableObjectType {
  unit
}

input SearchByRadiusInput {
  location: LocationInput!
  radiusInMeters: Float!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

type GeoSearchConnection {
  items: [String] @aws_iam @aws_api_key
  nextToken: String @aws_iam @aws_api_key
  total: Int @aws_iam @aws_api_key
}

type Query {
  listStripeCards: [StripeCard] @aws_iam @aws_cognito_user_pools
  getUnitsNearLocation(input: GetUnitsNearLocationInput!): GeoUnitList @deprecated(reason: "Search for units only, by searchByRadius") @aws_iam @aws_cognito_user_pools
  searchByRadius(input: SearchByRadiusInput!): GeoSearchConnection @aws_iam @aws_cognito_user_pools
  getChainProduct(id: ID!): ChainProduct @aws_iam @aws_cognito_user_pools
  listChainProducts(filter: ModelChainProductFilterInput, limit: Int, nextToken: String): ModelChainProductConnection @aws_iam @aws_cognito_user_pools
  searchChainProducts(filter: SearchableChainProductFilterInput, sort: [SearchableChainProductSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableChainProductAggregationInput]): SearchableChainProductConnection @aws_iam @aws_cognito_user_pools
  getGroupProduct(id: ID!): GroupProduct @aws_iam @aws_cognito_user_pools
  listGroupProducts(filter: ModelGroupProductFilterInput, limit: Int, nextToken: String): ModelGroupProductConnection @aws_iam @aws_cognito_user_pools
  searchGroupProducts(filter: SearchableGroupProductFilterInput, sort: [SearchableGroupProductSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableGroupProductAggregationInput]): SearchableGroupProductConnection @aws_iam @aws_cognito_user_pools
  getUnitProduct(id: ID!): UnitProduct @aws_iam @aws_cognito_user_pools
  listUnitProducts(filter: ModelUnitProductFilterInput, limit: Int, nextToken: String): ModelUnitProductConnection @aws_iam @aws_cognito_user_pools
  searchUnitProducts(filter: SearchableUnitProductFilterInput, sort: [SearchableUnitProductSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableUnitProductAggregationInput]): SearchableUnitProductConnection @aws_iam @aws_cognito_user_pools
  getAdminUser(id: ID!): AdminUser @aws_iam @aws_cognito_user_pools
  listAdminUsers(filter: ModelAdminUserFilterInput, limit: Int, nextToken: String): ModelAdminUserConnection @aws_iam @aws_cognito_user_pools
  searchAdminUsers(filter: SearchableAdminUserFilterInput, sort: [SearchableAdminUserSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableAdminUserAggregationInput]): SearchableAdminUserConnection @aws_iam @aws_cognito_user_pools
  getChain(id: ID!): Chain @aws_iam @aws_cognito_user_pools
  listChains(filter: ModelChainFilterInput, limit: Int, nextToken: String): ModelChainConnection @aws_iam @aws_cognito_user_pools
  searchChains(filter: SearchableChainFilterInput, sort: [SearchableChainSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableChainAggregationInput]): SearchableChainConnection @aws_iam @aws_cognito_user_pools
  getGroup(id: ID!): Group @aws_iam @aws_cognito_user_pools
  listGroups(filter: ModelGroupFilterInput, limit: Int, nextToken: String): ModelGroupConnection @aws_iam @aws_cognito_user_pools
  searchGroups(filter: SearchableGroupFilterInput, sort: [SearchableGroupSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableGroupAggregationInput]): SearchableGroupConnection @aws_iam @aws_cognito_user_pools
  getOrder(id: ID!): Order @aws_iam @aws_cognito_user_pools
  listOrders(filter: ModelOrderFilterInput, limit: Int, nextToken: String): ModelOrderConnection @aws_iam @aws_cognito_user_pools
  searchOrders(filter: SearchableOrderFilterInput, sort: [SearchableOrderSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableOrderAggregationInput]): SearchableOrderConnection @aws_iam @aws_cognito_user_pools
  getProductCategory(id: ID!): ProductCategory @aws_iam @aws_cognito_user_pools
  listProductCategories(filter: ModelProductCategoryFilterInput, limit: Int, nextToken: String): ModelProductCategoryConnection @aws_iam @aws_cognito_user_pools
  searchProductCategories(filter: SearchableProductCategoryFilterInput, sort: [SearchableProductCategorySortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableProductCategoryAggregationInput]): SearchableProductCategoryConnection @aws_iam @aws_cognito_user_pools
  getProductComponent(id: ID!): ProductComponent @aws_iam @aws_cognito_user_pools
  listProductComponents(filter: ModelProductComponentFilterInput, limit: Int, nextToken: String): ModelProductComponentConnection @aws_iam @aws_cognito_user_pools
  searchProductComponents(filter: SearchableProductComponentFilterInput, sort: [SearchableProductComponentSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableProductComponentAggregationInput]): SearchableProductComponentConnection @aws_iam @aws_cognito_user_pools
  getProductComponentSet(id: ID!): ProductComponentSet @aws_iam @aws_cognito_user_pools
  listProductComponentSets(filter: ModelProductComponentSetFilterInput, limit: Int, nextToken: String): ModelProductComponentSetConnection @aws_iam @aws_cognito_user_pools
  searchProductComponentSets(filter: SearchableProductComponentSetFilterInput, sort: [SearchableProductComponentSetSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableProductComponentSetAggregationInput]): SearchableProductComponentSetConnection @aws_iam @aws_cognito_user_pools
  getGeneratedProductCategory(id: ID!): GeneratedProductCategory @aws_iam @aws_cognito_user_pools
  listGeneratedProductCategories(filter: ModelGeneratedProductCategoryFilterInput, limit: Int, nextToken: String): ModelGeneratedProductCategoryConnection @aws_iam @aws_cognito_user_pools
  searchGeneratedProductCategories(filter: SearchableGeneratedProductCategoryFilterInput, sort: [SearchableGeneratedProductCategorySortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableGeneratedProductCategoryAggregationInput]): SearchableGeneratedProductCategoryConnection @aws_iam @aws_cognito_user_pools
  getGeneratedProduct(id: ID!): GeneratedProduct @aws_iam @aws_cognito_user_pools
  listGeneratedProducts(filter: ModelGeneratedProductFilterInput, limit: Int, nextToken: String): ModelGeneratedProductConnection @aws_iam @aws_cognito_user_pools
  searchGeneratedProducts(filter: SearchableGeneratedProductFilterInput, sort: [SearchableGeneratedProductSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableGeneratedProductAggregationInput]): SearchableGeneratedProductConnection @aws_iam @aws_cognito_user_pools
  getFavoriteProduct(id: ID!): FavoriteProduct @aws_iam @aws_cognito_user_pools
  listFavoriteProducts(filter: ModelFavoriteProductFilterInput, limit: Int, nextToken: String): ModelFavoriteProductConnection @aws_iam @aws_cognito_user_pools
  searchFavoriteProducts(filter: SearchableFavoriteProductFilterInput, sort: [SearchableFavoriteProductSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableFavoriteProductAggregationInput]): SearchableFavoriteProductConnection @aws_iam @aws_cognito_user_pools
  getUnit(id: ID!): Unit @aws_iam @aws_cognito_user_pools
  listUnits(filter: ModelUnitFilterInput, limit: Int, nextToken: String): ModelUnitConnection @aws_iam @aws_cognito_user_pools
  searchUnits(filter: SearchableUnitFilterInput, sort: [SearchableUnitSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableUnitAggregationInput]): SearchableUnitConnection @aws_iam @aws_cognito_user_pools
  getUser(id: ID!): User @aws_iam @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_iam @aws_cognito_user_pools
  searchUsers(filter: SearchableUserFilterInput, sort: [SearchableUserSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableUserAggregationInput]): SearchableUserConnection @aws_iam @aws_cognito_user_pools
  getCart(id: ID!): Cart @aws_iam @aws_cognito_user_pools
  listCarts(filter: ModelCartFilterInput, limit: Int, nextToken: String): ModelCartConnection @aws_iam @aws_cognito_user_pools
  searchCarts(filter: SearchableCartFilterInput, sort: [SearchableCartSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableCartAggregationInput]): SearchableCartConnection @aws_iam @aws_cognito_user_pools
  getTransaction(id: ID!): Transaction @aws_iam @aws_cognito_user_pools
  listTransactions(filter: ModelTransactionFilterInput, limit: Int, nextToken: String): ModelTransactionConnection @aws_iam @aws_cognito_user_pools
  searchTransactions(filter: SearchableTransactionFilterInput, sort: [SearchableTransactionSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableTransactionAggregationInput]): SearchableTransactionConnection @aws_iam @aws_cognito_user_pools
  getInvoice(id: ID!): Invoice @aws_iam @aws_cognito_user_pools
  listInvoices(filter: ModelInvoiceFilterInput, limit: Int, nextToken: String): ModelInvoiceConnection @aws_iam @aws_cognito_user_pools
  searchInvoices(filter: SearchableInvoiceFilterInput, sort: [SearchableInvoiceSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableInvoiceAggregationInput]): SearchableInvoiceConnection @aws_iam @aws_cognito_user_pools
  getReceipt(id: ID!): Receipt @aws_iam @aws_cognito_user_pools
  listReceipts(filter: ModelReceiptFilterInput, limit: Int, nextToken: String): ModelReceiptConnection @aws_iam @aws_cognito_user_pools
  searchReceipts(filter: SearchableReceiptFilterInput, sort: [SearchableReceiptSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableReceiptAggregationInput]): SearchableReceiptConnection @aws_iam @aws_cognito_user_pools
}

type Mutation {
  createUnit(input: CreateUnitInput!): Unit
  updateUnit(input: UpdateUnitInput!): Unit @aws_iam @aws_cognito_user_pools
  updateUnitRKeeperData(input: UpdateRKeeperDataInput!): Unit @aws_iam @aws_cognito_user_pools
  createAdminUser(input: CreateAdminUserInput!): AdminUser @aws_iam @aws_cognito_user_pools
  deleteAdminUser(input: DeleteAdminUserInput!): AdminUser @aws_iam @aws_cognito_user_pools
  createAnonymUser: CreateAnonymUserOutput @aws_iam @aws_api_key
  createOrderFromCart(input: CreateOrderFromCartInput!): ID @aws_iam @aws_cognito_user_pools
  createOrder(input: CreateOrderInput!): Order @aws_iam @aws_cognito_user_pools
  regenerateUnitData(input: RegenerateUnitDataInput!): Boolean! @aws_iam @aws_cognito_user_pools
  startStripePayment(input: StartStripePaymentInput!): StartStripePaymentOutput @aws_cognito_user_pools @aws_iam
  payTipWithStripe(input: PayTipWithStripeInput!): StartStripePaymentOutput @aws_cognito_user_pools @aws_iam
  createStripeCard(input: StripeCardCreateInput!): StripeCard @aws_cognito_user_pools @aws_iam
  updateMyStripeCard(input: StripeCardUpdateInput!): StripeCard @aws_iam @aws_cognito_user_pools
  deleteMyStripeCard(input: StripeCardDeleteInput!): Boolean @aws_cognito_user_pools @aws_iam
  createChainProduct(input: CreateChainProductInput!, condition: ModelChainProductConditionInput): ChainProduct @aws_iam @aws_cognito_user_pools
  updateChainProduct(input: UpdateChainProductInput!, condition: ModelChainProductConditionInput): ChainProduct @aws_iam @aws_cognito_user_pools
  deleteChainProduct(input: DeleteChainProductInput!, condition: ModelChainProductConditionInput): ChainProduct @aws_iam @aws_cognito_user_pools
  createGroupProduct(input: CreateGroupProductInput!, condition: ModelGroupProductConditionInput): GroupProduct @aws_iam @aws_cognito_user_pools
  updateGroupProduct(input: UpdateGroupProductInput!, condition: ModelGroupProductConditionInput): GroupProduct @aws_iam @aws_cognito_user_pools
  deleteGroupProduct(input: DeleteGroupProductInput!, condition: ModelGroupProductConditionInput): GroupProduct @aws_iam @aws_cognito_user_pools
  createUnitProduct(input: CreateUnitProductInput!, condition: ModelUnitProductConditionInput): UnitProduct @aws_iam @aws_cognito_user_pools
  updateUnitProduct(input: UpdateUnitProductInput!, condition: ModelUnitProductConditionInput): UnitProduct @aws_iam @aws_cognito_user_pools
  deleteUnitProduct(input: DeleteUnitProductInput!, condition: ModelUnitProductConditionInput): UnitProduct @aws_iam @aws_cognito_user_pools
  updateAdminUser(input: UpdateAdminUserInput!, condition: ModelAdminUserConditionInput): AdminUser @aws_iam @aws_cognito_user_pools
  createChain(input: CreateChainInput!, condition: ModelChainConditionInput): Chain @aws_iam @aws_cognito_user_pools
  updateChain(input: UpdateChainInput!, condition: ModelChainConditionInput): Chain @aws_iam @aws_cognito_user_pools
  deleteChain(input: DeleteChainInput!, condition: ModelChainConditionInput): Chain @aws_iam @aws_cognito_user_pools
  createGroup(input: CreateGroupInput!, condition: ModelGroupConditionInput): Group @aws_iam @aws_cognito_user_pools
  updateGroup(input: UpdateGroupInput!, condition: ModelGroupConditionInput): Group @aws_iam @aws_cognito_user_pools
  deleteGroup(input: DeleteGroupInput!, condition: ModelGroupConditionInput): Group @aws_iam @aws_cognito_user_pools
  updateOrder(input: UpdateOrderInput!, condition: ModelOrderConditionInput): Order @aws_iam @aws_cognito_user_pools
  deleteOrder(input: DeleteOrderInput!, condition: ModelOrderConditionInput): Order @aws_iam @aws_cognito_user_pools
  createProductCategory(input: CreateProductCategoryInput!, condition: ModelProductCategoryConditionInput): ProductCategory @aws_iam @aws_cognito_user_pools
  updateProductCategory(input: UpdateProductCategoryInput!, condition: ModelProductCategoryConditionInput): ProductCategory @aws_iam @aws_cognito_user_pools
  deleteProductCategory(input: DeleteProductCategoryInput!, condition: ModelProductCategoryConditionInput): ProductCategory @aws_iam @aws_cognito_user_pools
  createProductComponent(input: CreateProductComponentInput!, condition: ModelProductComponentConditionInput): ProductComponent @aws_iam @aws_cognito_user_pools
  updateProductComponent(input: UpdateProductComponentInput!, condition: ModelProductComponentConditionInput): ProductComponent @aws_iam @aws_cognito_user_pools
  deleteProductComponent(input: DeleteProductComponentInput!, condition: ModelProductComponentConditionInput): ProductComponent @aws_iam @aws_cognito_user_pools
  createProductComponentSet(input: CreateProductComponentSetInput!, condition: ModelProductComponentSetConditionInput): ProductComponentSet @aws_iam @aws_cognito_user_pools
  updateProductComponentSet(input: UpdateProductComponentSetInput!, condition: ModelProductComponentSetConditionInput): ProductComponentSet @aws_iam @aws_cognito_user_pools
  deleteProductComponentSet(input: DeleteProductComponentSetInput!, condition: ModelProductComponentSetConditionInput): ProductComponentSet @aws_iam @aws_cognito_user_pools
  createGeneratedProductCategory(input: CreateGeneratedProductCategoryInput!, condition: ModelGeneratedProductCategoryConditionInput): GeneratedProductCategory @aws_iam @aws_cognito_user_pools
  updateGeneratedProductCategory(input: UpdateGeneratedProductCategoryInput!, condition: ModelGeneratedProductCategoryConditionInput): GeneratedProductCategory @aws_iam @aws_cognito_user_pools
  deleteGeneratedProductCategory(input: DeleteGeneratedProductCategoryInput!, condition: ModelGeneratedProductCategoryConditionInput): GeneratedProductCategory @aws_iam @aws_cognito_user_pools
  createGeneratedProduct(input: CreateGeneratedProductInput!, condition: ModelGeneratedProductConditionInput): GeneratedProduct @aws_iam @aws_cognito_user_pools
  updateGeneratedProduct(input: UpdateGeneratedProductInput!, condition: ModelGeneratedProductConditionInput): GeneratedProduct @aws_iam @aws_cognito_user_pools
  deleteGeneratedProduct(input: DeleteGeneratedProductInput!, condition: ModelGeneratedProductConditionInput): GeneratedProduct @aws_iam @aws_cognito_user_pools
  createFavoriteProduct(input: CreateFavoriteProductInput!, condition: ModelFavoriteProductConditionInput): FavoriteProduct @aws_iam @aws_cognito_user_pools
  updateFavoriteProduct(input: UpdateFavoriteProductInput!, condition: ModelFavoriteProductConditionInput): FavoriteProduct @aws_iam @aws_cognito_user_pools
  deleteFavoriteProduct(input: DeleteFavoriteProductInput!, condition: ModelFavoriteProductConditionInput): FavoriteProduct @aws_iam @aws_cognito_user_pools
  deleteUnit(input: DeleteUnitInput!, condition: ModelUnitConditionInput): Unit @aws_iam @aws_cognito_user_pools
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  createCart(input: CreateCartInput!, condition: ModelCartConditionInput): Cart @aws_iam @aws_cognito_user_pools
  updateCart(input: UpdateCartInput!, condition: ModelCartConditionInput): Cart @aws_iam @aws_cognito_user_pools
  deleteCart(input: DeleteCartInput!, condition: ModelCartConditionInput): Cart @aws_iam @aws_cognito_user_pools
  createTransaction(input: CreateTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_iam @aws_cognito_user_pools
  updateTransaction(input: UpdateTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_iam @aws_cognito_user_pools
  deleteTransaction(input: DeleteTransactionInput!, condition: ModelTransactionConditionInput): Transaction @aws_iam @aws_cognito_user_pools
  createInvoice(input: CreateInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice @aws_iam @aws_cognito_user_pools
  updateInvoice(input: UpdateInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice @aws_iam @aws_cognito_user_pools
  deleteInvoice(input: DeleteInvoiceInput!, condition: ModelInvoiceConditionInput): Invoice @aws_iam @aws_cognito_user_pools
  createReceipt(input: CreateReceiptInput!, condition: ModelReceiptConditionInput): Receipt @aws_iam @aws_cognito_user_pools
  updateReceipt(input: UpdateReceiptInput!, condition: ModelReceiptConditionInput): Receipt @aws_iam @aws_cognito_user_pools
  deleteReceipt(input: DeleteReceiptInput!, condition: ModelReceiptConditionInput): Receipt @aws_iam @aws_cognito_user_pools
}

type Subscription {
  onAdminUserChange(id: ID!): AdminUser @aws_subscribe(mutations: ["updateAdminUser"]) @aws_cognito_user_pools
  onAdminUsersChange: AdminUser @aws_subscribe(mutations: ["createAdminUser", "updateAdminUser"]) @aws_cognito_user_pools
  onChainsChange: Chain @aws_subscribe(mutations: ["createChain", "updateChain"]) @aws_cognito_user_pools
  onGroupsChange(chainId: ID!): Group @aws_subscribe(mutations: ["createGroup", "updateGroup"]) @aws_cognito_user_pools
  onUnitsChange(groupId: ID!): Unit @aws_subscribe(mutations: ["createUnit", "updateUnit", "updateUnitRKeeperData"]) @aws_cognito_user_pools
  onProductCategoriesChange(chainId: ID!): ProductCategory @aws_subscribe(mutations: ["createProductCategory", "updateProductCategory"]) @aws_cognito_user_pools
  onProductComponentsChange(chainId: ID!): ProductComponent @aws_subscribe(mutations: ["createProductComponent", "updateProductComponent"]) @aws_cognito_user_pools
  onProductComponentSetsChange(chainId: ID!): ProductComponentSet @aws_subscribe(mutations: ["createProductComponentSet", "updateProductComponentSet"]) @aws_cognito_user_pools
  onChainProductChange(chainId: ID!): ChainProduct @aws_subscribe(mutations: ["createChainProduct", "updateChainProduct"]) @aws_cognito_user_pools
  onGroupProductChange(groupId: ID!): GroupProduct @aws_subscribe(mutations: ["createGroupProduct", "updateGroupProduct"]) @aws_cognito_user_pools
  onUnitProductChange(unitId: ID!): UnitProduct @aws_subscribe(mutations: ["createUnitProduct", "updateUnitProduct"]) @aws_cognito_user_pools
  onGeneratedProductChange(unitId: ID!): GeneratedProduct @aws_subscribe(mutations: ["createGeneratedProduct", "updateGeneratedProduct"]) @aws_cognito_user_pools
  onOrdersChange: Order @aws_subscribe(mutations: ["createOrder", "updateOrder"]) @aws_cognito_user_pools
  onOrdersDelete: Order @aws_subscribe(mutations: ["deleteOrder"]) @aws_cognito_user_pools
  onProductChanged(unitId: String): GeneratedProduct @aws_subscribe(mutations: ["createGeneratedProduct", "updateGeneratedProduct", "deleteGeneratedProduct"]) @aws_cognito_user_pools
  onOrderChanged(userId: String, unitId: String, archived: Boolean): Order @aws_subscribe(mutations: ["createOrder", "updateOrder"]) @aws_cognito_user_pools
  onUnitOrdersChange(unitId: String, archived: Boolean): Order @aws_subscribe(mutations: ["createOrder", "updateOrder"]) @aws_cognito_user_pools
  onCreateChainProduct: ChainProduct @aws_subscribe(mutations: ["createChainProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateChainProduct: ChainProduct @aws_subscribe(mutations: ["updateChainProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteChainProduct: ChainProduct @aws_subscribe(mutations: ["deleteChainProduct"]) @aws_iam @aws_cognito_user_pools
  onCreateGroupProduct: GroupProduct @aws_subscribe(mutations: ["createGroupProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroupProduct: GroupProduct @aws_subscribe(mutations: ["updateGroupProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroupProduct: GroupProduct @aws_subscribe(mutations: ["deleteGroupProduct"]) @aws_iam @aws_cognito_user_pools
  onCreateUnitProduct: UnitProduct @aws_subscribe(mutations: ["createUnitProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateUnitProduct: UnitProduct @aws_subscribe(mutations: ["updateUnitProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteUnitProduct: UnitProduct @aws_subscribe(mutations: ["deleteUnitProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateAdminUser: AdminUser @aws_subscribe(mutations: ["updateAdminUser"]) @aws_iam @aws_cognito_user_pools
  onCreateChain: Chain @aws_subscribe(mutations: ["createChain"]) @aws_iam @aws_cognito_user_pools
  onUpdateChain: Chain @aws_subscribe(mutations: ["updateChain"]) @aws_iam @aws_cognito_user_pools
  onDeleteChain: Chain @aws_subscribe(mutations: ["deleteChain"]) @aws_iam @aws_cognito_user_pools
  onCreateGroup: Group @aws_subscribe(mutations: ["createGroup"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroup: Group @aws_subscribe(mutations: ["updateGroup"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroup: Group @aws_subscribe(mutations: ["deleteGroup"]) @aws_iam @aws_cognito_user_pools
  onUpdateOrder: Order @aws_subscribe(mutations: ["updateOrder"]) @aws_iam @aws_cognito_user_pools
  onDeleteOrder: Order @aws_subscribe(mutations: ["deleteOrder"]) @aws_iam @aws_cognito_user_pools
  onCreateProductCategory: ProductCategory @aws_subscribe(mutations: ["createProductCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateProductCategory: ProductCategory @aws_subscribe(mutations: ["updateProductCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteProductCategory: ProductCategory @aws_subscribe(mutations: ["deleteProductCategory"]) @aws_iam @aws_cognito_user_pools
  onCreateProductComponent: ProductComponent @aws_subscribe(mutations: ["createProductComponent"]) @aws_iam @aws_cognito_user_pools
  onUpdateProductComponent: ProductComponent @aws_subscribe(mutations: ["updateProductComponent"]) @aws_iam @aws_cognito_user_pools
  onDeleteProductComponent: ProductComponent @aws_subscribe(mutations: ["deleteProductComponent"]) @aws_iam @aws_cognito_user_pools
  onCreateProductComponentSet: ProductComponentSet @aws_subscribe(mutations: ["createProductComponentSet"]) @aws_iam @aws_cognito_user_pools
  onUpdateProductComponentSet: ProductComponentSet @aws_subscribe(mutations: ["updateProductComponentSet"]) @aws_iam @aws_cognito_user_pools
  onDeleteProductComponentSet: ProductComponentSet @aws_subscribe(mutations: ["deleteProductComponentSet"]) @aws_iam @aws_cognito_user_pools
  onCreateGeneratedProductCategory: GeneratedProductCategory @aws_subscribe(mutations: ["createGeneratedProductCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateGeneratedProductCategory: GeneratedProductCategory @aws_subscribe(mutations: ["updateGeneratedProductCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteGeneratedProductCategory: GeneratedProductCategory @aws_subscribe(mutations: ["deleteGeneratedProductCategory"]) @aws_iam @aws_cognito_user_pools
  onCreateGeneratedProduct: GeneratedProduct @aws_subscribe(mutations: ["createGeneratedProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateGeneratedProduct: GeneratedProduct @aws_subscribe(mutations: ["updateGeneratedProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteGeneratedProduct: GeneratedProduct @aws_subscribe(mutations: ["deleteGeneratedProduct"]) @aws_iam @aws_cognito_user_pools
  onCreateFavoriteProduct: FavoriteProduct @aws_subscribe(mutations: ["createFavoriteProduct"]) @aws_iam @aws_cognito_user_pools
  onUpdateFavoriteProduct: FavoriteProduct @aws_subscribe(mutations: ["updateFavoriteProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteFavoriteProduct: FavoriteProduct @aws_subscribe(mutations: ["deleteFavoriteProduct"]) @aws_iam @aws_cognito_user_pools
  onDeleteUnit: Unit @aws_subscribe(mutations: ["deleteUnit"]) @aws_iam @aws_cognito_user_pools
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_iam @aws_cognito_user_pools
  onCreateCart: Cart @aws_subscribe(mutations: ["createCart"]) @aws_iam @aws_cognito_user_pools
  onUpdateCart: Cart @aws_subscribe(mutations: ["updateCart"]) @aws_iam @aws_cognito_user_pools
  onDeleteCart: Cart @aws_subscribe(mutations: ["deleteCart"]) @aws_iam @aws_cognito_user_pools
  onCreateTransaction: Transaction @aws_subscribe(mutations: ["createTransaction"]) @aws_iam @aws_cognito_user_pools
  onUpdateTransaction: Transaction @aws_subscribe(mutations: ["updateTransaction"]) @aws_iam @aws_cognito_user_pools
  onDeleteTransaction: Transaction @aws_subscribe(mutations: ["deleteTransaction"]) @aws_iam @aws_cognito_user_pools
  onCreateInvoice: Invoice @aws_subscribe(mutations: ["createInvoice"]) @aws_iam @aws_cognito_user_pools
  onUpdateInvoice: Invoice @aws_subscribe(mutations: ["updateInvoice"]) @aws_iam @aws_cognito_user_pools
  onDeleteInvoice: Invoice @aws_subscribe(mutations: ["deleteInvoice"]) @aws_iam @aws_cognito_user_pools
  onCreateReceipt: Receipt @aws_subscribe(mutations: ["createReceipt"]) @aws_iam @aws_cognito_user_pools
  onUpdateReceipt: Receipt @aws_subscribe(mutations: ["updateReceipt"]) @aws_iam @aws_cognito_user_pools
  onDeleteReceipt: Receipt @aws_subscribe(mutations: ["deleteReceipt"]) @aws_iam @aws_cognito_user_pools
}

type SearchableChainProductConnection @aws_iam @aws_cognito_user_pools {
  items: [ChainProduct]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableAggregateResult @aws_iam @aws_cognito_user_pools {
  name: String!
  result: SearchableAggregateGenericResult
}

type SearchableAggregateScalarResult @aws_iam @aws_cognito_user_pools {
  value: Float!
}

type SearchableAggregateBucketResult @aws_iam @aws_cognito_user_pools {
  buckets: [SearchableAggregateBucketResultItem]
}

type SearchableAggregateBucketResultItem @aws_iam @aws_cognito_user_pools {
  key: String!
  doc_count: Int!
}

union SearchableAggregateGenericResult = SearchableAggregateScalarResult | SearchableAggregateBucketResult

type SearchableGroupProductConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupProduct]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableUnitProductConnection @aws_iam @aws_cognito_user_pools {
  items: [UnitProduct]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableAdminUserConnection @aws_iam @aws_cognito_user_pools {
  items: [AdminUser]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableChainConnection @aws_iam @aws_cognito_user_pools {
  items: [Chain]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableGroupConnection @aws_iam @aws_cognito_user_pools {
  items: [Group]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableOrderConnection @aws_iam @aws_cognito_user_pools {
  items: [Order]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableProductCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductCategory]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableProductComponentConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductComponent]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableProductComponentSetConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductComponentSet]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableGeneratedProductCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [GeneratedProductCategory]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableGeneratedProductConnection @aws_iam @aws_cognito_user_pools {
  items: [GeneratedProduct]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableFavoriteProductConnection @aws_iam @aws_cognito_user_pools {
  items: [FavoriteProduct]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableUnitConnection @aws_iam @aws_cognito_user_pools {
  items: [Unit]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableCartConnection @aws_iam @aws_cognito_user_pools {
  items: [Cart]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableTransactionConnection @aws_iam @aws_cognito_user_pools {
  items: [Transaction]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableInvoiceConnection @aws_iam @aws_cognito_user_pools {
  items: [Invoice]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableReceiptConnection @aws_iam @aws_cognito_user_pools {
  items: [Receipt]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ProductVariantInput {
  id: ID
  variantName: LocalizedItemInput!
  pack: ProductVariantPackInput
  refGroupPrice: Float
  isAvailable: Boolean!
  price: Float!
  availabilities: [AvailabilityInput]
  position: Int!
  netPackagingFee: Float
  soldOut: Boolean
}

input ProductConfigSetInput {
  productSetId: ID!
  items: [ProductConfigComponentInput!]!
  position: Int!
}

input ProductConfigComponentInput {
  productComponentId: ID!
  refGroupPrice: Float!
  price: Float!
  position: Int!
  externalId: String
  netPackagingFee: Float
}

type ModelChainProductConnection @aws_iam @aws_cognito_user_pools {
  items: [ChainProduct]!
  nextToken: String
}

input ModelAllergenListInput {
  eq: [Allergen]
  ne: [Allergen]
  contains: Allergen
  notContains: Allergen
}

input ModelChainProductFilterInput {
  id: ModelIDInput
  chainId: ModelIDInput
  productCategoryId: ModelIDInput
  productType: ModelStringInput
  isVisible: ModelBooleanInput
  image: ModelStringInput
  allergens: ModelAllergenListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelChainProductFilterInput]
  or: [ModelChainProductFilterInput]
  not: ModelChainProductFilterInput
}

input ModelChainProductConditionInput {
  chainId: ModelIDInput
  productCategoryId: ModelIDInput
  productType: ModelStringInput
  isVisible: ModelBooleanInput
  image: ModelStringInput
  allergens: ModelAllergenListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelChainProductConditionInput]
  or: [ModelChainProductConditionInput]
  not: ModelChainProductConditionInput
}

input CreateChainProductInput {
  id: ID
  chainId: ID!
  name: LocalizedItemInput!
  description: LocalizedItemInput
  productCategoryId: ID!
  productType: String!
  isVisible: Boolean!
  image: String
  variants: [ProductVariantInput]
  allergens: [Allergen]
  configSets: [ProductConfigSetInput]
  externalId: String
  dirty: Boolean
}

input UpdateChainProductInput {
  id: ID!
  chainId: ID
  name: LocalizedItemInput
  description: LocalizedItemInput
  productCategoryId: ID
  productType: String
  isVisible: Boolean
  image: String
  variants: [ProductVariantInput]
  allergens: [Allergen]
  configSets: [ProductConfigSetInput]
  externalId: String
  dirty: Boolean
}

input DeleteChainProductInput {
  id: ID!
}

type ModelGroupProductConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupProduct]!
  nextToken: String
}

input ModelGroupProductFilterInput {
  id: ModelIDInput
  parentId: ModelIDInput
  chainId: ModelIDInput
  groupId: ModelIDInput
  isVisible: ModelBooleanInput
  tax: ModelIntInput
  takeawayTax: ModelIntInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelGroupProductFilterInput]
  or: [ModelGroupProductFilterInput]
  not: ModelGroupProductFilterInput
}

input ModelGroupProductConditionInput {
  parentId: ModelIDInput
  chainId: ModelIDInput
  groupId: ModelIDInput
  isVisible: ModelBooleanInput
  tax: ModelIntInput
  takeawayTax: ModelIntInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelGroupProductConditionInput]
  or: [ModelGroupProductConditionInput]
  not: ModelGroupProductConditionInput
}

input CreateGroupProductInput {
  id: ID
  parentId: ID!
  chainId: ID!
  groupId: ID!
  isVisible: Boolean!
  tax: Int!
  takeawayTax: Int
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  externalId: String
  dirty: Boolean
}

input UpdateGroupProductInput {
  id: ID!
  parentId: ID
  chainId: ID
  groupId: ID
  isVisible: Boolean
  tax: Int
  takeawayTax: Int
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  externalId: String
  dirty: Boolean
}

input DeleteGroupProductInput {
  id: ID!
}

type ModelUnitProductConnection @aws_iam @aws_cognito_user_pools {
  items: [UnitProduct]!
  nextToken: String
}

input ModelServingModeListInput {
  eq: [ServingMode]
  ne: [ServingMode]
  contains: ServingMode
  notContains: ServingMode
}

input ModelUnitProductFilterInput {
  id: ModelIDInput
  parentId: ModelIDInput
  chainId: ModelIDInput
  groupId: ModelIDInput
  unitId: ModelIDInput
  isVisible: ModelBooleanInput
  takeaway: ModelBooleanInput
  laneId: ModelIDInput
  position: ModelIntInput
  supportedServingModes: ModelServingModeListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelUnitProductFilterInput]
  or: [ModelUnitProductFilterInput]
  not: ModelUnitProductFilterInput
}

input ModelUnitProductConditionInput {
  parentId: ModelIDInput
  chainId: ModelIDInput
  groupId: ModelIDInput
  unitId: ModelIDInput
  isVisible: ModelBooleanInput
  takeaway: ModelBooleanInput
  laneId: ModelIDInput
  position: ModelIntInput
  supportedServingModes: ModelServingModeListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  and: [ModelUnitProductConditionInput]
  or: [ModelUnitProductConditionInput]
  not: ModelUnitProductConditionInput
}

input CreateUnitProductInput {
  id: ID
  parentId: ID!
  chainId: ID!
  groupId: ID!
  unitId: ID!
  isVisible: Boolean!
  takeaway: Boolean
  laneId: ID
  position: Int!
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  supportedServingModes: [ServingMode!]
  externalId: String
  dirty: Boolean
}

input UpdateUnitProductInput {
  id: ID!
  parentId: ID
  chainId: ID
  groupId: ID
  unitId: ID
  isVisible: Boolean
  takeaway: Boolean
  laneId: ID
  position: Int
  variants: [ProductVariantInput]
  configSets: [ProductConfigSetInput]
  supportedServingModes: [ServingMode!]
  externalId: String
  dirty: Boolean
}

input CardChecksInput {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

input BillingDetailsInput {
  email: String
  name: String
  phone: String
  address: BillingAddressInput
}

input BillingAddressInput {
  city: String
  country: String
  line1: String
  line2: String
  postal_code: String
  state: String
}

type ModelAdminUserConnection @aws_iam @aws_cognito_user_pools {
  items: [AdminUser]!
  nextToken: String
}

input ModelAdminUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  profileImage: ModelStringInput
  and: [ModelAdminUserFilterInput]
  or: [ModelAdminUserFilterInput]
  not: ModelAdminUserFilterInput
}

input ModelAdminUserConditionInput {
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  profileImage: ModelStringInput
  and: [ModelAdminUserConditionInput]
  or: [ModelAdminUserConditionInput]
  not: ModelAdminUserConditionInput
}

input ChainStyleInput {
  colors: ChainStyleColorsInput!
  images: ChainStyleImagesInput
}

input ChainStyleColorsInput {
  backgroundLight: String
  backgroundDark: String
  borderLight: String
  borderDark: String
  disabled: String
  indicator: String
  textLight: String
  textDark: String
  primary: String
  secondary: String
  button: String
  buttonText: String
  icon: String
  highlight: String
}

input ChainStyleImagesInput {
  header: String
  logo: String
}

type ModelChainConnection @aws_iam @aws_cognito_user_pools {
  items: [Chain]!
  nextToken: String
}

input ModelChainFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  isActive: ModelBooleanInput
  email: ModelStringInput
  phone: ModelStringInput
  and: [ModelChainFilterInput]
  or: [ModelChainFilterInput]
  not: ModelChainFilterInput
}

input ModelChainConditionInput {
  name: ModelStringInput
  isActive: ModelBooleanInput
  email: ModelStringInput
  phone: ModelStringInput
  and: [ModelChainConditionInput]
  or: [ModelChainConditionInput]
  not: ModelChainConditionInput
}

input CreateChainInput {
  id: ID
  name: String!
  description: LocalizedItemInput
  style: ChainStyleInput!
  isActive: Boolean
  address: AddressInput
  email: String
  phone: String
}

input UpdateChainInput {
  id: ID!
  name: String
  description: LocalizedItemInput
  style: ChainStyleInput
  isActive: Boolean
  address: AddressInput
  email: String
  phone: String
}

input DeleteChainInput {
  id: ID!
}

type ModelGroupConnection @aws_iam @aws_cognito_user_pools {
  items: [Group]!
  nextToken: String
}

input ModelGroupFilterInput {
  id: ModelIDInput
  chainId: ModelIDInput
  name: ModelStringInput
  currency: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  and: [ModelGroupFilterInput]
  or: [ModelGroupFilterInput]
  not: ModelGroupFilterInput
}

input ModelGroupConditionInput {
  chainId: ModelIDInput
  name: ModelStringInput
  currency: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  and: [ModelGroupConditionInput]
  or: [ModelGroupConditionInput]
  not: ModelGroupConditionInput
}

input CreateGroupInput {
  id: ID
  chainId: ID!
  name: String!
  description: LocalizedItemInput
  currency: String!
  address: AddressInput
  email: String
  phone: String
}

input UpdateGroupInput {
  id: ID!
  chainId: ID
  name: String
  description: LocalizedItemInput
  currency: String
  address: AddressInput
  email: String
  phone: String
}

input DeleteGroupInput {
  id: ID!
}

type ModelOrderConnection @aws_iam @aws_cognito_user_pools {
  items: [Order]!
  nextToken: String
}

input ModelPaymentStatusInput {
  eq: PaymentStatus
  ne: PaymentStatus
}

input ModelUnpayCategoryInput {
  eq: UnpayCategory
  ne: UnpayCategory
}

input ModelOrderModeInput {
  eq: OrderMode
  ne: OrderMode
}

input ModelServingModeInput {
  eq: ServingMode
  ne: ServingMode
}

input ModelOrderPolicyInput {
  eq: OrderPolicy
  ne: OrderPolicy
}

input ModelSoldOutVisibilityPolicyInput {
  eq: SoldOutVisibilityPolicy
  ne: SoldOutVisibilityPolicy
}

input ModelOrderFilterInput {
  id: ModelIDInput
  version: ModelIntInput
  userId: ModelIDInput
  unitId: ModelIDInput
  orderNum: ModelStringInput
  archived: ModelBooleanInput
  paymentIntention: ModelFloatInput
  transactionStatus: ModelPaymentStatusInput
  transactionId: ModelIDInput
  unpayCategory: ModelUnpayCategoryInput
  orderMode: ModelOrderModeInput
  servingMode: ModelServingModeInput
  hasRated: ModelBooleanInput
  tipTransactionStatus: ModelPaymentStatusInput
  tipTransactionId: ModelIDInput
  orderPolicy: ModelOrderPolicyInput
  soldOutVisibilityPolicy: ModelSoldOutVisibilityPolicyInput
  packagingFeeTaxPercentage: ModelFloatInput
  externalId: ModelStringInput
  and: [ModelOrderFilterInput]
  or: [ModelOrderFilterInput]
  not: ModelOrderFilterInput
}

input ModelOrderConditionInput {
  version: ModelIntInput
  userId: ModelIDInput
  unitId: ModelIDInput
  orderNum: ModelStringInput
  archived: ModelBooleanInput
  paymentIntention: ModelFloatInput
  transactionStatus: ModelPaymentStatusInput
  transactionId: ModelIDInput
  unpayCategory: ModelUnpayCategoryInput
  orderMode: ModelOrderModeInput
  servingMode: ModelServingModeInput
  hasRated: ModelBooleanInput
  tipTransactionStatus: ModelPaymentStatusInput
  tipTransactionId: ModelIDInput
  orderPolicy: ModelOrderPolicyInput
  soldOutVisibilityPolicy: ModelSoldOutVisibilityPolicyInput
  packagingFeeTaxPercentage: ModelFloatInput
  externalId: ModelStringInput
  and: [ModelOrderConditionInput]
  or: [ModelOrderConditionInput]
  not: ModelOrderConditionInput
}

input DeleteOrderInput {
  id: ID!
}

input UpdateOrderInput {
  id: ID!
  version: Int
  userId: ID
  unitId: ID
  orderNum: String
  items: [OrderItemInput!]
  paymentMode: PaymentModeInput
  statusLog: [StatusLogInput!]
  archived: Boolean
  place: PlaceInput
  paymentIntention: Float
  transactionStatus: PaymentStatus
  transactionId: ID
  unpayCategory: UnpayCategory
  orderMode: OrderMode
  servingMode: ServingMode
  serviceFee: CumulatedPriceInput
  packagingSum: PriceInput
  sumPriceShown: PriceShownInput
  rating: OrderRatingInput
  hasRated: Boolean
  tip: TipInput
  tipTransactionStatus: PaymentStatus
  tipTransactionId: ID
  orderPolicy: OrderPolicy
  serviceFeePolicy: ServiceFeePolicyInput
  ratingPolicies: [RatingPolicyInput!]
  tipPolicy: TipPolicyInput
  soldOutVisibilityPolicy: SoldOutVisibilityPolicy
  packagingFeeTaxPercentage: Float
  externalId: String
}

type ModelProductCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductCategory]!
  nextToken: String
}

input ModelProductCategoryFilterInput {
  id: ModelIDInput
  chainId: ModelIDInput
  image: ModelStringInput
  position: ModelIntInput
  and: [ModelProductCategoryFilterInput]
  or: [ModelProductCategoryFilterInput]
  not: ModelProductCategoryFilterInput
}

input ModelProductCategoryConditionInput {
  chainId: ModelIDInput
  image: ModelStringInput
  position: ModelIntInput
  and: [ModelProductCategoryConditionInput]
  or: [ModelProductCategoryConditionInput]
  not: ModelProductCategoryConditionInput
}

input CreateProductCategoryInput {
  id: ID
  chainId: ID!
  description: LocalizedItemInput
  image: String
  name: LocalizedItemInput!
  position: Int!
}

input UpdateProductCategoryInput {
  id: ID!
  chainId: ID
  description: LocalizedItemInput
  image: String
  name: LocalizedItemInput
  position: Int
}

input DeleteProductCategoryInput {
  id: ID!
}

type ModelProductComponentConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductComponent]!
  nextToken: String
}

input ModelProductComponentFilterInput {
  id: ModelIDInput
  chainId: ModelIDInput
  description: ModelStringInput
  allergens: ModelAllergenListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  soldOut: ModelBooleanInput
  and: [ModelProductComponentFilterInput]
  or: [ModelProductComponentFilterInput]
  not: ModelProductComponentFilterInput
}

input ModelProductComponentConditionInput {
  chainId: ModelIDInput
  description: ModelStringInput
  allergens: ModelAllergenListInput
  externalId: ModelStringInput
  dirty: ModelBooleanInput
  soldOut: ModelBooleanInput
  and: [ModelProductComponentConditionInput]
  or: [ModelProductComponentConditionInput]
  not: ModelProductComponentConditionInput
}

input CreateProductComponentInput {
  id: ID
  chainId: ID!
  name: LocalizedItemInput!
  description: String
  allergens: [Allergen]
  externalId: String
  dirty: Boolean
  soldOut: Boolean
}

input UpdateProductComponentInput {
  id: ID!
  chainId: ID
  name: LocalizedItemInput
  description: String
  allergens: [Allergen]
  externalId: String
  dirty: Boolean
  soldOut: Boolean
}

input DeleteProductComponentInput {
  id: ID!
}

type ModelProductComponentSetConnection @aws_iam @aws_cognito_user_pools {
  items: [ProductComponentSet]!
  nextToken: String
}

input ModelProductComponentSetFilterInput {
  id: ModelIDInput
  externalId: ModelStringInput
  chainId: ModelIDInput
  type: ModelStringInput
  description: ModelStringInput
  items: ModelIDInput
  maxSelection: ModelIntInput
  supportedServingModes: ModelServingModeListInput
  dirty: ModelBooleanInput
  and: [ModelProductComponentSetFilterInput]
  or: [ModelProductComponentSetFilterInput]
  not: ModelProductComponentSetFilterInput
}

input ModelProductComponentSetConditionInput {
  externalId: ModelStringInput
  chainId: ModelIDInput
  type: ModelStringInput
  description: ModelStringInput
  items: ModelIDInput
  maxSelection: ModelIntInput
  supportedServingModes: ModelServingModeListInput
  dirty: ModelBooleanInput
  and: [ModelProductComponentSetConditionInput]
  or: [ModelProductComponentSetConditionInput]
  not: ModelProductComponentSetConditionInput
}

input CreateProductComponentSetInput {
  id: ID
  externalId: String
  chainId: ID!
  type: String!
  name: LocalizedItemInput!
  description: String!
  items: [ID!]!
  maxSelection: Int
  supportedServingModes: [ServingMode!]
  dirty: Boolean
}

input UpdateProductComponentSetInput {
  id: ID!
  externalId: String
  chainId: ID
  type: String
  name: LocalizedItemInput
  description: String
  items: [ID!]
  maxSelection: Int
  supportedServingModes: [ServingMode!]
  dirty: Boolean
}

input DeleteProductComponentSetInput {
  id: ID!
}

type ModelGeneratedProductCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [GeneratedProductCategory]!
  nextToken: String
}

input ModelGeneratedProductCategoryFilterInput {
  id: ModelIDInput
  unitId: ModelIDInput
  productNum: ModelIntInput
  productCategoryId: ModelIDInput
  and: [ModelGeneratedProductCategoryFilterInput]
  or: [ModelGeneratedProductCategoryFilterInput]
  not: ModelGeneratedProductCategoryFilterInput
}

input ModelGeneratedProductCategoryConditionInput {
  unitId: ModelIDInput
  productNum: ModelIntInput
  productCategoryId: ModelIDInput
  and: [ModelGeneratedProductCategoryConditionInput]
  or: [ModelGeneratedProductCategoryConditionInput]
  not: ModelGeneratedProductCategoryConditionInput
}

input CreateGeneratedProductCategoryInput {
  id: ID
  unitId: ID!
  productNum: Int!
  productCategoryId: ID!
}

input UpdateGeneratedProductCategoryInput {
  id: ID!
  unitId: ID
  productNum: Int
  productCategoryId: ID
}

input DeleteGeneratedProductCategoryInput {
  id: ID!
}

input GeneratedProductVariantInput {
  id: ID
  variantName: LocalizedItemInput!
  pack: ProductVariantPackInput
  price: Float!
  netPackagingFee: Float
  position: Int!
  soldOut: Boolean
}

input GeneratedProductConfigSetInput {
  productSetId: ID!
  name: LocalizedItemInput!
  position: Int!
  type: String!
  maxSelection: Int
  items: [GeneratedProductConfigComponentInput!]!
  supportedServingModes: [ServingMode!]
}

input GeneratedProductConfigComponentInput {
  productComponentId: ID!
  price: Float!
  position: Int!
  name: LocalizedItemInput!
  allergens: [Allergen]
  netPackagingFee: Float
  soldOut: Boolean
  externalId: String
}

type ModelGeneratedProductConnection @aws_iam @aws_cognito_user_pools {
  items: [GeneratedProduct]!
  nextToken: String
}

input ModelGeneratedProductFilterInput {
  id: ModelIDInput
  unitId: ModelIDInput
  productCategoryId: ModelIDInput
  productType: ModelStringInput
  tax: ModelIntInput
  takeawayTax: ModelIntInput
  position: ModelIntInput
  image: ModelStringInput
  allergens: ModelAllergenListInput
  supportedServingModes: ModelServingModeListInput
  soldOut: ModelBooleanInput
  and: [ModelGeneratedProductFilterInput]
  or: [ModelGeneratedProductFilterInput]
  not: ModelGeneratedProductFilterInput
}

input ModelGeneratedProductConditionInput {
  unitId: ModelIDInput
  productCategoryId: ModelIDInput
  productType: ModelStringInput
  tax: ModelIntInput
  takeawayTax: ModelIntInput
  position: ModelIntInput
  image: ModelStringInput
  allergens: ModelAllergenListInput
  supportedServingModes: ModelServingModeListInput
  soldOut: ModelBooleanInput
  and: [ModelGeneratedProductConditionInput]
  or: [ModelGeneratedProductConditionInput]
  not: ModelGeneratedProductConditionInput
}

input CreateGeneratedProductInput {
  id: ID
  unitId: ID!
  productCategoryId: ID!
  name: LocalizedItemInput!
  description: LocalizedItemInput
  productType: String!
  tax: Int!
  takeawayTax: Int
  position: Int!
  image: String
  variants: [GeneratedProductVariantInput!]!
  allergens: [Allergen]
  configSets: [GeneratedProductConfigSetInput]
  supportedServingModes: [ServingMode!]
  soldOut: Boolean
}

input UpdateGeneratedProductInput {
  id: ID!
  unitId: ID
  productCategoryId: ID
  name: LocalizedItemInput
  description: LocalizedItemInput
  productType: String
  tax: Int
  takeawayTax: Int
  position: Int
  image: String
  variants: [GeneratedProductVariantInput!]
  allergens: [Allergen]
  configSets: [GeneratedProductConfigSetInput]
  supportedServingModes: [ServingMode!]
  soldOut: Boolean
}

input DeleteGeneratedProductInput {
  id: ID!
}

type ModelFavoriteProductConnection @aws_iam @aws_cognito_user_pools {
  items: [FavoriteProduct]!
  nextToken: String
}

input ModelFavoriteProductFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  unitId: ModelIDInput
  and: [ModelFavoriteProductFilterInput]
  or: [ModelFavoriteProductFilterInput]
  not: ModelFavoriteProductFilterInput
  favoriteProductProductId: ModelIDInput
}

input ModelFavoriteProductConditionInput {
  userId: ModelIDInput
  unitId: ModelIDInput
  and: [ModelFavoriteProductConditionInput]
  or: [ModelFavoriteProductConditionInput]
  not: ModelFavoriteProductConditionInput
  favoriteProductProductId: ModelIDInput
}

input CreateFavoriteProductInput {
  id: ID
  userId: ID!
  unitId: ID!
  favoriteProductProductId: ID!
}

input UpdateFavoriteProductInput {
  id: ID!
  userId: ID
  unitId: ID
  favoriteProductProductId: ID
}

input DeleteFavoriteProductInput {
  id: ID!
}

input DateIntervalOpenInput {
  from: String
  to: String
}

type ModelUnitConnection @aws_iam @aws_cognito_user_pools {
  items: [Unit]!
  nextToken: String
}

input ModelOrderModeListInput {
  eq: [OrderMode]
  ne: [OrderMode]
  contains: OrderMode
  notContains: OrderMode
}

input ModelOrderPaymentPolicyInput {
  eq: OrderPaymentPolicy
  ne: OrderPaymentPolicy
}

input ModelUnitFilterInput {
  id: ModelIDInput
  groupId: ModelIDInput
  chainId: ModelIDInput
  lastOrderNum: ModelIntInput
  isActive: ModelBooleanInput
  isAcceptingOrders: ModelBooleanInput
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  merchantId: ModelStringInput
  timeZone: ModelStringInput
  externalId: ModelStringInput
  supportedServingModes: ModelServingModeListInput
  supportedOrderModes: ModelOrderModeListInput
  orderPolicy: ModelOrderPolicyInput
  packagingTaxPercentage: ModelFloatInput
  soldOutVisibilityPolicy: ModelSoldOutVisibilityPolicyInput
  orderPaymentPolicy: ModelOrderPaymentPolicyInput
  and: [ModelUnitFilterInput]
  or: [ModelUnitFilterInput]
  not: ModelUnitFilterInput
}

input ModelUnitConditionInput {
  groupId: ModelIDInput
  chainId: ModelIDInput
  lastOrderNum: ModelIntInput
  isActive: ModelBooleanInput
  isAcceptingOrders: ModelBooleanInput
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  merchantId: ModelStringInput
  timeZone: ModelStringInput
  externalId: ModelStringInput
  supportedServingModes: ModelServingModeListInput
  supportedOrderModes: ModelOrderModeListInput
  orderPolicy: ModelOrderPolicyInput
  packagingTaxPercentage: ModelFloatInput
  soldOutVisibilityPolicy: ModelSoldOutVisibilityPolicyInput
  orderPaymentPolicy: ModelOrderPaymentPolicyInput
  and: [ModelUnitConditionInput]
  or: [ModelUnitConditionInput]
  not: ModelUnitConditionInput
}

input DeleteUnitInput {
  id: ID!
}

input OpeningHoursByDateInput {
  date: String!
  closed: Boolean!
  from: Float
  to: Float
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  profileImage: ModelStringInput
  stripeCustomerId: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  profileImage: ModelStringInput
  stripeCustomerId: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  name: String
  email: String
  phone: String
  profileImage: String
  stripeCustomerId: String
  invoiceAddress: UserInvoiceAddressInput
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  phone: String
  profileImage: String
  stripeCustomerId: String
  invoiceAddress: UserInvoiceAddressInput
}

input DeleteUserInput {
  id: ID!
}

type ModelCartConnection @aws_iam @aws_cognito_user_pools {
  items: [Cart]!
  nextToken: String
}

input ModelCartFilterInput {
  id: ModelIDInput
  version: ModelIntInput
  userId: ModelIDInput
  unitId: ModelIDInput
  takeAway: ModelBooleanInput
  servingMode: ModelServingModeInput
  orderMode: ModelOrderModeInput
  orderPolicy: ModelOrderPolicyInput
  and: [ModelCartFilterInput]
  or: [ModelCartFilterInput]
  not: ModelCartFilterInput
}

input ModelCartConditionInput {
  version: ModelIntInput
  userId: ModelIDInput
  unitId: ModelIDInput
  takeAway: ModelBooleanInput
  servingMode: ModelServingModeInput
  orderMode: ModelOrderModeInput
  orderPolicy: ModelOrderPolicyInput
  and: [ModelCartConditionInput]
  or: [ModelCartConditionInput]
  not: ModelCartConditionInput
}

input CreateCartInput {
  id: ID
  version: Int
  userId: ID!
  unitId: ID!
  takeAway: Boolean
  place: PlaceInput
  paymentMode: PaymentModeInput
  items: [OrderItemInput!]!
  servingMode: ServingMode
  orderMode: OrderMode
  orderPolicy: OrderPolicy
}

input UpdateCartInput {
  id: ID!
  version: Int
  userId: ID
  unitId: ID
  takeAway: Boolean
  place: PlaceInput
  paymentMode: PaymentModeInput
  items: [OrderItemInput!]
  servingMode: ServingMode
  orderMode: OrderMode
  orderPolicy: OrderPolicy
}

input DeleteCartInput {
  id: ID!
}

type ModelTransactionConnection @aws_iam @aws_cognito_user_pools {
  items: [Transaction]!
  nextToken: String
}

input ModelTransactionFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  orderId: ModelIDInput
  type: ModelStringInput
  total: ModelFloatInput
  currency: ModelStringInput
  status: ModelPaymentStatusInput
  externalTransactionId: ModelStringInput
  invoiceId: ModelIDInput
  receiptId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  paymentMethodId: ModelStringInput
  and: [ModelTransactionFilterInput]
  or: [ModelTransactionFilterInput]
  not: ModelTransactionFilterInput
}

input ModelTransactionConditionInput {
  userId: ModelIDInput
  orderId: ModelIDInput
  type: ModelStringInput
  total: ModelFloatInput
  currency: ModelStringInput
  status: ModelPaymentStatusInput
  externalTransactionId: ModelStringInput
  invoiceId: ModelIDInput
  receiptId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  paymentMethodId: ModelStringInput
  and: [ModelTransactionConditionInput]
  or: [ModelTransactionConditionInput]
  not: ModelTransactionConditionInput
}

input CreateTransactionInput {
  id: ID
  userId: ID!
  orderId: ID!
  type: String
  total: Float
  currency: String
  status: PaymentStatus
  externalTransactionId: String
  invoiceId: ID
  receiptId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  paymentMethodId: String
}

input UpdateTransactionInput {
  id: ID!
  userId: ID
  orderId: ID
  type: String
  total: Float
  currency: String
  status: PaymentStatus
  externalTransactionId: String
  invoiceId: ID
  receiptId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  paymentMethodId: String
}

input DeleteTransactionInput {
  id: ID!
}

type ModelInvoiceConnection @aws_iam @aws_cognito_user_pools {
  items: [Invoice]!
  nextToken: String
}

input ModelInvoiceStatusInput {
  eq: InvoiceStatus
  ne: InvoiceStatus
}

input ModelInvoiceFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  orderId: ModelIDInput
  transactionId: ModelIDInput
  externalInvoiceId: ModelStringInput
  customerName: ModelStringInput
  taxNumber: ModelStringInput
  country: ModelStringInput
  city: ModelStringInput
  streetAddress: ModelStringInput
  postalCode: ModelStringInput
  email: ModelStringInput
  pdfUrl: ModelStringInput
  status: ModelInvoiceStatusInput
  and: [ModelInvoiceFilterInput]
  or: [ModelInvoiceFilterInput]
  not: ModelInvoiceFilterInput
}

input ModelInvoiceConditionInput {
  userId: ModelIDInput
  orderId: ModelIDInput
  transactionId: ModelIDInput
  externalInvoiceId: ModelStringInput
  customerName: ModelStringInput
  taxNumber: ModelStringInput
  country: ModelStringInput
  city: ModelStringInput
  streetAddress: ModelStringInput
  postalCode: ModelStringInput
  email: ModelStringInput
  pdfUrl: ModelStringInput
  status: ModelInvoiceStatusInput
  and: [ModelInvoiceConditionInput]
  or: [ModelInvoiceConditionInput]
  not: ModelInvoiceConditionInput
}

input CreateInvoiceInput {
  id: ID
  userId: ID!
  orderId: ID!
  transactionId: ID!
  externalInvoiceId: String
  customerName: String!
  taxNumber: String!
  country: String!
  city: String!
  streetAddress: String!
  postalCode: String!
  email: String
  pdfUrl: String
  status: InvoiceStatus!
}

input UpdateInvoiceInput {
  id: ID!
  userId: ID
  orderId: ID
  transactionId: ID
  externalInvoiceId: String
  customerName: String
  taxNumber: String
  country: String
  city: String
  streetAddress: String
  postalCode: String
  email: String
  pdfUrl: String
  status: InvoiceStatus
}

input DeleteInvoiceInput {
  id: ID!
}

type ModelReceiptConnection @aws_iam @aws_cognito_user_pools {
  items: [Receipt]!
  nextToken: String
}

input ModelReceiptStatusInput {
  eq: ReceiptStatus
  ne: ReceiptStatus
}

input ModelReceiptFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  orderId: ModelIDInput
  transactionId: ModelIDInput
  externalReceiptId: ModelStringInput
  email: ModelStringInput
  pdfData: ModelStringInput
  status: ModelReceiptStatusInput
  and: [ModelReceiptFilterInput]
  or: [ModelReceiptFilterInput]
  not: ModelReceiptFilterInput
}

input ModelReceiptConditionInput {
  userId: ModelIDInput
  orderId: ModelIDInput
  transactionId: ModelIDInput
  externalReceiptId: ModelStringInput
  email: ModelStringInput
  pdfData: ModelStringInput
  status: ModelReceiptStatusInput
  and: [ModelReceiptConditionInput]
  or: [ModelReceiptConditionInput]
  not: ModelReceiptConditionInput
}

input CreateReceiptInput {
  id: ID
  userId: ID!
  orderId: ID!
  transactionId: ID!
  externalReceiptId: String
  email: String
  pdfData: String
  status: ReceiptStatus!
}

input UpdateReceiptInput {
  id: ID!
  userId: ID
  orderId: ID
  transactionId: ID
  externalReceiptId: String
  email: String
  pdfData: String
  status: ReceiptStatus
}

input DeleteReceiptInput {
  id: ID!
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableChainProductFilterInput {
  id: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  productCategoryId: SearchableIDFilterInput
  productType: SearchableStringFilterInput
  isVisible: SearchableBooleanFilterInput
  image: SearchableStringFilterInput
  externalId: SearchableStringFilterInput
  dirty: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  allergens: SearchableStringFilterInput
  and: [SearchableChainProductFilterInput]
  or: [SearchableChainProductFilterInput]
  not: SearchableChainProductFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableChainProductSortableFields {
  id
  chainId
  productCategoryId
  productType
  isVisible
  image
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableChainProductSortInput {
  field: SearchableChainProductSortableFields
  direction: SearchableSortDirection
}

enum SearchableAggregateType {
  terms
  avg
  min
  max
  sum
}

enum SearchableChainProductAggregateField {
  id
  chainId
  productCategoryId
  productType
  isVisible
  image
  allergens
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableChainProductAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableChainProductAggregateField!
}

input SearchableGroupProductFilterInput {
  id: SearchableIDFilterInput
  parentId: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  groupId: SearchableIDFilterInput
  isVisible: SearchableBooleanFilterInput
  tax: SearchableIntFilterInput
  takeawayTax: SearchableIntFilterInput
  externalId: SearchableStringFilterInput
  dirty: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableGroupProductFilterInput]
  or: [SearchableGroupProductFilterInput]
  not: SearchableGroupProductFilterInput
}

enum SearchableGroupProductSortableFields {
  id
  parentId
  chainId
  groupId
  isVisible
  tax
  takeawayTax
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableGroupProductSortInput {
  field: SearchableGroupProductSortableFields
  direction: SearchableSortDirection
}

enum SearchableGroupProductAggregateField {
  id
  parentId
  chainId
  groupId
  isVisible
  tax
  takeawayTax
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableGroupProductAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableGroupProductAggregateField!
}

input SearchableUnitProductFilterInput {
  id: SearchableIDFilterInput
  parentId: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  groupId: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  isVisible: SearchableBooleanFilterInput
  takeaway: SearchableBooleanFilterInput
  laneId: SearchableIDFilterInput
  position: SearchableIntFilterInput
  externalId: SearchableStringFilterInput
  dirty: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  supportedServingModes: SearchableStringFilterInput
  and: [SearchableUnitProductFilterInput]
  or: [SearchableUnitProductFilterInput]
  not: SearchableUnitProductFilterInput
}

enum SearchableUnitProductSortableFields {
  id
  parentId
  chainId
  groupId
  unitId
  isVisible
  takeaway
  laneId
  position
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableUnitProductSortInput {
  field: SearchableUnitProductSortableFields
  direction: SearchableSortDirection
}

enum SearchableUnitProductAggregateField {
  id
  parentId
  chainId
  groupId
  unitId
  isVisible
  takeaway
  laneId
  position
  supportedServingModes
  externalId
  dirty
  createdAt
  updatedAt
}

input SearchableUnitProductAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableUnitProductAggregateField!
}

input SearchableAdminUserFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  email: SearchableStringFilterInput
  phone: SearchableStringFilterInput
  profileImage: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableAdminUserFilterInput]
  or: [SearchableAdminUserFilterInput]
  not: SearchableAdminUserFilterInput
}

enum SearchableAdminUserSortableFields {
  id
  name
  email
  phone
  profileImage
  createdAt
  updatedAt
}

input SearchableAdminUserSortInput {
  field: SearchableAdminUserSortableFields
  direction: SearchableSortDirection
}

enum SearchableAdminUserAggregateField {
  id
  name
  email
  phone
  profileImage
  createdAt
  updatedAt
}

input SearchableAdminUserAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableAdminUserAggregateField!
}

input SearchableChainFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  isActive: SearchableBooleanFilterInput
  email: SearchableStringFilterInput
  phone: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableChainFilterInput]
  or: [SearchableChainFilterInput]
  not: SearchableChainFilterInput
}

enum SearchableChainSortableFields {
  id
  name
  isActive
  email
  phone
  createdAt
  updatedAt
}

input SearchableChainSortInput {
  field: SearchableChainSortableFields
  direction: SearchableSortDirection
}

enum SearchableChainAggregateField {
  id
  name
  isActive
  email
  phone
  createdAt
  updatedAt
}

input SearchableChainAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableChainAggregateField!
}

input SearchableGroupFilterInput {
  id: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  name: SearchableStringFilterInput
  currency: SearchableStringFilterInput
  email: SearchableStringFilterInput
  phone: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableGroupFilterInput]
  or: [SearchableGroupFilterInput]
  not: SearchableGroupFilterInput
}

enum SearchableGroupSortableFields {
  id
  chainId
  name
  currency
  email
  phone
  createdAt
  updatedAt
}

input SearchableGroupSortInput {
  field: SearchableGroupSortableFields
  direction: SearchableSortDirection
}

enum SearchableGroupAggregateField {
  id
  chainId
  name
  currency
  email
  phone
  createdAt
  updatedAt
}

input SearchableGroupAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableGroupAggregateField!
}

input SearchableOrderFilterInput {
  id: SearchableIDFilterInput
  version: SearchableIntFilterInput
  userId: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  orderNum: SearchableStringFilterInput
  archived: SearchableBooleanFilterInput
  paymentIntention: SearchableFloatFilterInput
  transactionId: SearchableIDFilterInput
  hasRated: SearchableBooleanFilterInput
  tipTransactionId: SearchableIDFilterInput
  packagingFeeTaxPercentage: SearchableFloatFilterInput
  externalId: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  transactionStatus: SearchableStringFilterInput
  unpayCategory: SearchableStringFilterInput
  orderMode: SearchableStringFilterInput
  servingMode: SearchableStringFilterInput
  tipTransactionStatus: SearchableStringFilterInput
  orderPolicy: SearchableStringFilterInput
  soldOutVisibilityPolicy: SearchableStringFilterInput
  and: [SearchableOrderFilterInput]
  or: [SearchableOrderFilterInput]
  not: SearchableOrderFilterInput
}

enum SearchableOrderSortableFields {
  id
  version
  userId
  unitId
  orderNum
  archived
  paymentIntention
  transactionId
  hasRated
  tipTransactionId
  packagingFeeTaxPercentage
  externalId
  createdAt
  updatedAt
}

input SearchableOrderSortInput {
  field: SearchableOrderSortableFields
  direction: SearchableSortDirection
}

enum SearchableOrderAggregateField {
  id
  version
  userId
  unitId
  orderNum
  archived
  paymentIntention
  transactionStatus
  transactionId
  unpayCategory
  orderMode
  servingMode
  hasRated
  tipTransactionStatus
  tipTransactionId
  orderPolicy
  soldOutVisibilityPolicy
  packagingFeeTaxPercentage
  externalId
  createdAt
  updatedAt
}

input SearchableOrderAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableOrderAggregateField!
}

input SearchableProductCategoryFilterInput {
  id: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  image: SearchableStringFilterInput
  position: SearchableIntFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableProductCategoryFilterInput]
  or: [SearchableProductCategoryFilterInput]
  not: SearchableProductCategoryFilterInput
}

enum SearchableProductCategorySortableFields {
  id
  chainId
  image
  position
  createdAt
  updatedAt
}

input SearchableProductCategorySortInput {
  field: SearchableProductCategorySortableFields
  direction: SearchableSortDirection
}

enum SearchableProductCategoryAggregateField {
  id
  chainId
  image
  position
  createdAt
  updatedAt
}

input SearchableProductCategoryAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableProductCategoryAggregateField!
}

input SearchableProductComponentFilterInput {
  id: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  description: SearchableStringFilterInput
  externalId: SearchableStringFilterInput
  dirty: SearchableBooleanFilterInput
  soldOut: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  allergens: SearchableStringFilterInput
  and: [SearchableProductComponentFilterInput]
  or: [SearchableProductComponentFilterInput]
  not: SearchableProductComponentFilterInput
}

enum SearchableProductComponentSortableFields {
  id
  chainId
  description
  externalId
  dirty
  soldOut
  createdAt
  updatedAt
}

input SearchableProductComponentSortInput {
  field: SearchableProductComponentSortableFields
  direction: SearchableSortDirection
}

enum SearchableProductComponentAggregateField {
  id
  chainId
  description
  allergens
  externalId
  dirty
  soldOut
  createdAt
  updatedAt
}

input SearchableProductComponentAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableProductComponentAggregateField!
}

input SearchableProductComponentSetFilterInput {
  id: SearchableIDFilterInput
  externalId: SearchableStringFilterInput
  chainId: SearchableIDFilterInput
  type: SearchableStringFilterInput
  description: SearchableStringFilterInput
  items: SearchableIDFilterInput
  maxSelection: SearchableIntFilterInput
  dirty: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  supportedServingModes: SearchableStringFilterInput
  and: [SearchableProductComponentSetFilterInput]
  or: [SearchableProductComponentSetFilterInput]
  not: SearchableProductComponentSetFilterInput
}

enum SearchableProductComponentSetSortableFields {
  id
  externalId
  chainId
  type
  description
  items
  maxSelection
  dirty
  createdAt
  updatedAt
}

input SearchableProductComponentSetSortInput {
  field: SearchableProductComponentSetSortableFields
  direction: SearchableSortDirection
}

enum SearchableProductComponentSetAggregateField {
  id
  externalId
  chainId
  type
  description
  items
  maxSelection
  supportedServingModes
  dirty
  createdAt
  updatedAt
}

input SearchableProductComponentSetAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableProductComponentSetAggregateField!
}

input SearchableGeneratedProductCategoryFilterInput {
  id: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  productNum: SearchableIntFilterInput
  productCategoryId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableGeneratedProductCategoryFilterInput]
  or: [SearchableGeneratedProductCategoryFilterInput]
  not: SearchableGeneratedProductCategoryFilterInput
}

enum SearchableGeneratedProductCategorySortableFields {
  id
  unitId
  productNum
  productCategoryId
  createdAt
  updatedAt
}

input SearchableGeneratedProductCategorySortInput {
  field: SearchableGeneratedProductCategorySortableFields
  direction: SearchableSortDirection
}

enum SearchableGeneratedProductCategoryAggregateField {
  id
  unitId
  productNum
  productCategoryId
  createdAt
  updatedAt
}

input SearchableGeneratedProductCategoryAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableGeneratedProductCategoryAggregateField!
}

input SearchableGeneratedProductFilterInput {
  id: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  productCategoryId: SearchableIDFilterInput
  productType: SearchableStringFilterInput
  tax: SearchableIntFilterInput
  takeawayTax: SearchableIntFilterInput
  position: SearchableIntFilterInput
  image: SearchableStringFilterInput
  soldOut: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  allergens: SearchableStringFilterInput
  supportedServingModes: SearchableStringFilterInput
  and: [SearchableGeneratedProductFilterInput]
  or: [SearchableGeneratedProductFilterInput]
  not: SearchableGeneratedProductFilterInput
}

enum SearchableGeneratedProductSortableFields {
  id
  unitId
  productCategoryId
  productType
  tax
  takeawayTax
  position
  image
  soldOut
  createdAt
  updatedAt
}

input SearchableGeneratedProductSortInput {
  field: SearchableGeneratedProductSortableFields
  direction: SearchableSortDirection
}

enum SearchableGeneratedProductAggregateField {
  id
  unitId
  productCategoryId
  productType
  tax
  takeawayTax
  position
  image
  allergens
  supportedServingModes
  soldOut
  createdAt
  updatedAt
}

input SearchableGeneratedProductAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableGeneratedProductAggregateField!
}

input SearchableFavoriteProductFilterInput {
  id: SearchableIDFilterInput
  userId: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  favoriteProductProductId: SearchableIDFilterInput
  and: [SearchableFavoriteProductFilterInput]
  or: [SearchableFavoriteProductFilterInput]
  not: SearchableFavoriteProductFilterInput
}

enum SearchableFavoriteProductSortableFields {
  id
  userId
  unitId
  createdAt
  updatedAt
  favoriteProductProductId
}

input SearchableFavoriteProductSortInput {
  field: SearchableFavoriteProductSortableFields
  direction: SearchableSortDirection
}

enum SearchableFavoriteProductAggregateField {
  id
  userId
  unitId
  createdAt
  updatedAt
  favoriteProductProductId
}

input SearchableFavoriteProductAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableFavoriteProductAggregateField!
}

input SearchableUnitFilterInput {
  id: SearchableIDFilterInput
  groupId: SearchableIDFilterInput
  chainId: SearchableIDFilterInput
  lastOrderNum: SearchableIntFilterInput
  isActive: SearchableBooleanFilterInput
  isAcceptingOrders: SearchableBooleanFilterInput
  name: SearchableStringFilterInput
  email: SearchableStringFilterInput
  phone: SearchableStringFilterInput
  merchantId: SearchableStringFilterInput
  timeZone: SearchableStringFilterInput
  externalId: SearchableStringFilterInput
  packagingTaxPercentage: SearchableFloatFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  supportedServingModes: SearchableStringFilterInput
  supportedOrderModes: SearchableStringFilterInput
  orderPolicy: SearchableStringFilterInput
  soldOutVisibilityPolicy: SearchableStringFilterInput
  orderPaymentPolicy: SearchableStringFilterInput
  and: [SearchableUnitFilterInput]
  or: [SearchableUnitFilterInput]
  not: SearchableUnitFilterInput
}

enum SearchableUnitSortableFields {
  id
  groupId
  chainId
  lastOrderNum
  isActive
  isAcceptingOrders
  name
  email
  phone
  merchantId
  timeZone
  externalId
  packagingTaxPercentage
  createdAt
  updatedAt
}

input SearchableUnitSortInput {
  field: SearchableUnitSortableFields
  direction: SearchableSortDirection
}

enum SearchableUnitAggregateField {
  id
  groupId
  chainId
  lastOrderNum
  isActive
  isAcceptingOrders
  name
  email
  phone
  merchantId
  timeZone
  externalId
  supportedServingModes
  supportedOrderModes
  orderPolicy
  packagingTaxPercentage
  soldOutVisibilityPolicy
  orderPaymentPolicy
  createdAt
  updatedAt
}

input SearchableUnitAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableUnitAggregateField!
}

input SearchableUserFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  email: SearchableStringFilterInput
  phone: SearchableStringFilterInput
  profileImage: SearchableStringFilterInput
  stripeCustomerId: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableUserSortableFields {
  id
  name
  email
  phone
  profileImage
  stripeCustomerId
  createdAt
  updatedAt
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

enum SearchableUserAggregateField {
  id
  name
  email
  phone
  profileImage
  stripeCustomerId
  createdAt
  updatedAt
}

input SearchableUserAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableUserAggregateField!
}

input SearchableCartFilterInput {
  id: SearchableIDFilterInput
  version: SearchableIntFilterInput
  userId: SearchableIDFilterInput
  unitId: SearchableIDFilterInput
  takeAway: SearchableBooleanFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  servingMode: SearchableStringFilterInput
  orderMode: SearchableStringFilterInput
  orderPolicy: SearchableStringFilterInput
  and: [SearchableCartFilterInput]
  or: [SearchableCartFilterInput]
  not: SearchableCartFilterInput
}

enum SearchableCartSortableFields {
  id
  version
  userId
  unitId
  takeAway
  createdAt
  updatedAt
}

input SearchableCartSortInput {
  field: SearchableCartSortableFields
  direction: SearchableSortDirection
}

enum SearchableCartAggregateField {
  id
  version
  userId
  unitId
  takeAway
  servingMode
  orderMode
  orderPolicy
  createdAt
  updatedAt
}

input SearchableCartAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableCartAggregateField!
}

input SearchableTransactionFilterInput {
  id: SearchableIDFilterInput
  userId: SearchableIDFilterInput
  orderId: SearchableIDFilterInput
  type: SearchableStringFilterInput
  total: SearchableFloatFilterInput
  currency: SearchableStringFilterInput
  externalTransactionId: SearchableStringFilterInput
  invoiceId: SearchableIDFilterInput
  receiptId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  paymentMethodId: SearchableStringFilterInput
  status: SearchableStringFilterInput
  and: [SearchableTransactionFilterInput]
  or: [SearchableTransactionFilterInput]
  not: SearchableTransactionFilterInput
}

enum SearchableTransactionSortableFields {
  id
  userId
  orderId
  type
  total
  currency
  externalTransactionId
  invoiceId
  receiptId
  createdAt
  updatedAt
  paymentMethodId
}

input SearchableTransactionSortInput {
  field: SearchableTransactionSortableFields
  direction: SearchableSortDirection
}

enum SearchableTransactionAggregateField {
  id
  userId
  orderId
  type
  total
  currency
  status
  externalTransactionId
  invoiceId
  receiptId
  createdAt
  updatedAt
  paymentMethodId
}

input SearchableTransactionAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableTransactionAggregateField!
}

input SearchableInvoiceFilterInput {
  id: SearchableIDFilterInput
  userId: SearchableIDFilterInput
  orderId: SearchableIDFilterInput
  transactionId: SearchableIDFilterInput
  externalInvoiceId: SearchableStringFilterInput
  customerName: SearchableStringFilterInput
  taxNumber: SearchableStringFilterInput
  country: SearchableStringFilterInput
  city: SearchableStringFilterInput
  streetAddress: SearchableStringFilterInput
  postalCode: SearchableStringFilterInput
  email: SearchableStringFilterInput
  pdfUrl: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  status: SearchableStringFilterInput
  and: [SearchableInvoiceFilterInput]
  or: [SearchableInvoiceFilterInput]
  not: SearchableInvoiceFilterInput
}

enum SearchableInvoiceSortableFields {
  id
  userId
  orderId
  transactionId
  externalInvoiceId
  customerName
  taxNumber
  country
  city
  streetAddress
  postalCode
  email
  pdfUrl
  createdAt
  updatedAt
}

input SearchableInvoiceSortInput {
  field: SearchableInvoiceSortableFields
  direction: SearchableSortDirection
}

enum SearchableInvoiceAggregateField {
  id
  userId
  orderId
  transactionId
  externalInvoiceId
  customerName
  taxNumber
  country
  city
  streetAddress
  postalCode
  email
  pdfUrl
  status
  createdAt
  updatedAt
}

input SearchableInvoiceAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableInvoiceAggregateField!
}

input SearchableReceiptFilterInput {
  id: SearchableIDFilterInput
  userId: SearchableIDFilterInput
  orderId: SearchableIDFilterInput
  transactionId: SearchableIDFilterInput
  externalReceiptId: SearchableStringFilterInput
  email: SearchableStringFilterInput
  pdfData: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  status: SearchableStringFilterInput
  and: [SearchableReceiptFilterInput]
  or: [SearchableReceiptFilterInput]
  not: SearchableReceiptFilterInput
}

enum SearchableReceiptSortableFields {
  id
  userId
  orderId
  transactionId
  externalReceiptId
  email
  pdfData
  createdAt
  updatedAt
}

input SearchableReceiptSortInput {
  field: SearchableReceiptSortableFields
  direction: SearchableSortDirection
}

enum SearchableReceiptAggregateField {
  id
  userId
  orderId
  transactionId
  externalReceiptId
  email
  pdfData
  status
  createdAt
  updatedAt
}

input SearchableReceiptAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableReceiptAggregateField!
}

