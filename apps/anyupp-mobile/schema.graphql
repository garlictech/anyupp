schema {
    query: Query
    mutation: Mutation
}

type Address {
  address: String
  city: String
  country: String
  title: String
  postalCode: String
  location: Location
}

input AddressInput {
  address: String
  city: String
  country: String
  title: String
  postalCode: String
  location: LocationInput
}

type AdminRoleEntity {
  chainId: String
  groupId: String
  unitId: String
}

input AdminRoleEntityInput {
  chainId: String
  groupId: String
  unitId: String
}

type AdminUser {
  id: ID!
  name: String
  profileImage: String
  roles: AdminUserRole!
  settings: AdminUserSettings
  address: Address
  email: String
  phone: String
}

input AdminUserInput {
  name: String
  address: AddressInput
  email: String
  phone: String
  profileImage: String
}

type AdminUserRole {
  role: String!
  entities: [AdminRoleEntity]
}

input AdminUserRoleInput {
  role: String!
  entities: [AdminRoleEntityInput]
}

type AdminUserSettings {
  selectedChainId: String
  selectedGroupId: String
  selectedUnitId: String
  selectedProductCategoryId: String
  selectedLanguage: String
  selectedHistoryDate: Int
}

type Availability {
  type: String
  dayFrom: String
  dayTo: String
  timeFrom: String
  timeTo: String
  price: Float
}

enum CardBrand {
  amex
  diners
  discover
  jcb
  mastercard
  unionpay
  visa
  unknown
}

type CardChecks {
  address_line1_check: String
  address_postal_code_check: String
  cvc_check: String
}

enum CardFundingType {
  credit
  debit
  prepaid
  unknown
}

type Chain {
  id: ID!
  name: String
  description: LocalizedItem
  style: ChainStyle
  isActive: Boolean
}

type ChainProduct {
  id: ID!
  description: LocalizedItem
  extends: String
  image: String
  isVisible: Boolean
  tax: Int
  name: LocalizedItem
  position: String
  productCategoryId: ID
  laneId: ID
  productType: String
  variants: [ProductVariant]
}

type ChainStyle {
  colors: ChainStyleColors
  images: ChainStyleImages
}

type ChainStyleColors {
  backgroundLight: String
  backgroundDark: String
  borderLight: String
  borderDark: String
  disabled: String
  highlight: String
  indicator: String
  textLight: String
  textDark: String
}

type ChainStyleImages {
  header: String
  logo: String
}

enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  VG
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CD
  DK
  DJ
  DM
  DO
  TL
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  CI
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  CG
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  CS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  VI
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VA
  VE
  VN
  WF
  EH
  YE
  ZM
  ZW
}

enum Currency {
  usd
  aed
  afn
  all
  amd
  ang
  aoa
  ars
  aud
  awg
  azn
  bam
  bbd
  bdt
  bgn
  bif
  bmd
  bnd
  bob
  brl
  bsd
  bwp
  bzd
  cad
  cdf
  chf
  clp
  cny
  cop
  crc
  cve
  czk
  djf
  dkk
  dop
  dzd
  egp
  etb
  eur
  fjd
  fkp
  gbp
  gel
  gip
  gmd
  gnf
  gtq
  gyd
  hkd
  hnl
  hrk
  htg
  huf
  idr
  ils
  inr
  isk
  jmd
  jpy
  kes
  kgs
  khr
  kmf
  krw
  kyd
  kzt
  lak
  lbp
  lkr
  lrd
  lsl
  mad
  mdl
  mga
  mkd
  mmk
  mnt
  mop
  mro
  mur
  mvr
  mwk
  mxn
  myr
  mzn
  nad
  ngn
  nio
  nok
  npr
  nzd
  pab
  pen
  pgk
  php
  pkr
  pln
  pyg
  qar
  ron
  rsd
  rub
  rwf
  sar
  sbd
  scr
  sek
  sgd
  shp
  sll
  sos
  srd
  std
  szl
  thb
  tjs
  top
  try
  ttd
  twd
  tzs
  uah
  ugx
  uyu
  uzs
  vnd
  vuv
  wst
  xaf
  xcd
  xof
  xpf
  yer
  zar
  zmw
}

type CustomDailySchedule {
  date: String
  from: String
  to: String
}

type DailySchedule {
  from: String
  to: String
}

type FloorMapData {
  w: Int
  h: Int
  objects: [FloorMapDataObject]
}

type FloorMapDataObject {
  id: ID!
  t: String!
  c: String
  w: Int
  h: Int
  r: Int
  a: Int
  x: Int!
  y: Int!
  tID: String
  sID: String
}

type Group {
  id: ID!
  chainId: ID!
  name: String
  description: LocalizedItem
  currency: String
  address: Address
  email: String
  phone: String
}

type Lane {
  id: ID
  name: String
  color: String
}

type LocalizedItem {
  en: String
  de: String
  hu: String
}

type Location {
  lat: Float
  lng: Float
}

input LocationInput {
  lat: Float
  lng: Float
}

type Mutation {
  createAdminUser(newAdminData: AdminUserInput!): Boolean!
  updateAdminUser(id: ID!, newAdminData: AdminUserInput!): Boolean!
  updateAdminUserRole(id: ID!, newAdminRoleData: AdminUserRoleInput!): Boolean!
  startStripePayment(chainId: ID!, unitId: ID!, userId: ID!): String!
}

type Order {
  created: Int
  items: [OrderItem]
  paymentMethod: String
  staffId: ID
  statusLog: [StatusLog]
  sumPriceShown: PriceShown
  takeAway: Boolean
  userId: ID
  place: Place
  paymentIntention: Int
}

type OrderItem {
  created: Int
  productName: LocalizedItem
  priceShown: PriceShown
  productId: ID
  quantity: Int
  statusLog: [StatusLog]
  variantId: ID
  variantName: LocalizedItem
  laneId: ID
}

type PaymentMode {
  name: String!
  caption: String
  method: String!
}

type Place {
  seat: String
  table: String
}

type PriceShown {
  currency: String
  pricePerUnit: Float
  priceSum: Float
  tax: Int
  taxSum: Float
}

type ProductCategory {
  id: ID
  description: LocalizedItem
  image: String
  name: LocalizedItem
  position: String
}

type ProductVariant {
  variantName: LocalizedItem
  pack: ProductVariantPack
  refGroupPrice: Float
  isAvailable: Boolean
  price: Float
  availabilities: [Availability]
  availableFrom: String
  position: String
}

type ProductVariantPack {
  size: Float
  unit: String
}

type Query {
  getAdminUser(id: ID!): AdminUser
  getCustomerStripeCards(customerId: ID): [StripeCard]
}

type StatusLog {
  userId: ID
  status: String
  ts: Int
}

type StripeCard {
  brand: CardBrand
  checks: CardChecks
  country: CountryCode
  last4: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  funding: CardFundingType
  three_d_secure: String
  id: ID!
  object: String!
  metadata: [StripeMetadata!]!
}

type StripeMetadata {
  key: String!
  value: String!
}

type Subscription {
  adminUserChanged(id: ID!): AdminUser
}

type Unit {
  id: ID!
  groupId: ID!
  isActive: Boolean
  isAcceptingOrders: Boolean
  name: String
  description: LocalizedItem
  paymentModes: [PaymentMode]
  floorMap: FloorMapData
  lanes: [Lane]
  open: DailySchedule
  openingHours: WeeklySchedule
}

type User {
  id: ID!
  name: String
  address: Address
  email: String
  phone: String
  profileImage: String
  login: String
}

type WeeklySchedule {
  mon: DailySchedule
  tue: DailySchedule
  wed: DailySchedule
  thu: DailySchedule
  fri: DailySchedule
  sat: DailySchedule
  sun: DailySchedule
  override: [CustomDailySchedule]
}
