# FONTOS!!!! EZT CSAK A BACKEND OLDALHOZ SZABAD GENERALTATNI!!!!
# 'amplify api gql-compile' KELL!!!!
type GeoUnit @model 
@key(name: "unitsByChain", fields: ["chainId"])
@key(name: "unitsByGroup", fields: ["groupId"])
{
  id: ID!
  groupId: ID!
  chainId: ID!
  name: String
  address: Address
  style: ChainStyle
  paymentModes: [PaymentMode!]
  distance: Int
  openingHours: String
  currency: String
  place: Place
}

type Address {
  address: String
  city: String
  country: String
  title: String
  postalCode: String
  location: Location
}

type Location {
  lat: Float
  lng: Float
}

type LocalizedItem {
  en: String
  de: String
  hu: String
}

type ChainStyle {
  colors: ChainStyleColors
  images: ChainStyleImages
}

type ChainStyleColors {
  backgroundLight: String
  backgroundDark: String
  borderLight: String
  borderDark: String
  disabled: String
  highlight: String
  indicator: String
  textLight: String
  textDark: String
}

type ChainStyleImages {
  header: String
  logo: String
}

type PaymentMode {
  name: String!
  caption: String
  method: String!
}

type User {
  name: String
  email: String
  phone: String
  profileImage: String
  loginMethod: String
}

type GeneratedProduct @model
@key(name: "productsByUnit", fields: ["unitId"])
@key(name: "productsByUnitAndCategory", fields: ["unitId", "productCategoryId"])
{
  id: ID!
  unitId: ID!
  productCategoryId: ID!
  name: LocalizedItem
  description: LocalizedItem
  productType: String
  tax: Int
  position: Int
  image: String
  variants: [ProductVariant!]
}

type ProductCategory @model
@key(name: "byUnit", fields: ["unitId"])
{
  id: ID!
  unitId: ID!
  name: LocalizedItem
  description: LocalizedItem
  image: String
  position: Int
}

type ProductVariant {
  variantName: LocalizedItem
  pack: ProductVariantPack
  isAvailable: Boolean
  price: Float
  position: Int
}

type ProductVariantPack {
  size: Float
  unit: String
}

type FavoriteProduct @model
@key(name: "favoritesByUserAndUnit", fields: ["userID", "unitID"])
{
  id: ID!
  userID: ID!
  unitID: ID!
  product: GeneratedProduct @connection
}

type Order @model 
@key(name: "ordersByUser", fields: ["userId"])
@key(name: "ordersByUserAndUnit", fields: ["userId", "unitId"])
{
  id: ID!
  userId: ID!
  unitId: ID!
  items: [OrderItem]
  paymentMethod: String
  staffId: String
  sumPriceShown: PriceShown
  takeAway: Boolean
  place: Place
  paymentIntention: Int
  statusLog: [StatusLog]
  created: Int
}

type OrderItem {
  productId: ID!
  variantId: ID!
  productName: LocalizedItem
  priceShown: PriceShown
  quantity: Int
  statusLog: [StatusLog]
  variantName: LocalizedItem
  created: Int
  takeAway: Boolean
}

type Place {
  seat: String
  table: String
}

type PriceShown {
  currency: String
  pricePerUnit: Float
  priceSum: Float
  tax: Int
  taxSum: Float
}

type StatusLog {
  userId: ID!
  status: String
  ts: Int
}

type Subscription {
  onProductChanged(unitId: String): GeneratedProduct @aws_subscribe(mutations: ["createGeneratedProduct", "updateGeneratedProduct", "deleteGeneratedProduct"])
  onOrderChanged(userId: String, unitId: String): Order @aws_subscribe(mutations: ["createOrder", "updateOrder", "deleteOrder"])
}
